#!/bin/bash

# üöÄ Outcast TimeBot - Production Deployment Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_step() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "üöÄ ======================================================"
    echo "   Outcast TimeBot v4.0 - Production Deployment"
    echo "=======================================================${NC}"
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        print_error "–¢—Ä–µ–±—É–µ—Ç—Å—è Node.js 18+. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $(node -v)"
        exit 1
    fi
    
    # npm
    if ! command -v npm &> /dev/null; then
        print_error "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    # git (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if command -v git &> /dev/null; then
        print_success "Git –Ω–∞–π–¥–µ–Ω: $(git --version)"
    else
        print_warning "Git –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
    fi
    
    print_success "Node.js $(node -v) –∏ npm $(npm -v) –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -f ".env" ]; then
        print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
        if [ -f "env.example" ]; then
            cp env.example .env
            print_warning "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ!"
            print_warning "–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞..."
        else
            print_error "–®–∞–±–ª–æ–Ω env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    source .env 2>/dev/null || true
    
    MISSING_VARS=()
    
    [ -z "$TELEGRAM_BOT_TOKEN" ] && MISSING_VARS+=("TELEGRAM_BOT_TOKEN")
    [ -z "$JWT_SECRET" ] && MISSING_VARS+=("JWT_SECRET")
    [ -z "$ADMIN_USERNAME" ] && MISSING_VARS+=("ADMIN_USERNAME")
    [ -z "$ADMIN_PASSWORD" ] && MISSING_VARS+=("ADMIN_PASSWORD")
    
    if [ ${#MISSING_VARS[@]} -ne 0 ]; then
        print_error "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
        for var in "${MISSING_VARS[@]}"; do
            echo "  - $var"
        done
        print_warning "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç"
        exit 1
    fi
    
    print_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend..."
    npm ci --production
    print_success "Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π admin-panel..."
    cd admin-panel
    npm ci
    cd ..
    print_success "Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup_database() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if [ "$NODE_ENV" = "production" ] && [ -n "$DB_HOST" ]; then
        print_step "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        if command -v psql &> /dev/null && [ -n "$DB_HOST" ]; then
            print_step "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
            PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME -c "SELECT 1;" &> /dev/null
            if [ $? -eq 0 ]; then
                print_success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ"
            else
                print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL"
                print_warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DB_* –≤ .env —Ñ–∞–π–ª–µ"
                exit 1
            fi
        fi
    else
        print_step "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    fi
    
    # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    print_step "–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    npm run migrate 2>/dev/null || {
        print_warning "–ö–æ–º–∞–Ω–¥–∞ migrate –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é..."
        node src/database/migrate.js || true
    }
    
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

# –°–±–æ—Ä–∫–∞ frontend
build_frontend() {
    print_step "–°–±–æ—Ä–∫–∞ admin-panel –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."
    
    cd admin-panel
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    if [ ! -f ".env" ]; then
        print_step "–°–æ–∑–¥–∞—ë–º .env –¥–ª—è admin-panel..."
        echo "VITE_API_URL=http://localhost:3000/api" > .env
    fi
    
    # –°–±–æ—Ä–∫–∞
    npm run build
    
    if [ $? -eq 0 ]; then
        print_success "Admin-panel —Å–æ–±—Ä–∞–Ω –≤ admin-panel/dist/"
    else
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ admin-panel"
        cd ..
        exit 1
    fi
    
    cd ..
}

# –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è
choose_deployment() {
    echo
    print_step "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    echo "1) üîÑ PM2 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è VPS)"
    echo "2) üê≥ Docker"
    echo "3) üñ•Ô∏è  –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
    echo "4) ‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—É—Å–∫"
    echo
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): " DEPLOY_CHOICE
    
    case $DEPLOY_CHOICE in
        1) deploy_pm2 ;;
        2) deploy_docker ;;
        3) deploy_normal ;;
        4) print_warning "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω" ;;
        *) print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"; exit 1 ;;
    esac
}

# –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å PM2
deploy_pm2() {
    print_step "–†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å PM2..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if ! command -v pm2 &> /dev/null; then
        print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2..."
        npm install -g pm2
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω
    pm2 stop timebot 2>/dev/null || true
    pm2 delete timebot 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫
    pm2 start index.js --name "timebot" --env production
    pm2 save
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    pm2 startup || true
    
    print_success "TimeBot –∑–∞–ø—É—â–µ–Ω —Å PM2!"
    print_step "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã PM2:"
    echo "  pm2 logs timebot     - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "  pm2 restart timebot  - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo "  pm2 stop timebot     - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "  pm2 monit           - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
}

# –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å Docker
deploy_docker() {
    print_step "–†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å Docker..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
    docker-compose down 2>/dev/null || true
    
    # –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
    docker-compose up -d --build
    
    if [ $? -eq 0 ]; then
        print_success "TimeBot –∑–∞–ø—É—â–µ–Ω –≤ Docker!"
        print_step "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Docker:"
        echo "  docker-compose logs -f    - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
        echo "  docker-compose restart    - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
        echo "  docker-compose down       - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker"
        exit 1
    fi
}

# –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
deploy_normal() {
    print_step "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    export NODE_ENV=production
    
    print_step "–ó–∞–ø—É—Å–∫ backend –Ω–∞ http://localhost:3000"
    print_warning "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    
    node index.js
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
health_check() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
    
    sleep 3  # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    HEALTH_RESPONSE=$(curl -s http://localhost:3000/health 2>/dev/null || echo "error")
    
    if [[ $HEALTH_RESPONSE == *"healthy"* ]] || [[ $HEALTH_RESPONSE == *"OK"* ]]; then
        print_success "Backend —Ä–∞–±–æ—Ç–∞–µ—Ç: http://localhost:3000"
    else
        print_warning "Backend –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤ (–∑–∞–ø—É—Å–∫ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ admin-panel
    if [ -d "admin-panel/dist" ]; then
        print_success "Admin-panel —Å–æ–±—Ä–∞–Ω: admin-panel/dist/"
    fi
}

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
show_final_info() {
    echo
    print_success "üéâ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo
    print_step "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  üîó Backend API: http://localhost:3000"
    echo "  üîó Health Check: http://localhost:3000/health"
    echo "  üìÅ Admin Panel: admin-panel/dist/ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)"
    echo
    print_step "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "  üìÑ README.md - –ø–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    echo "  üì± EMPLOYEE_GUIDE.md - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    echo
    print_step "üõ†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (nginx) –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ admin-panel"
    echo "  2. –î–æ–±–∞–≤—å—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è HTTPS"
    echo "  3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram"
    echo
    print_step "ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞:"
    echo "  1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram: @YourBotName"
    echo "  2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    echo "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏"
    echo
    print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º–µ–Ω –∏ SSL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    print_step "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ Outcast TimeBot v4.0..."
    echo
    
    check_requirements
    check_env
    install_dependencies
    setup_database
    build_frontend
    choose_deployment
    
    if [ "$DEPLOY_CHOICE" != "4" ]; then
        health_check
    fi
    
    show_final_info
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'print_error "–†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ!"; exit 1' ERR

# –ó–∞–ø—É—Å–∫
main "$@" 