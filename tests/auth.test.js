const request = require('supertest');
const bcrypt = require('bcryptjs');
const express = require('express');
const { User } = require('../src/models');
const { errorHandler } = require('../src/services/errors');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const createTestApp = () => {
  const app = express();
  app.use(express.json());
  app.use('/api/auth', require('../src/routes/auth'));
  app.use(errorHandler);
  return app;
};

describe('üîê –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', () => {
  let app;

  beforeEach(() => {
    app = createTestApp();
    // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ rate limiting
    return new Promise(resolve => setTimeout(resolve, 100));
  });

  describe('POST /api/auth/login', () => {
    describe('‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏', () => {
      test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        const admin = await testUtils.createTestAdmin({
          username: 'testadmin1',
          passwordHash: await bcrypt.hash('TestPass123!', 12)
        });

        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: 'testadmin1',
            password: 'TestPass123!'
          });

        expect(response.status).toBe(200);
        expect(response.body.success).toBe(true);
        expect(response.body.token).toBeDefined();
        expect(response.body.user).toMatchObject({
          id: admin.id,
          username: 'testadmin1',
          role: 'admin'
        });
      });

      test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å lastLogin –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞', async () => {
        const admin = await testUtils.createTestAdmin({
          username: 'testadmin2',
          passwordHash: await bcrypt.hash('TestPass123!', 12)
        });

        const beforeLogin = admin.lastLogin;

        await request(app)
          .post('/api/auth/login')
          .send({
            username: 'testadmin2',
            password: 'TestPass123!'
          });

        const updatedAdmin = await User.findByPk(admin.id);
        expect(updatedAdmin.lastLogin).not.toBe(beforeLogin);
        expect(new Date(updatedAdmin.lastLogin)).toBeInstanceOf(Date);
      });

      test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Ö–µ—à –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', async () => {
        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –±–µ–∑ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è
        const admin = await testUtils.createTestAdmin({
          username: process.env.ADMIN_USERNAME,
          passwordHash: null
        });

        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: process.env.ADMIN_USERNAME,
            password: process.env.ADMIN_PASSWORD
          });

        expect(response.status).toBe(200);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à –ø–∞—Ä–æ–ª—è –±—ã–ª —Å–æ–∑–¥–∞–Ω
        const updatedAdmin = await User.findByPk(admin.id);
        expect(updatedAdmin.passwordHash).toBeDefined();
        expect(updatedAdmin.passwordHash).not.toBeNull();
      });
    });

    describe('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', () => {
      test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: 'ab',
            password: 'ValidPass123!'
          });

        expect(response.status).toBe(400);
        expect(response.body.success).toBe(false);
        expect(response.body.message).toBe('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        expect(response.body.errors).toEqual(
          expect.arrayContaining([
            expect.objectContaining({
              path: 'username',
              msg: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤'
            })
          ])
        );
      });

      test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å', async () => {
        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: 'validuser',
            password: '123'
          });

        expect(response.status).toBe(400);
        expect(response.body.success).toBe(false);
        expect(response.body.errors).toEqual(
          expect.arrayContaining([
            expect.objectContaining({
              path: 'password',
              msg: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤'
            })
          ])
        );
      });

      test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π XSS –≤ username', async () => {
        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: '<script>alert("xss")</script>',
            password: 'ValidPass123!'
          });

        // –ú–æ–∂–µ—Ç –±—ã—Ç—å 401 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω) –∏–ª–∏ 429 (rate limit)
        expect([401, 429]).toContain(response.status);
        if (response.status === 401) {
          expect(response.body.message).toBe('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        } else if (response.status === 429) {
          expect(response.body.message).toContain('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞');
        }
      });
    });

    describe('üö´ –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', () => {
      test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: 'nonexistent123456',
            password: 'ValidPass123!'
          });

        expect([401, 429]).toContain(response.status);
        if (response.status === 401) {
          expect(response.body.success).toBe(false);
          expect(response.body.message).toBe('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
      });

      test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
        await testUtils.createTestAdmin({
          username: 'inactiveadmin123',
          status: 'inactive',
          passwordHash: await bcrypt.hash('TestPass123!', 12)
        });

        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: 'inactiveadmin123',
            password: 'TestPass123!'
          });

        expect([401, 429]).toContain(response.status);
        if (response.status === 401) {
          expect(response.body.message).toBe('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
      });

      test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ-–∞–¥–º–∏–Ω–∞', async () => {
        await testUtils.createTestUser({
          username: 'employee123',
          role: 'employee',
          passwordHash: await bcrypt.hash('TestPass123!', 12)
        });

        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: 'employee123',
            password: 'TestPass123!'
          });

        expect([401, 429]).toContain(response.status);
        if (response.status === 401) {
          expect(response.body.message).toBe('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
      });

      test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', async () => {
        await testUtils.createTestAdmin({
          username: 'testadmin123',
          passwordHash: await bcrypt.hash('CorrectPass123!', 12)
        });

        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: 'testadmin123',
            password: 'WrongPass123!'
          });

        expect([401, 429]).toContain(response.status);
        if (response.status === 401) {
          expect(response.body.message).toBe('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
      });
    });

    describe('üõ°Ô∏è Rate Limiting', () => {
      test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å rate limiting (–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω)', async () => {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç rate limiting - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã
        const response = await request(app)
          .post('/api/auth/login')
          .send({
            username: 'nonexistentuser123',
            password: 'ValidPass123!'
          });
        
        // –û–∂–∏–¥–∞–µ–º –ª—é–±–æ–π –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        expect([401, 429, 400]).toContain(response.status);
      }, 3000);
    });
  });

  describe('POST /api/auth/change-password', () => {
    describe('‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏', () => {
      test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', async () => {
        const admin = await testUtils.createTestAdmin({
          username: 'changepassadmin',
          passwordHash: await bcrypt.hash('OldPass123!', 12)
        });
        
        const token = testUtils.generateTestToken(admin);

        const response = await request(app)
          .post('/api/auth/change-password')
          .set('Authorization', `Bearer ${token}`)
          .send({
            currentPassword: 'OldPass123!',
            newPassword: 'NewSecurePass123!'
          });

        expect(response.status).toBe(200);
        expect(response.body.success).toBe(true);
        expect(response.body.message).toBe('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        const updatedAdmin = await User.findByPk(admin.id);
        const isNewPasswordValid = await bcrypt.compare('NewSecurePass123!', updatedAdmin.passwordHash);
        expect(isNewPasswordValid).toBe(true);
      });
    });

    describe('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', () => {
      test('–¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å', async () => {
        const admin = await testUtils.createTestAdmin({
          username: 'weakpassadmin'
        });
        const token = testUtils.generateTestToken(admin);

        const response = await request(app)
          .post('/api/auth/change-password')
          .set('Authorization', `Bearer ${token}`)
          .send({
            currentPassword: 'TestPass123!',
            newPassword: 'weak'
          });

        expect(response.status).toBe(400);
        expect(response.body.errors).toEqual(
          expect.arrayContaining([
            expect.objectContaining({
              path: 'newPassword',
              msg: expect.stringContaining('—Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, —Ü–∏—Ñ—Ä—É –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª')
            })
          ])
        );
      });

      test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', async () => {
        const admin = await testUtils.createTestAdmin({
          username: 'wrongpassadmin',
          passwordHash: await bcrypt.hash('CorrectPass123!', 12)
        });
        const token = testUtils.generateTestToken(admin);

        const response = await request(app)
          .post('/api/auth/change-password')
          .set('Authorization', `Bearer ${token}`)
          .send({
            currentPassword: 'WrongPass123!',
            newPassword: 'NewSecurePass123!'
          });

        expect(response.status).toBe(401);
        expect(response.body.message).toBe('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
      });
    });
  });

  describe('GET /api/auth/verify', () => {
    test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω', async () => {
      const admin = await testUtils.createTestAdmin({
        username: 'verifyadmin'
      });
      const token = testUtils.generateTestToken(admin);

      const response = await request(app)
        .get('/api/auth/verify')
        .set('Authorization', `Bearer ${token}`);

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.user).toBeDefined();
    });

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞', async () => {
      const response = await request(app)
        .get('/api/auth/verify');

      expect(response.status).toBe(401);
      expect(response.body.message).toBe('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    });
  });
}); 