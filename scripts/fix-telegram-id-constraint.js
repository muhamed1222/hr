require('dotenv').config();
const { sequelize } = require('../src/models');

async function fixTelegramIdConstraint() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è NOT NULL –¥–ª—è telegram_id...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –í SQLite –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    
    await sequelize.query(`
      CREATE TABLE users_new (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id BIGINT UNIQUE,
        name VARCHAR(255) NOT NULL,
        username VARCHAR(255),
        password_hash VARCHAR(255),
        role TEXT CHECK(role IN ('employee', 'manager', 'admin')) DEFAULT 'employee',
        status TEXT CHECK(status IN ('active', 'inactive', 'suspended')) DEFAULT 'active',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        vacation_days INTEGER NOT NULL DEFAULT 28,
        temporary_password VARCHAR(255),
        telegram_temp_id VARCHAR(255),
        telegram_username VARCHAR(255),
        telegram_first_name VARCHAR(255),
        telegram_last_name VARCHAR(255),
        created_via_telegram BOOLEAN DEFAULT FALSE,
        last_login DATETIME
      );
    `);
    console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');
    
    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    await sequelize.query(`
      INSERT INTO users_new (
        id, telegram_id, name, username, password_hash, role, status,
        created_at, updated_at, vacation_days, temporary_password,
        telegram_temp_id, telegram_username, telegram_first_name,
        telegram_last_name, created_via_telegram, last_login
      )
      SELECT 
        id, telegram_id, name, username, password_hash, role, status,
        created_at, updated_at, vacation_days, temporary_password,
        telegram_temp_id, telegram_username, telegram_first_name,
        telegram_last_name, created_via_telegram, last_login
      FROM users;
    `);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
    console.log('üîÑ –ó–∞–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü...');
    await sequelize.query('DROP TABLE users;');
    await sequelize.query('ALTER TABLE users_new RENAME TO users;');
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ–Ω–µ–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìá –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS idx_users_username_status ON users(username, status);
    `);
    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS idx_users_password_hash ON users(password_hash) WHERE password_hash IS NOT NULL;
    `);
    await sequelize.query(`
      CREATE UNIQUE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id) WHERE telegram_id IS NOT NULL;
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üéâ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixTelegramIdConstraint().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 