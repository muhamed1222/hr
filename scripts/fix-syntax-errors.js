#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
 */

const fs = require('fs');
const path = require('path');

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–µ
 */
function fixSyntaxErrors(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const modified = false;

    // –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ñ–∞–π–ª–∞
    content = content.replace(/const \{ LIMITS, HTTP_STATUS_CODES, TIME_CONSTANTS \} = require\("\.\.\/constants"\);/g, '');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö
    content = content.replace(/const LIMITS = \{\s*DEFAULT_PAGE_SIZE: LIMITS\.DEFAULT_PAGE_SIZE,/g, '');
    content = content.replace(/const HTTP_STATUS_CODES = \{\s*BAD_REQUEST: HTTP_STATUS_CODES\.BAD_REQUEST,/g, '');
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    content = content.replace(/const _(\w+) = require\(/g, 'const $1 = require(');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è sequelize
    content = content.replace(/const _sequelize = require\(/g, 'const sequelize = require(');
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ const –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ñ—É–Ω–∫—Ü–∏–π
    content = content.replace(/\nconst \{ LIMITS, HTTP_STATUS_CODES, TIME_CONSTANTS \} = require\("\.\.\/constants"\);\s*\n/g, '\n');

    if (modified || content !== fs.readFileSync(filePath, 'utf8')) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
      return true;
    }

    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã
 */
function fixDirectory(dirPath) {
  const files = fs.readdirSync(dirPath);
  let fixedCount = 0;

  files.forEach(file => {
    const filePath = path.join(dirPath, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
      fixedCount += fixDirectory(filePath);
    } else if (file.endsWith('.js') && !file.includes('test')) {
      if (fixSyntaxErrors(filePath)) {
        fixedCount++;
      }
    }
  });

  return fixedCount;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏...\n');

  const srcDir = path.join(__dirname, '../src');
  const fixedCount = fixDirectory(srcDir);

  console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

if (require.main === module) {
  main();
}

module.exports = { fixSyntaxErrors, fixDirectory }; 