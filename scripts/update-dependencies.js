#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º
const log = {
  info: (msg) => console.log(colors.blue + msg + colors.reset),
  success: (msg) => console.log(colors.green + msg + colors.reset),
  warning: (msg) => console.log(colors.yellow + msg + colors.reset),
  error: (msg) => console.log(colors.red + msg + colors.reset)
};

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function execCommand(command) {
  try {
    const output = execSync(command, { encoding: 'utf8' });
    return { success: true, output };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async function updateDependencies() {
  log.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...');
  const auditResult = execCommand('pnpm audit');
  
  if (!auditResult.success) {
    log.warning('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏:');
    console.log(auditResult.error);
  }

  log.info('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...');
  const outdatedResult = execCommand('pnpm outdated');
  
  if (!outdatedResult.success) {
    log.warning('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã:');
    console.log(outdatedResult.output);
  }

  log.info('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const updateResult = execCommand('pnpm update');
  if (updateResult.success) {
    log.success('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  } else {
    log.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    console.log(updateResult.error);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ dev-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const updateDevResult = execCommand('pnpm update -D');
  if (updateDevResult.success) {
    log.success('‚úÖ Dev-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  } else {
    log.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ dev-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    console.log(updateDevResult.error);
  }

  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
  log.info('\nüîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...');
  const finalAuditResult = execCommand('pnpm audit');
  
  if (finalAuditResult.success) {
    log.success('‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
  } else {
    log.warning('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏:');
    console.log(finalAuditResult.error);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  const report = {
    date: new Date().toISOString(),
    initialAudit: auditResult,
    outdated: outdatedResult,
    updates: {
      dependencies: updateResult,
      devDependencies: updateDevResult
    },
    finalAudit: finalAuditResult
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  const reportsDir = path.join(__dirname, '../reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }

  const reportPath = path.join(reportsDir, `dependency-update-${new Date().toISOString().split('T')[0]}.json`);
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  log.success(`\nüìù –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${reportPath}`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
updateDependencies().catch(error => {
  log.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:');
  console.error(error);
  process.exit(1);
}); 