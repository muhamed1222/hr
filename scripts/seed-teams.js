const { User, Team, UserTeam, sequelize } = require('../src/models');
const AuditLogger = require('../src/utils/auditLogger');

async function seedTeams() {
  try {
    console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥...');

    // –ù–∞–π–¥–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.findAll();
    if (users.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥');
      return;
    }

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ù–∞–π–¥–µ–º –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    const admin = users.find(u => u.role === 'admin');
    if (!admin) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    const teamsData = [
      {
        name: '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        description: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
        managerId: admin.id,
        settings: {
          reminders_enabled: true,
          work_hours: {
            start: '09:00',
            end: '18:00',
            lunch_duration: 60
          },
          timezone: 'Europe/Moscow'
        }
      },
      {
        name: '–ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        description: '–ö–æ–º–∞–Ω–¥–∞ QA –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤',
        managerId: admin.id,
        settings: {
          reminders_enabled: true,
          work_hours: {
            start: '10:00',
            end: '19:00',
            lunch_duration: 60
          },
          timezone: 'Europe/Moscow'
        }
      },
      {
        name: 'HR –æ—Ç–¥–µ–ª',
        description: '–û—Ç–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º',
        managerId: admin.id,
        settings: {
          reminders_enabled: false,
          work_hours: {
            start: '09:00',
            end: '17:00',
            lunch_duration: 60
          },
          timezone: 'Europe/Moscow'
        }
      }
    ];

    const createdTeams = [];

    for (const teamData of teamsData) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ
      const existingTeam = await Team.findOne({ where: { name: teamData.name } });
      
      if (existingTeam) {
        console.log(`‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ "${teamData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        createdTeams.push(existingTeam);
        continue;
      }

      const team = await Team.create(teamData);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${team.name}`);
      createdTeams.push(team);

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
      await AuditLogger.logTeamCreated(admin.id, team, { 
        clientIP: '127.0.0.1', 
        userAgent: 'Seed Script' 
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—ã
    console.log('\nüë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—ã...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∞–¥–º–∏–Ω–æ–≤)
    const employees = users.filter(u => u.role === 'employee');
    
    if (employees.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã');
    } else {
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
      for (let i = 0; i < employees.length; i++) {
        const employee = employees[i];
        const team = createdTeams[i % createdTeams.length]; // –ö—Ä—É–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        const existingMembership = await UserTeam.findOne({
          where: { userId: employee.id, teamId: team.id, status: 'active' }
        });
        
        if (existingMembership) {
          console.log(`‚ö†Ô∏è ${employee.name} —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã "${team.name}"`);
          continue;
        }

        await UserTeam.create({
          userId: employee.id,
          teamId: team.id,
          role: 'member',
          status: 'active'
        });

        console.log(`‚ûï ${employee.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É "${team.name}"`);

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
        await AuditLogger.logTeamMembershipChanged(
          admin.id, 
          team.id, 
          employee.id, 
          'add', 
          { clientIP: '127.0.0.1', userAgent: 'Seed Script' }
        );
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:');
    for (const team of createdTeams) {
      const memberCount = await UserTeam.count({
        where: { teamId: team.id, status: 'active' }
      });
      console.log(`  üîπ ${team.name}: ${memberCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
    }

    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:', error);
    throw error;
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedTeams()
    .then(() => {
      console.log('‚úÖ –°–∏–¥ –∑–∞–≤–µ—Ä—à—ë–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –û—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { seedTeams }; 