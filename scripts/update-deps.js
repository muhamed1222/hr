#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º
function runCommand(command, description) {
  console.log(`üìã ${description}...`);
  try {
    const output = execSync(command, { 
      encoding: 'utf8', 
      stdio: 'pipe',
      cwd: process.cwd()
    });
    console.log(`‚úÖ ${description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    return output;
  } catch (error) {
    console.log(`‚ùå ${description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏`);
    if (error.stdout) {
      console.log(error.stdout);
    }
    if (error.stderr) {
      console.log(error.stderr);
    }
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function checkCompatibility() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –≤–µ—Ä—Å–∏—é
  const nodeVersion = process.version;
  console.log(`üì¶ Node.js –≤–µ—Ä—Å–∏—è: ${nodeVersion}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const engines = packageJson.engines || {};
  
  if (engines.node) {
    console.log(`üìã –¢—Ä–µ–±—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è Node.js: ${engines.node}`);
  }
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function createBackup() {
  console.log('\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupDir = `backup-${timestamp}`;
  
  try {
    execSync(`mkdir -p ${backupDir}`);
    execSync(`cp package.json ${backupDir}/`);
    execSync(`cp package-lock.json ${backupDir}/ 2>/dev/null || true`);
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ ${backupDir}`);
    return backupDir;
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    checkCompatibility();
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    const backupDir = createBackup();
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...');
    runCommand('npm audit', '–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    
    // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π
    runCommand('npm update', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    const packagesToUpdate = [
      'node-telegram-bot-api',
      'tough-cookie',
      'express-rate-limit',
      'helmet'
    ];
    
    packagesToUpdate.forEach(pkg => {
      console.log(`\nüì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${pkg}...`);
      try {
        execSync(`npm install ${pkg}@latest`, { 
          encoding: 'utf8', 
          stdio: 'pipe' 
        });
        console.log(`‚úÖ ${pkg} –æ–±–Ω–æ–≤–ª–µ–Ω`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ${pkg}: ${error.message}`);
      }
    });
    
    // 5. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...');
    runCommand('npm audit fix --force', '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π');
    
    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    runCommand('npm audit', '–§–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    
    // 7. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
    const testResult = runCommand('npm test', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏');
    
    if (testResult) {
      console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é');
      console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏');
      console.log('3. –°–æ–æ–±—â–∏—Ç–µ –∫–æ–º–∞–Ω–¥–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö');
      
      if (backupDir) {
        console.log(`4. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${backupDir}`);
      }
    } else {
      console.log('\n‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏');
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { main, checkCompatibility, createBackup }; 