const { sequelize, User, Absence, Team, UserTeam } = require('../src/models');
const moment = require('moment');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
 */
async function seedAbsences() {
  try {
    console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ...');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.findAll({
      where: { status: 'active' },
      limit: 10
    });

    if (users.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫');
      return;
    }

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${users.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—É—Å–∫–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await User.update(
      { vacationDays: 28 },
      { where: { status: 'active' } }
    );
    console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –æ—Ç–ø—É—Å–∫–Ω—ã—Ö –¥–Ω–µ–π (28 –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö)');

    const absencesData = [];

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞—è–≤–æ–∫
    const absenceTypes = [
      { type: 'vacation', reason: '–°–µ–º–µ–π–Ω—ã–π –æ—Ç–ø—É—Å–∫' },
      { type: 'sick', reason: '–ü—Ä–æ—Å—Ç—É–¥–∞' },
      { type: 'business_trip', reason: '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ –≤ –ú–æ—Å–∫–≤—É' },
      { type: 'day_off', reason: '–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞' },
      { type: 'vacation', reason: '–û—Ç–¥—ã—Ö –Ω–∞ –º–æ—Ä–µ' },
      { type: 'sick', reason: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ' }
    ];

    users.forEach((user, index) => {
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ–º 2-3 –∑–∞—è–≤–∫–∏
      const numAbsences = Math.floor(Math.random() * 2) + 2; // 2-3 –∑–∞—è–≤–∫–∏
      
      for (let i = 0; i < numAbsences; i++) {
        const absenceType = absenceTypes[(index * numAbsences + i) % absenceTypes.length];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã
        const startDate = moment().add(Math.floor(Math.random() * 60) + 5, 'days'); // –æ—Ç 5 –¥–æ 65 –¥–Ω–µ–π –≤ –±—É–¥—É—â–µ–º
        const duration = absenceType.type === 'vacation' ? 
          Math.floor(Math.random() * 10) + 5 : // –æ—Ç–ø—É—Å–∫ 5-14 –¥–Ω–µ–π
          Math.floor(Math.random() * 3) + 1;   // –¥—Ä—É–≥–∏–µ 1-3 –¥–Ω—è
        
        const endDate = startDate.clone().add(duration - 1, 'days');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (80% pending, 10% approved, 10% rejected)
        const rand = Math.random();
        let status = 'pending';
        let approvedBy = null;
        let approvedAt = null;
        let rejectionReason = null;

        if (rand < 0.1) {
          status = 'approved';
          approvedBy = users[0].id; // –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä
          approvedAt = moment().subtract(Math.floor(Math.random() * 5), 'days').toDate();
        } else if (rand < 0.2) {
          status = 'rejected';
          approvedBy = users[0].id;
          approvedAt = moment().subtract(Math.floor(Math.random() * 5), 'days').toDate();
          rejectionReason = '–ù–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
        }

        absencesData.push({
          userId: user.id,
          type: absenceType.type,
          startDate: startDate.format('YYYY-MM-DD'),
          endDate: endDate.format('YYYY-MM-DD'),
          reason: absenceType.reason,
          status: status,
          approvedBy: approvedBy,
          approvedAt: approvedAt,
          rejectionReason: rejectionReason,
          daysCount: duration
        });
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏
    const createdAbsences = await Absence.bulkCreate(absencesData);
    console.log(`üìù –°–æ–∑–¥–∞–Ω–æ ${createdAbsences.length} –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const stats = {};
    createdAbsences.forEach(absence => {
      stats[absence.type] = (stats[absence.type] || 0) + 1;
    });

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:');
    Object.entries(stats).forEach(([type, count]) => {
      const typeNames = {
        vacation: '–û—Ç–ø—É—Å–∫',
        sick: '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π',
        business_trip: '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞',
        day_off: '–û—Ç–≥—É–ª'
      };
      console.log(`   ${typeNames[type]}: ${count}`);
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = {};
    createdAbsences.forEach(absence => {
      statusStats[absence.status] = (statusStats[absence.status] || 0) + 1;
    });

    console.log('\nüîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    Object.entries(statusStats).forEach(([status, count]) => {
      const statusNames = {
        pending: '–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è',
        approved: '–û–¥–æ–±—Ä–µ–Ω–æ',
        rejected: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
      };
      console.log(`   ${statusNames[status]}: ${count}`);
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    const upcomingAbsences = [];
    for (let i = 0; i < 3; i++) {
      const user = users[i % users.length];
      const startDate = moment().add(i + 1, 'days');
      const endDate = startDate.clone().add(1, 'days');

      upcomingAbsences.push({
        userId: user.id,
        type: 'vacation',
        startDate: startDate.format('YYYY-MM-DD'),
        endDate: endDate.format('YYYY-MM-DD'),
        reason: `–î–µ–º–æ –æ—Ç–ø—É—Å–∫ ${i + 1}`,
        status: 'approved',
        approvedBy: users[0].id,
        approvedAt: new Date(),
        daysCount: 2
      });
    }

    await Absence.bulkCreate(upcomingAbsences);
    console.log(`üóìÔ∏è –°–æ–∑–¥–∞–Ω–æ ${upcomingAbsences.length} –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏`);

    console.log('\n‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüîó –¢–µ—Å—Ç–æ–≤—ã–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log('   GET /api/absences - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫');
    console.log('   GET /api/schedule/month - –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞');
    console.log('   GET /api/schedule/upcoming - –±–ª–∏–∂–∞–π—à–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initializeAbsencesSeed() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await sequelize.authenticate();
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    await sequelize.sync({ alter: true });
    console.log('üîÑ –ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    // –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    await seedAbsences();

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  } finally {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await sequelize.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  initializeAbsencesSeed();
}

module.exports = { seedAbsences }; 