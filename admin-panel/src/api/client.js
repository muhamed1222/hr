import axios from 'axios'
import toast from 'react-hot-toast'

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000/api'

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
})

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => {
    return Promise.reject(error)
  }
)

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
apiClient.interceptors.response.use(
  (response) => {
    return response
  },
  (error) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK' || !error.response) {
      toast.error('‚ùå –°–µ—Ä–≤–µ—Ä API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë—ç–∫–µ–Ω–¥ –Ω–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç.', {
        duration: 6000,
        style: {
          background: '#fef3c7',
          color: '#92400e',
          border: '1px solid #fbbf24'
        }
      })
      console.warn('üîó API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', API_BASE_URL)
    } else if (error.response?.status === 404) {
      toast.error('üîç –≠–Ω–¥–ø–æ–∏–Ω—Ç API –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        duration: 4000,
        style: {
          background: '#fef3c7',
          color: '#92400e'
        }
      })
    } else if (error.response?.status === 401) {
      localStorage.removeItem('token')
      localStorage.removeItem('user')
      window.location.href = '/login'
      toast.error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
    } else if (error.response?.status >= 500) {
      toast.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    } else if (error.response?.data?.message) {
      toast.error(error.response.data.message)
    } else if (error.message) {
      toast.error(error.message)
    } else {
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
    
    return Promise.reject(error)
  }
)

export default apiClient 