import { useSearchParams } from 'react-router-dom'
import { useQuery } from '@tanstack/react-query'
import { Card } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { useTelegramDeepLink } from '@/hooks/useTelegramStartParam'
import { isInsideTelegram, setupMainButton, setupBackButton } from '@/lib/telegram'
import { useEffect, useState } from 'react'

export default function WorkLogs() {
  const [searchParams, setSearchParams] = useSearchParams()
  const filter = searchParams.get('filter') || 'today'
  const [selectedFilter, setSelectedFilter] = useState(filter)
  const { generateLogsLink } = useTelegramDeepLink()

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
  useEffect(() => {
    setSelectedFilter(filter)
  }, [filter])

  const handleFilterChange = (newFilter) => {
    setSelectedFilter(newFilter)
    setSearchParams({ filter: newFilter })
  }

  // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
  const { data: logs, isLoading, error } = useQuery({
    queryKey: ['workLogs', selectedFilter],
    queryFn: async () => {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
      const mockData = {
        today: [
          { id: 1, employeeName: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', startTime: '09:00', endTime: '18:00', hours: 8, description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', date: '2024-01-15' },
          { id: 2, employeeName: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', startTime: '10:00', endTime: '19:00', hours: 8, description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', date: '2024-01-15' }
        ],
        week: [
          { id: 3, employeeName: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', startTime: '09:00', endTime: '18:00', hours: 40, description: '–ù–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', date: '2024-01-09 - 2024-01-15' },
          { id: 4, employeeName: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', startTime: '10:00', endTime: '19:00', hours: 39, description: '–ù–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', date: '2024-01-09 - 2024-01-15' }
        ],
        month: [
          { id: 5, employeeName: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', startTime: '09:00', endTime: '18:00', hours: 160, description: '–ú–µ—Å—è—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞', date: '–Ø–Ω–≤–∞—Ä—å 2024' },
          { id: 6, employeeName: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', startTime: '10:00', endTime: '19:00', hours: 155, description: '–ú–µ—Å—è—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞', date: '–Ø–Ω–≤–∞—Ä—å 2024' }
        ],
        all: [
          { id: 7, employeeName: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', startTime: '09:00', endTime: '18:00', hours: 1600, description: '–í—Å—è —Ä–∞–±–æ—Ç–∞', date: '2023-2024' },
          { id: 8, employeeName: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', startTime: '10:00', endTime: '19:00', hours: 1550, description: '–í—Å—è —Ä–∞–±–æ—Ç–∞', date: '2023-2024' }
        ]
      }
      
      return mockData[selectedFilter] || mockData.today
    }
  })

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram UI
  useEffect(() => {
    if (!isInsideTelegram()) return

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    setupBackButton(() => {
      window.history.back()
    })

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    setupMainButton('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', () => {
      console.log('–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º:', selectedFilter)
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    })

    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.BackButton.hide()
        window.Telegram.WebApp.MainButton.hide()
      }
    }
  }, [selectedFilter])

  const filters = [
    { key: 'today', label: '–°–µ–≥–æ–¥–Ω—è', icon: 'üìÖ' },
    { key: 'week', label: '–ù–µ–¥–µ–ª—è', icon: 'üìä' },
    { key: 'month', label: '–ú–µ—Å—è—Ü', icon: 'üìà' },
    { key: 'all', label: '–í—Å–µ –≤—Ä–µ–º—è', icon: 'üóÇÔ∏è' }
  ]

  const shareLink = generateLogsLink(selectedFilter)

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card className="p-6 text-center">
          <div className="text-red-500 mb-4">
            <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01M12 3a9 9 0 110 18 9 9 0 010-18z" />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p className="text-gray-600 mb-4">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã</p>
          <Button onClick={() => window.location.reload()}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </Card>
      </div>
    )
  }

  const totalHours = logs?.reduce((sum, log) => sum + log.hours, 0) || 0

  return (
    <div className="max-w-6xl mx-auto p-4 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">–õ–æ–≥–∏ —Ä–∞–±–æ—Ç—ã</h1>
          <p className="text-gray-600">
            {filters.find(f => f.key === selectedFilter)?.label || '–í—Å–µ –∑–∞–ø–∏—Å–∏'} ‚Ä¢ 
            –í—Å–µ–≥–æ —á–∞—Å–æ–≤: {totalHours}
          </p>
        </div>
        
        {shareLink && (
          <Button
            variant="outline"
            onClick={() => {
              navigator.clipboard.writeText(shareLink)
              console.log('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:', shareLink)
            }}
          >
            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
          </Button>
        )}
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Card className="p-4">
        <div className="flex flex-wrap gap-2">
          {filters.map((filterItem) => (
            <Button
              key={filterItem.key}
              variant={selectedFilter === filterItem.key ? 'default' : 'outline'}
              onClick={() => handleFilterChange(filterItem.key)}
              className="flex items-center space-x-2"
            >
              <span>{filterItem.icon}</span>
              <span>{filterItem.label}</span>
            </Button>
          ))}
        </div>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4 text-center">
          <div className="text-2xl font-bold text-blue-600">{logs?.length || 0}</div>
          <div className="text-sm text-gray-600">–ó–∞–ø–∏—Å–µ–π</div>
        </Card>
        <Card className="p-4 text-center">
          <div className="text-2xl font-bold text-green-600">{totalHours}</div>
          <div className="text-sm text-gray-600">–ß–∞—Å–æ–≤</div>
        </Card>
        <Card className="p-4 text-center">
          <div className="text-2xl font-bold text-purple-600">
            {logs?.length ? Math.round(totalHours / logs.length * 10) / 10 : 0}
          </div>
          <div className="text-sm text-gray-600">–ß–∞—Å–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º</div>
        </Card>
        <Card className="p-4 text-center">
          <div className="text-2xl font-bold text-orange-600">
            {new Set(logs?.map(log => log.employeeName)).size || 0}
          </div>
          <div className="text-sm text-gray-600">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</div>
        </Card>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ */}
      <Card className="overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">
            –ó–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ ({filters.find(f => f.key === selectedFilter)?.label})
          </h3>
        </div>
        
        {logs && logs.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –°–æ—Ç—Ä—É–¥–Ω–∏–∫
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –î–∞—Ç–∞/–ü–µ—Ä–∏–æ–¥
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –í—Ä–µ–º—è
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –ß–∞—Å—ã
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –û–ø–∏—Å–∞–Ω–∏–µ
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –î–µ–π—Å—Ç–≤–∏—è
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {logs.map((log) => (
                  <tr key={log.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                          <span className="text-blue-600 font-semibold text-sm">
                            {log.employeeName.split(' ').map(n => n[0]).join('')}
                          </span>
                        </div>
                        <div className="text-sm font-medium text-gray-900">
                          {log.employeeName}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {log.date}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {log.startTime && log.endTime && `${log.startTime} - ${log.endTime}`}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                        {log.hours}—á
                      </span>
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-900 max-w-xs truncate">
                      {log.description}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥:', log.id)}
                      >
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="text-center py-8">
            <div className="text-gray-400 mb-4">
              <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</h3>
            <p className="text-gray-600">
              –ó–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "{filters.find(f => f.key === selectedFilter)?.label}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </p>
          </div>
        )}
      </Card>
    </div>
  )
} 