import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '@/store/useAuthStore';
import { useIsTelegram } from '@/hooks/useIsTelegram';
import { useDevModeToggle } from '@/hooks/useDevModeToggle';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { 
  getTelegramUser, 
  setupMainButton, 
  setupBackButton, 
  showTelegramAlert, 
  showTelegramConfirm,
  sendHapticFeedback,
  showTelegramPopup,
  closeTelegramApp,
  isInsideTelegram
} from '@/lib/telegram';
import { 
  Play, 
  AlertCircle, 
  CheckCircle, 
  MessageSquare, 
  Zap, 
  Bell, 
  ExternalLink,
  ArrowLeft,
  TestTube,
  Smartphone,
  Globe
} from 'lucide-react';

/**
 * üß™ TelegramWebAppTesting ‚Äî dev-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebApp —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
export default function TelegramWebAppTesting() {
  const navigate = useNavigate();
  const { user } = useAuthStore();
  const { isTelegram } = useIsTelegram();
  const { isDevMode, isTelegramMode } = useDevModeToggle();
  
  const [testResults, setTestResults] = useState({});
  const [isRunningTests, setIsRunningTests] = useState(false);
  const [logs, setLogs] = useState([]);

  const tgUser = getTelegramUser();

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { timestamp, message, type }]);
  };

  // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
  const clearLogs = () => setLogs([]);

  // –û—Ç–º–µ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
  const markTestResult = (testId, success, message = '') => {
    setTestResults(prev => ({
      ...prev,
      [testId]: { success, message, timestamp: new Date().toLocaleTimeString() }
    }));
    addLog(`${testId}: ${success ? '‚úÖ' : '‚ùå'} ${message}`, success ? 'success' : 'error');
  };

  // –¢–µ—Å—Ç—ã WebApp —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  const tests = [
    {
      id: 'main_button',
      title: 'MainButton —Ç–µ—Å—Ç',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º',
      icon: <Play className="w-5 h-5" />,
      action: () => {
        try {
          setupMainButton('–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! üéâ', () => {
            markTestResult('main_button', true, 'MainButton –Ω–∞–∂–∞—Ç–∞');
            addLog('MainButton callback –≤—ã–∑–≤–∞–Ω', 'success');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
              if (window.Telegram?.WebApp?.MainButton) {
                window.Telegram.WebApp.MainButton.hide();
                addLog('MainButton —Å–∫—Ä—ã—Ç–∞', 'info');
              }
            }, 2000);
          });
          addLog('MainButton –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', 'info');
        } catch (error) {
          markTestResult('main_button', false, error.message);
        }
      }
    },
    {
      id: 'back_button',
      title: 'BackButton —Ç–µ—Å—Ç',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ',
      icon: <ArrowLeft className="w-5 h-5" />,
      action: () => {
        try {
          setupBackButton(() => {
            markTestResult('back_button', true, 'BackButton –Ω–∞–∂–∞—Ç–∞');
            addLog('BackButton callback –≤—ã–∑–≤–∞–Ω', 'success');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (window.Telegram?.WebApp?.BackButton) {
              window.Telegram.WebApp.BackButton.hide();
              addLog('BackButton —Å–∫—Ä—ã—Ç–∞', 'info');
            }
          });
          addLog('BackButton –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', 'info');
        } catch (error) {
          markTestResult('back_button', false, error.message);
        }
      }
    },
    {
      id: 'alert',
      title: 'Alert —Ç–µ—Å—Ç',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram',
      icon: <AlertCircle className="w-5 h-5" />,
      action: () => {
        try {
          showTelegramAlert('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ!\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ WebApp.', () => {
            markTestResult('alert', true, 'Alert –ø–æ–∫–∞–∑–∞–Ω –∏ –∑–∞–∫—Ä—ã—Ç');
            addLog('Alert callback –≤—ã–∑–≤–∞–Ω', 'success');
          });
          addLog('Alert –≤—ã–∑–≤–∞–Ω', 'info');
        } catch (error) {
          markTestResult('alert', false, error.message);
        }
      }
    },
    {
      id: 'confirm',
      title: 'Confirm —Ç–µ—Å—Ç',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      icon: <CheckCircle className="w-5 h-5" />,
      action: () => {
        try {
          showTelegramConfirm('ü§î –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ?', (confirmed) => {
            const result = confirmed ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–æ—Ç–º–µ–Ω–µ–Ω–æ';
            markTestResult('confirm', true, `–î–µ–π—Å—Ç–≤–∏–µ ${result}`);
            addLog(`Confirm ${result}`, confirmed ? 'success' : 'warning');
          });
          addLog('Confirm –≤—ã–∑–≤–∞–Ω', 'info');
        } catch (error) {
          markTestResult('confirm', false, error.message);
        }
      }
    },
    {
      id: 'haptic',
      title: 'Haptic —Ç–µ—Å—Ç',
      description: '–¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (–≤–∏–±—Ä–∞—Ü–∏—è)',
      icon: <Zap className="w-5 h-5" />,
      action: () => {
        try {
          // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–±—Ä–∞—Ü–∏–∏
          sendHapticFeedback('impact', 'light');
          setTimeout(() => sendHapticFeedback('impact', 'medium'), 200);
          setTimeout(() => sendHapticFeedback('impact', 'heavy'), 400);
          setTimeout(() => sendHapticFeedback('notification', 'success'), 600);
          
          markTestResult('haptic', true, 'Haptic feedback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
          addLog('Haptic sequence –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
        } catch (error) {
          markTestResult('haptic', false, error.message);
        }
      }
    },
    {
      id: 'deeplink_profile',
      title: 'Deep Link: –ü—Ä–æ—Ñ–∏–ª—å',
      description: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ deep link',
      icon: <ExternalLink className="w-5 h-5" />,
      action: () => {
        try {
          const employeeId = '123';
          const url = `/employee/${employeeId}?action=view&from=test`;
          navigate(url);
          markTestResult('deeplink_profile', true, `–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ${url}`);
          addLog(`Deep link –≤—ã–ø–æ–ª–Ω–µ–Ω: ${url}`, 'success');
        } catch (error) {
          markTestResult('deeplink_profile', false, error.message);
        }
      }
    },
    {
      id: 'deeplink_logs',
      title: 'Deep Link: –õ–æ–≥–∏',
      description: '–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã',
      icon: <ExternalLink className="w-5 h-5" />,
      action: () => {
        try {
          const url = `/logs?user=${user?.id}&date=${new Date().toISOString().split('T')[0]}`;
          navigate(url);
          markTestResult('deeplink_logs', true, `–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ${url}`);
          addLog(`Deep link –≤—ã–ø–æ–ª–Ω–µ–Ω: ${url}`, 'success');
        } catch (error) {
          markTestResult('deeplink_logs', false, error.message);
        }
      }
    },
    {
      id: 'test_report',
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç',
      description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å mock-–æ—Ç—á—ë—Ç —á–µ—Ä–µ–∑ WebApp',
      icon: <MessageSquare className="w-5 h-5" />,
      action: async () => {
        try {
          const reportData = {
            description: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –∏–∑ WebApp Testing',
            hours: 8,
            project: 'Test Project',
            date: new Date().toISOString().split('T')[0],
            tags: ['testing', 'webapp']
          };

          addLog('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞...', 'info');
          
          // –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
          await new Promise(resolve => setTimeout(resolve, 1500));
          
          markTestResult('test_report', true, '–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
          addLog(`–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: ${reportData.description}`, 'success');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —á–µ—Ä–µ–∑ Telegram
          if (isTelegram) {
            showTelegramAlert('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
          }
        } catch (error) {
          markTestResult('test_report', false, error.message);
        }
      }
    },
    {
      id: 'push_notification',
      title: 'Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      description: '–°–∏–º—É–ª—è—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      icon: <Bell className="w-5 h-5" />,
      action: () => {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é showTelegramPopup
          showTelegramPopup({
            title: 'üîî Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            message: '–≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram WebApp\n\n–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
            buttons: [
              { id: 'ok', type: 'ok', text: '–ü–æ–Ω—è—Ç–Ω–æ' },
              { id: 'cancel', type: 'cancel' }
            ]
          }, (buttonId) => {
            if (buttonId === 'ok') {
              markTestResult('push_notification', true, 'Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
              addLog('Push notification: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü–æ–Ω—è—Ç–Ω–æ"', 'success');
            } else {
              markTestResult('push_notification', true, 'Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
              addLog('Push notification: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"', 'warning');
            }
          });
          addLog('Push notification –∑–∞–ø—É—â–µ–Ω', 'info');
        } catch (error) {
          markTestResult('push_notification', false, error.message);
        }
      }
    },
    {
      id: 'close_app',
      title: '–ó–∞–∫—Ä—ã—Ç—å WebApp',
      description: '–ó–∞–∫—Ä—ã—Ç—å WebApp (–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)',
      icon: <ExternalLink className="w-5 h-5" />,
      action: () => {
        try {
          showTelegramConfirm('‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç—å WebApp?\n\n–≠—Ç–æ –∑–∞–∫—Ä–æ–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram.', (confirmed) => {
            if (confirmed) {
              markTestResult('close_app', true, 'WebApp –∑–∞–∫—Ä—ã—Ç');
              addLog('WebApp –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç', 'warning');
              setTimeout(() => {
                closeTelegramApp();
              }, 1000);
            } else {
              markTestResult('close_app', true, '–ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
              addLog('–ó–∞–∫—Ä—ã—Ç–∏–µ WebApp –æ—Ç–º–µ–Ω–µ–Ω–æ', 'info');
            }
          });
        } catch (error) {
          markTestResult('close_app', false, error.message);
        }
      }
    }
  ];

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  const runAllTests = async () => {
    setIsRunningTests(true);
    clearLogs();
    addLog('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...', 'info');

    for (const test of tests.slice(0, -1)) { // –ò—Å–∫–ª—é—á–∞–µ–º "–∑–∞–∫—Ä—ã—Ç—å app"
      try {
        addLog(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${test.title}`, 'info');
        await test.action();
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      } catch (error) {
        addLog(`–û—à–∏–±–∫–∞ –≤ ${test.title}: ${error.message}`, 'error');
      }
    }

    setIsRunningTests(false);
    addLog('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã', 'success');
  };

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ BackButton –¥–ª—è –≤—ã—Ö–æ–¥–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (isTelegram) {
      setupBackButton(() => {
        navigate('/settings');
      });

      return () => {
        if (window.Telegram?.WebApp?.BackButton) {
          window.Telegram.WebApp.BackButton.hide();
        }
      };
    }
  }, [isTelegram, navigate]);

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center">
          <div className="flex items-center justify-center space-x-3 mb-4">
            <div className="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center">
              <TestTube className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram WebApp
              </h1>
              <p className="text-gray-600">
                –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ 1 –∫–ª–∏–∫
              </p>
            </div>
          </div>

          {/* –°—Ç–∞—Ç—É—Å —Å—Ä–µ–¥—ã */}
          <div className="flex items-center justify-center space-x-4 mb-6">
            <div className={`flex items-center space-x-2 px-3 py-1 rounded-full text-sm font-medium ${
              isTelegram ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
            }`}>
              {isTelegram ? <Smartphone className="w-4 h-4" /> : <Globe className="w-4 h-4" />}
              <span>{isTelegram ? 'Telegram WebApp' : '–ë—Ä–∞—É–∑–µ—Ä'}</span>
            </div>

            {isDevMode && (
              <div className="flex items-center space-x-2 px-3 py-1 bg-gray-800 text-white rounded-full text-sm font-medium">
                <span>üîß</span>
                <span>Dev Mode</span>
              </div>
            )}

            {isTelegramMode && (
              <div className="flex items-center space-x-2 px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm font-medium">
                <span>üé≠</span>
                <span>Mock –∞–∫—Ç–∏–≤–µ–Ω</span>
              </div>
            )}
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex items-center justify-center space-x-4">
            <Button
              onClick={runAllTests}
              disabled={isRunningTests}
              className="flex items-center space-x-2"
            >
              <Play className="w-4 h-4" />
              <span>{isRunningTests ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã'}</span>
            </Button>

            <Button variant="outline" onClick={clearLogs}>
              –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
            </Button>

            <Button variant="outline" onClick={() => navigate('/settings')}>
              <ArrowLeft className="w-4 h-4 mr-2" />
              –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            </Button>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ WebApp */}
        {(tgUser || user) && (
          <Card className="p-4">
            <h3 className="text-lg font-semibold mb-3">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              {tgUser && (
                <>
                  <div>
                    <span className="text-gray-500">Telegram ID:</span>
                    <span className="ml-2 font-mono">{tgUser.id}</span>
                  </div>
                  <div>
                    <span className="text-gray-500">–ò–º—è:</span>
                    <span className="ml-2">{tgUser.first_name} {tgUser.last_name}</span>
                  </div>
                  <div>
                    <span className="text-gray-500">Username:</span>
                    <span className="ml-2">@{tgUser.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                  <div>
                    <span className="text-gray-500">–Ø–∑—ã–∫:</span>
                    <span className="ml-2">{tgUser.language_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                </>
              )}
              <div>
                <span className="text-gray-500">–†–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ:</span>
                <span className="ml-2">{user?.role || '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</span>
              </div>
              <div>
                <span className="text-gray-500">WebApp –≤–µ—Ä—Å–∏—è:</span>
                <span className="ml-2">{window.Telegram?.WebApp?.version || 'N/A'}</span>
              </div>
            </div>
          </Card>
        )}

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ initData (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ) */}
        {isDevMode && window.Telegram?.WebApp?.initData && (
          <Card className="p-4">
            <div className="flex items-center space-x-2 mb-3">
              <div className="w-6 h-6 bg-purple-600 rounded flex items-center justify-center">
                <span className="text-white text-xs">üîê</span>
              </div>
              <h3 className="text-lg font-semibold">initData —Å –ø–æ–¥–ø–∏—Å—å—é (DEV)</h3>
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-500">–î–ª–∏–Ω–∞ initData:</span>
                <span className="ml-2 font-mono">{window.Telegram.WebApp.initData.length} —Å–∏–º–≤–æ–ª–æ–≤</span>
              </div>
              
              <div>
                <span className="text-gray-500">–í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</span>
                <span className="ml-2">
                  {new Date(window.Telegram.WebApp.initDataUnsafe.auth_date * 1000).toLocaleString()}
                </span>
              </div>
              
              <div className="lg:col-span-2">
                <span className="text-gray-500">Hash –ø–æ–¥–ø–∏—Å–∏:</span>
                <div className="mt-1 p-2 bg-gray-100 rounded font-mono text-xs break-all">
                  {window.Telegram.WebApp.initDataUnsafe.hash}
                </div>
              </div>
              
              <div className="lg:col-span-2">
                <span className="text-gray-500">–ü–æ–ª–Ω—ã–π initData:</span>
                <div className="mt-1 p-2 bg-gray-100 rounded font-mono text-xs break-all max-h-32 overflow-y-auto">
                  {window.Telegram.WebApp.initData}
                </div>
              </div>
            </div>
            
            <div className="mt-4 flex items-center space-x-2 p-3 bg-green-50 rounded">
              <span className="text-green-600">‚úÖ</span>
              <span className="text-green-800 text-sm">
                initData —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å—é –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É Telegram
              </span>
            </div>
          </Card>
        )}

        {/* –¢–µ—Å—Ç—ã */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {tests.map(test => {
            const result = testResults[test.id];
            return (
              <Card key={test.id} className="p-4">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center space-x-2">
                    {test.icon}
                    <h3 className="font-semibold">{test.title}</h3>
                  </div>
                  {result && (
                    <div className={`w-3 h-3 rounded-full ${
                      result.success ? 'bg-green-500' : 'bg-red-500'
                    }`} />
                  )}
                </div>

                <p className="text-sm text-gray-600 mb-4">{test.description}</p>

                <Button
                  onClick={test.action}
                  disabled={isRunningTests}
                  size="sm"
                  className="w-full"
                >
                  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
                </Button>

                {result && (
                  <div className="mt-3 p-2 bg-gray-50 rounded text-xs">
                    <div className={`font-medium ${
                      result.success ? 'text-green-700' : 'text-red-700'
                    }`}>
                      {result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}
                    </div>
                    {result.message && (
                      <div className="text-gray-600 mt-1">{result.message}</div>
                    )}
                    <div className="text-gray-500 mt-1">{result.timestamp}</div>
                  </div>
                )}
              </Card>
            );
          })}
        </div>

        {/* –õ–æ–≥–∏ */}
        {logs.length > 0 && (
          <Card className="p-4">
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-lg font-semibold">–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
              <Button variant="outline" size="sm" onClick={clearLogs}>
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            </div>
            
            <div className="max-h-60 overflow-y-auto space-y-1">
              {logs.map((log, index) => (
                <div
                  key={index}
                  className={`flex items-start space-x-2 text-sm p-2 rounded ${
                    log.type === 'success' ? 'bg-green-50 text-green-800' :
                    log.type === 'error' ? 'bg-red-50 text-red-800' :
                    log.type === 'warning' ? 'bg-yellow-50 text-yellow-800' :
                    'bg-gray-50 text-gray-800'
                  }`}
                >
                  <span className="text-gray-500 font-mono text-xs">{log.timestamp}</span>
                  <span className="flex-1">{log.message}</span>
                </div>
              ))}
            </div>
          </Card>
        )}

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ */}
        {!isTelegram && (
          <Card className="p-4 bg-yellow-50 border-yellow-200">
            <div className="flex items-start space-x-3">
              <AlertCircle className="w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5" />
              <div>
                <h4 className="font-semibold text-yellow-800">–†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞</h4>
                <p className="text-sm text-yellow-700 mt-1">
                  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ. 
                  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram WebApp.
                </p>
              </div>
            </div>
          </Card>
        )}
      </div>
    </div>
  );
} 