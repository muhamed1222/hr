import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { Button } from '@/components/ui/Button'
import { useTelegramAuth } from '@/auth/useTelegramAuth'
import { useAuthStore } from '@/store/useAuthStore'
import { isInsideTelegram, getTelegramUser } from '@/lib/telegram'
import { Loader2, AlertCircle, CheckCircle, ExternalLink } from 'lucide-react'
import toast from 'react-hot-toast'

export default function LoginTelegram() {
  const navigate = useNavigate()
  const { isAuthenticated } = useAuthStore()
  const {
    isLoading,
    error,
    loginWithTelegram,
    checkTelegramStatus,
    canUseTelegramAuth,
    getTelegramUserData,
    clearError
  } = useTelegramAuth()

  const [telegramStatus, setTelegramStatus] = useState(null)
  const [autoLoginAttempted, setAutoLoginAttempted] = useState(false)

  const isTelegram = canUseTelegramAuth()
  const tgUser = getTelegramUserData()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Telegram –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkStatus = async () => {
      const status = await checkTelegramStatus()
      setTelegramStatus(status)
    }
    checkStatus()
  }, [checkTelegramStatus])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤ Telegram
  useEffect(() => {
    if (isTelegram && !autoLoginAttempted && !isAuthenticated && telegramStatus?.enabled) {
      setAutoLoginAttempted(true)
      handleTelegramLogin()
    }
  }, [isTelegram, autoLoginAttempted, isAuthenticated, telegramStatus])

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/')
    }
  }, [isAuthenticated, navigate])

  const handleTelegramLogin = async () => {
    try {
      clearError()
      await loginWithTelegram()
      toast.success('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram!')
    } catch (error) {
      toast.error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram')
    }
  }

  const handleRegularLogin = () => {
    navigate('/login')
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—Ö–æ–¥–µ
  if (isTelegram && !autoLoginAttempted) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="max-w-md w-full space-y-8 p-8">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
              –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
            </h2>
            <p className="mt-2 text-sm text-gray-600">
              –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram...
            </p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-8 p-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center">
          <div className="mx-auto h-12 w-12 bg-blue-600 rounded-full flex items-center justify-center">
            <span className="text-2xl text-white">üöÄ</span>
          </div>
          <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
            Outcast TimeBot
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
          </p>
        </div>

        {/* –°—Ç–∞—Ç—É—Å Telegram */}
        {isTelegram ? (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex">
              <CheckCircle className="h-5 w-5 text-green-400" />
              <div className="ml-3">
                <h3 className="text-sm font-medium text-green-800">
                  –ó–∞–ø—É—â–µ–Ω–æ –≤ Telegram
                </h3>
                <p className="text-sm text-green-700 mt-1">
                  –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –±–µ–∑ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Telegram WebApp
                </p>
              </div>
            </div>
          </div>
        ) : (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex">
              <AlertCircle className="h-5 w-5 text-yellow-400" />
              <div className="ml-3">
                <h3 className="text-sm font-medium text-yellow-800">
                  –ó–∞–ø—É—â–µ–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                </h3>
                <p className="text-sm text-yellow-700 mt-1">
                  –î–ª—è –≤—Ö–æ–¥–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
                </p>
              </div>
            </div>
          </div>
        )}

        {/* –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram */}
        {tgUser && (
          <div className="bg-white shadow rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-900 mb-3">
              –î–∞–Ω–Ω—ã–µ Telegram
            </h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-500">–ò–º—è:</span>
                <span className="text-gray-900">{tgUser.firstName} {tgUser.lastName}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Username:</span>
                <span className="text-gray-900">@{tgUser.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">ID:</span>
                <span className="text-gray-900">{tgUser.id}</span>
              </div>
            </div>
          </div>
        )}

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex">
              <AlertCircle className="h-5 w-5 text-red-400" />
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                </h3>
                <p className="text-sm text-red-700 mt-1">
                  {error}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ */}
        <div className="space-y-4">
          {isTelegram && telegramStatus?.enabled ? (
            <Button
              onClick={handleTelegramLogin}
              disabled={isLoading}
              className="w-full bg-blue-600 hover:bg-blue-700"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram...
                </>
              ) : (
                <>
                  <span className="mr-2">üì±</span>
                  –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram
                </>
              )}
            </Button>
          ) : (
            <div className="space-y-3">
              <Button
                onClick={handleRegularLogin}
                className="w-full"
              >
                –û–±—ã—á–Ω—ã–π –≤—Ö–æ–¥ (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)
              </Button>
              
              {!telegramStatus?.enabled && (
                <p className="text-xs text-gray-500 text-center">
                  Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                </p>
              )}
            </div>
          )}
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="text-center">
          <p className="text-xs text-gray-500">
            {isTelegram ? (
              '–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram WebApp –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—è'
            ) : (
              <>
                –î–ª—è –≤—Ö–æ–¥–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è –æ—Ç–∫—Ä–æ–π—Ç–µ{' '}
                <button
                  onClick={() => window.open('https://t.me/your_bot', '_blank')}
                  className="text-blue-600 hover:text-blue-500 inline-flex items-center"
                >
                  Telegram –±–æ—Ç–∞
                  <ExternalLink className="ml-1 h-3 w-3" />
                </button>
              </>
            )}
          </p>
        </div>

        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
        {telegramStatus && (
          <div className="text-center text-xs text-gray-400">
            Telegram auth: {telegramStatus.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
            {telegramStatus.configured && ' | ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω'}
          </div>
        )}
      </div>
    </div>
  )
} 