/**
 * ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–º—É–ª—è—Ç–æ—Ä Telegram WebApp API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ –µ—Å–ª–∏ window.Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
 */

/**
 * üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è initData —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram WebApp
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HMAC-SHA256 –ø–æ–¥–ø–∏—Å–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è dev)
async function createHmacSha256(key, data) {
  const encoder = new TextEncoder();
  const keyData = encoder.encode(key);
  const messageData = encoder.encode(data);
  
  const cryptoKey = await crypto.subtle.importKey(
    'raw', keyData, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign']
  );
  
  const signature = await crypto.subtle.sign('HMAC', cryptoKey, messageData);
  return Array.from(new Uint8Array(signature))
    .map(b => b.toString(16).padStart(2, '0'))
    .join('');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è initData –¥–ª—è mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function generateInitData(user) {
  const BOT_TOKEN = 'mock_bot_token_' + Date.now(); // Mock —Ç–æ–∫–µ–Ω –¥–ª—è dev
  const auth_date = Math.floor(Date.now() / 1000);
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram)
  const dataCheckString = [
    `auth_date=${auth_date}`,
    `user=${JSON.stringify({
      id: user.id,
      first_name: user.first_name,
      last_name: user.last_name,
      username: user.username,
      language_code: 'ru',
      is_premium: false,
      allows_write_to_pm: true
    })}`
  ].sort().join('\n');
  
  // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ (–∫–∞–∫ –≤ Telegram API)
  const secretKey = await createHmacSha256('WebAppData', BOT_TOKEN);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
  const hash = await createHmacSha256(secretKey, dataCheckString);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º finitive initData —Å—Ç—Ä–æ–∫—É
  const initData = [
    `auth_date=${auth_date}`,
    `hash=${hash}`,
    `user=${encodeURIComponent(JSON.stringify({
      id: user.id,
      first_name: user.first_name,
      last_name: user.last_name,
      username: user.username,
      language_code: 'ru',
      is_premium: false,
      allows_write_to_pm: true
    }))}`
  ].join('&');
  
  console.log('üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã initData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
    user_id: user.id,
    username: user.username,
    auth_date,
    hash: hash.substring(0, 8) + '...',
    initData_length: initData.length
  });
  
  return {
    initData,
    initDataUnsafe: {
      user: {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        username: user.username,
        language_code: 'ru',
        is_premium: false,
        allows_write_to_pm: true
      },
      auth_date,
      hash
    },
    bot_token: BOT_TOKEN // –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ dev —Ä–µ–∂–∏–º–µ
  };
}

// –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const MOCK_USERS = [
  {
    id: 782245481,
    first_name: '–ú—É—Ö–∞–º–µ–¥',
    last_name: '–ö–µ–ª–µ–º–µ—Ç–æ–≤', 
    username: 'mukhamed_dev',
    role: 'employee'
  },
  {
    id: 123456789,
    first_name: '–ê–Ω–Ω–∞',
    last_name: '–ê–¥–º–∏–Ω–æ–≤–∞',
    username: 'anna_admin',
    role: 'admin'
  },
  {
    id: 987654321,
    first_name: '–ü–µ—Ç—Ä',
    last_name: '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤',
    username: 'petr_manager',
    role: 'manager'
  }
];

// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É URL
function getMockUser() {
  const urlParams = new URLSearchParams(window.location.search);
  const mockRole = urlParams.get('mock_role');
  const mockUserId = urlParams.get('mock_user');
  
  if (mockUserId) {
    const userId = parseInt(mockUserId);
    return MOCK_USERS.find(u => u.id === userId) || MOCK_USERS[0];
  }
  
  if (mockRole) {
    return MOCK_USERS.find(u => u.role === mockRole) || MOCK_USERS[0];
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
  return MOCK_USERS[0];
}

// –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ Telegram
function createMockUI() {
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
  const existing = document.getElementById('telegram-mock-ui');
  if (existing) existing.remove();

  const mockUI = document.createElement('div');
  mockUI.id = 'telegram-mock-ui';
  mockUI.style.cssText = `
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    z-index: 10000;
    border-top: 1px solid rgba(255,255,255,0.2);
    box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
    backdrop-filter: blur(10px);
  `;

  const container = document.createElement('div');
  container.style.cssText = `
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 8px 16px;
    max-width: 600px;
    margin: 0 auto;
  `;

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞
  const title = document.createElement('div');
  title.style.cssText = `
    font-size: 12px;
    opacity: 0.8;
    font-weight: 500;
  `;
  title.textContent = 'ü§ñ Telegram Mock (DEV)';

  // BackButton
  const backButton = document.createElement('button');
  backButton.id = 'mock-back-button';
  backButton.style.cssText = `
    background: rgba(255,255,255,0.2);
    border: 1px solid rgba(255,255,255,0.3);
    color: white;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 12px;
    cursor: pointer;
    display: none;
    transition: all 0.2s ease;
  `;
  backButton.textContent = '‚Üê –ù–∞–∑–∞–¥';
  backButton.onclick = () => {
    console.log('üîô Mock BackButton clicked');
    if (window.Telegram?.WebApp?.BackButton?._clickHandler) {
      window.Telegram.WebApp.BackButton._clickHandler();
    }
  };

  // MainButton
  const mainButton = document.createElement('button');
  mainButton.id = 'mock-main-button';
  mainButton.style.cssText = `
    background: #007AFF;
    border: none;
    color: white;
    padding: 8px 16px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    display: none;
    transition: all 0.2s ease;
    min-width: 120px;
  `;
  mainButton.textContent = '–î–µ–π—Å—Ç–≤–∏–µ';
  mainButton.onclick = () => {
    console.log('üîò Mock MainButton clicked');
    // –¢–∞–∫—Ç–∏–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
    document.body.style.transform = 'scale(0.98)';
    setTimeout(() => document.body.style.transform = '', 100);
    
    if (window.Telegram?.WebApp?.MainButton?._clickHandler) {
      window.Telegram.WebApp.MainButton._clickHandler();
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userSwitcher = document.createElement('select');
  userSwitcher.style.cssText = `
    background: rgba(255,255,255,0.2);
    border: 1px solid rgba(255,255,255,0.3);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 11px;
    cursor: pointer;
  `;
  
  MOCK_USERS.forEach(user => {
    const option = document.createElement('option');
    option.value = user.id;
    option.textContent = `${user.first_name} (${user.role})`;
    option.style.color = 'black';
    userSwitcher.appendChild(option);
  });

  const currentUser = getMockUser();
  userSwitcher.value = currentUser.id;
  
  userSwitcher.onchange = () => {
    const newUrl = new URL(window.location);
    newUrl.searchParams.set('mock_user', userSwitcher.value);
    window.location.href = newUrl.toString();
  };

  container.appendChild(title);
  container.appendChild(userSwitcher);
  container.appendChild(backButton);
  container.appendChild(mainButton);
  mockUI.appendChild(container);
  document.body.appendChild(mockUI);

  return { backButton, mainButton };
}

// –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä Telegram WebApp API
export async function initTelegramMock() {
  if (window.Telegram) {
    console.log('üîç Telegram WebApp —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç–º—É–ª—è—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    return;
  }

  console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mock –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');

  const mockUser = getMockUser();
  const { backButton, mainButton } = createMockUI();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ initData —Å –ø–æ–¥–ø–∏—Å—å—é
  const initDataResult = await generateInitData(mockUser);
  
  // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  console.group('üîê –î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram Mock');
  console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', mockUser);
  console.log('üìù initData –¥–ª–∏–Ω–∞:', initDataResult.initData.length, '—Å–∏–º–≤–æ–ª–æ–≤');
  console.log('üîë –ü–æ–¥–ø–∏—Å—å (hash):', initDataResult.initDataUnsafe.hash.substring(0, 16) + '...');
  console.log('‚è∞ –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', new Date(initDataResult.initDataUnsafe.auth_date * 1000).toLocaleString());
  console.log('ü§ñ Bot Token (mock):', initDataResult.bot_token.substring(0, 20) + '...');
  console.groupEnd();

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π API —ç–º—É–ª—è—Ç–æ—Ä
  window.Telegram = {
    WebApp: {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
      initData: initDataResult.initData,
      initDataUnsafe: initDataResult.initDataUnsafe,

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ
      version: '7.0',
      platform: 'web',
      colorScheme: 'light',
      themeParams: {
        bg_color: '#ffffff',
        text_color: '#000000',
        hint_color: '#999999',
        link_color: '#007AFF',
        button_color: '#007AFF',
        button_text_color: '#ffffff'
      },

      // –†–∞–∑–º–µ—Ä—ã viewport
      viewportHeight: window.innerHeight,
      viewportStableHeight: window.innerHeight - 150,
      isExpanded: true,

      // –ú–µ—Ç–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      ready() {
        console.log('üì± Mock WebApp ready');
        setTimeout(() => {
          if (this.onEvent) {
            this.onEvent('viewportChanged', {
              isStateStable: true
            });
          }
        }, 100);
      },

      expand() {
        console.log('üìè Mock WebApp expanded');
        this.isExpanded = true;
      },

      close() {
        console.log('‚ùå Mock WebApp closed');
        window.location.href = 'about:blank';
      },

      // MainButton —ç–º—É–ª—è—Ü–∏—è
      MainButton: {
        text: '',
        color: '#007AFF',
        textColor: '#ffffff',
        isVisible: false,
        isActive: true,
        isProgressVisible: false,
        _clickHandler: null,

        setText(text) {
          console.log('üîò MainButton setText:', text);
          this.text = text;
          mainButton.textContent = text;
          return this;
        },

        show() {
          console.log('üëÅÔ∏è MainButton show');
          this.isVisible = true;
          mainButton.style.display = 'block';
          return this;
        },

        hide() {
          console.log('üôà MainButton hide');
          this.isVisible = false;
          mainButton.style.display = 'none';
          return this;
        },

        enable() {
          console.log('‚úÖ MainButton enable');
          this.isActive = true;
          mainButton.disabled = false;
          mainButton.style.opacity = '1';
          return this;
        },

        disable() {
          console.log('‚ùå MainButton disable');
          this.isActive = false;
          mainButton.disabled = true;
          mainButton.style.opacity = '0.5';
          return this;
        },

        showProgress(leaveActive = false) {
          console.log('‚è≥ MainButton showProgress');
          this.isProgressVisible = true;
          mainButton.textContent = '‚è≥ ' + this.text;
          if (!leaveActive) this.disable();
          return this;
        },

        hideProgress() {
          console.log('‚ú® MainButton hideProgress');
          this.isProgressVisible = false;
          mainButton.textContent = this.text;
          this.enable();
          return this;
        },

        setParams(params) {
          console.log('‚öôÔ∏è MainButton setParams:', params);
          if (params.text) this.setText(params.text);
          if (params.color) {
            this.color = params.color;
            mainButton.style.backgroundColor = params.color;
          }
          if (params.text_color) {
            this.textColor = params.text_color;
            mainButton.style.color = params.text_color;
          }
          if (params.is_active !== undefined) {
            params.is_active ? this.enable() : this.disable();
          }
          if (params.is_visible !== undefined) {
            params.is_visible ? this.show() : this.hide();
          }
          return this;
        },

        onClick(callback) {
          console.log('üéØ MainButton onClick handler set');
          this._clickHandler = callback;
          return this;
        },

        offClick(callback) {
          console.log('üö´ MainButton onClick handler removed');
          this._clickHandler = null;
          return this;
        }
      },

      // BackButton —ç–º—É–ª—è—Ü–∏—è
      BackButton: {
        isVisible: false,
        _clickHandler: null,

        show() {
          console.log('üëÅÔ∏è BackButton show');
          this.isVisible = true;
          backButton.style.display = 'block';
          return this;
        },

        hide() {
          console.log('üôà BackButton hide');
          this.isVisible = false;
          backButton.style.display = 'none';
          return this;
        },

        onClick(callback) {
          console.log('üéØ BackButton onClick handler set');
          this._clickHandler = callback;
          return this;
        },

        offClick(callback) {
          console.log('üö´ BackButton onClick handler removed');
          this._clickHandler = null;
          return this;
        }
      },

      // HapticFeedback —ç–º—É–ª—è—Ü–∏—è
      HapticFeedback: {
        impactOccurred(style = 'medium') {
          console.log('üì≥ HapticFeedback:', style);
          
          // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
          const intensity = {
            light: { scale: 0.995, duration: 50 },
            medium: { scale: 0.99, duration: 100 },
            heavy: { scale: 0.985, duration: 150 }
          };

          const effect = intensity[style] || intensity.medium;
          
          document.body.style.transform = `scale(${effect.scale})`;
          document.body.style.transition = 'transform 0.1s ease';
          
          setTimeout(() => {
            document.body.style.transform = '';
            setTimeout(() => {
              document.body.style.transition = '';
            }, 100);
          }, effect.duration);

          return this;
        },

        notificationOccurred(type = 'success') {
          console.log('üîî Notification HapticFeedback:', type);
          this.impactOccurred(type === 'error' ? 'heavy' : 'light');
          return this;
        },

        selectionChanged() {
          console.log('üéØ Selection HapticFeedback');
          this.impactOccurred('light');
          return this;
        }
      },

      // –î–∏–∞–ª–æ–≥–∏
      showAlert(message, callback) {
        console.log('üö® Telegram Alert:', message);
        setTimeout(() => {
          alert(message);
          if (callback) callback();
        }, 100);
      },

      showConfirm(message, callback) {
        console.log('‚ùì Telegram Confirm:', message);
        setTimeout(() => {
          const result = confirm(message);
          if (callback) callback(result);
        }, 100);
      },

      showPopup(params, callback) {
        console.log('üí¨ Telegram Popup:', params);
        const message = params.message || '';
        const buttons = params.buttons || [{ type: 'ok', text: 'OK' }];
        
        setTimeout(() => {
          const result = confirm(message);
          if (callback) {
            callback(result ? 'ok' : 'cancel');
          }
        }, 100);
      },

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
      setHeaderColor(color) {
        if (!this.isVersionAtLeast('6.1')) {
          console.warn('[Telegram.WebApp] Header color is not supported in version', this.version);
          return this;
        }
        console.log('üé® Header color:', color);
        document.documentElement.style.setProperty('--tg-theme-header-bg-color', color);
        return this;
      },

      setBackgroundColor(color) {
        if (!this.isVersionAtLeast('6.1')) {
          console.warn('[Telegram.WebApp] Background color is not supported in version', this.version);
          return this;
        }
        console.log('üé® Background color:', color);
        document.documentElement.style.setProperty('--tg-theme-bg-color', color);
        return this;
      },

      // –°–æ–±—ã—Ç–∏—è
      onEvent(eventType, callback) {
        console.log('üì° Event listener added:', eventType);
        // –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
        if (eventType === 'viewportChanged') {
          window.addEventListener('resize', () => {
            callback({
              isStateStable: true,
              height: window.innerHeight
            });
          });
        }
      },

      offEvent(eventType, callback) {
        console.log('üì° Event listener removed:', eventType);
      },

      // –£—Ç–∏–ª–∏—Ç—ã
      isVersionAtLeast(version) {
        const current = this.version.split('.').map(Number);
        const required = version.split('.').map(Number);
        
        for (let i = 0; i < Math.max(current.length, required.length); i++) {
          const c = current[i] || 0;
          const r = required[i] || 0;
          if (c > r) return true;
          if (c < r) return false;
        }
        return true;
      },

      sendData(data) {
        console.log('üì§ Mock sendData:', data);
        alert('Mock: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ' + data);
      }
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  setTimeout(() => {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();
  }, 100);

  console.log('‚úÖ Telegram Mock –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', mockUser);
  console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ?mock_role=admin|manager|employee –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏');
} 