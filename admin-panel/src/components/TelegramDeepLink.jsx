import { useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuthStore } from '../store/useAuthStore';
import { useTelegramStartParam } from '../hooks/useTelegramStartParam';
import { useTelegramAuth } from '../auth/useTelegramAuth';

const TelegramDeepLink = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { login } = useAuthStore();
  const startParam = useTelegramStartParam();
  const { initDataUnsafe, webApp } = useTelegramAuth();
  const [isProcessing, setIsProcessing] = useState(false);
  const [deepLinkProcessed, setDeepLinkProcessed] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const handleTelegramAuth = async () => {
      if (!initDataUnsafe?.user || isProcessing) return;

      setIsProcessing(true);
      
      try {
        const telegramData = {
          id: initDataUnsafe.user.id,
          first_name: initDataUnsafe.user.first_name,
          last_name: initDataUnsafe.user.last_name,
          username: initDataUnsafe.user.username,
          language_code: initDataUnsafe.user.language_code,
          hash: initDataUnsafe.hash,
          auth_date: initDataUnsafe.auth_date
        };

        const response = await fetch(`${import.meta.env.VITE_API_URL}/auth/telegram`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(telegramData),
        });

        if (response.ok) {
          const data = await response.json();
          login(data.user, data.token);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          if (webApp?.showAlert) {
            webApp.showAlert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.user.firstName}!`);
          }
        } else {
          console.error('Telegram auth failed:', await response.text());
          if (webApp?.showAlert) {
            webApp.showAlert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram');
          }
        }
      } catch (error) {
        console.error('Telegram auth error:', error);
        if (webApp?.showAlert) {
          webApp.showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        }
      } finally {
        setIsProcessing(false);
      }
    };

    handleTelegramAuth();
  }, [initDataUnsafe, login, webApp, isProcessing]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ deep linking
  useEffect(() => {
    if (!startParam || deepLinkProcessed) return;

    const handleDeepLink = async () => {
      setDeepLinkProcessed(true);

      // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const maxWait = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
      const startTime = Date.now();
      
      while (isProcessing && (Date.now() - startTime) < maxWait) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö deep link –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      switch (startParam) {
        case 'report':
          navigate('/reports', { replace: true });
          if (webApp?.showAlert) {
            webApp.showAlert('üìä –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç—á—ë—Ç–∞–º');
          }
          break;

        case 'stats':
          navigate('/dashboard', { 
            replace: true, 
            state: { showStats: true } 
          });
          if (webApp?.showAlert) {
            webApp.showAlert('üìà –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ');
          }
          break;

        case 'profile':
          navigate('/profile', { replace: true });
          if (webApp?.showAlert) {
            webApp.showAlert('üë§ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é');
          }
          break;

        case 'logs':
        case 'worklogs':
          navigate('/work-logs', { replace: true });
          if (webApp?.showAlert) {
            webApp.showAlert('‚è∞ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–±–æ—á–∏–º –ª–æ–≥–∞–º');
          }
          break;

        default:
          // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          navigate('/dashboard', { replace: true });
          if (webApp?.showAlert) {
            webApp.showAlert(`üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! (${startParam})`);
          }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º URL, —É–±–∏—Ä–∞—è startapp –ø–∞—Ä–∞–º–µ—Ç—Ä
      const newUrl = new URL(window.location);
      newUrl.searchParams.delete('tgWebAppStartParam');
      window.history.replaceState({}, '', newUrl.pathname + newUrl.search);
    };

    handleDeepLink();
  }, [startParam, navigate, deepLinkProcessed, isProcessing, webApp]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL (fallback)
  useEffect(() => {
    const urlParams = new URLSearchParams(location.search);
    const startAppParam = urlParams.get('startapp');
    
    if (startAppParam && !deepLinkProcessed) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const simulatedStartParam = startAppParam;
      
      setTimeout(() => {
        switch (simulatedStartParam) {
          case 'report':
            navigate('/reports', { replace: true });
            break;
          case 'stats':  
            navigate('/dashboard', { state: { showStats: true }, replace: true });
            break;
          case 'profile':
            navigate('/profile', { replace: true });
            break;
          default:
            navigate('/dashboard', { replace: true });
        }
        
        // –û—á–∏—â–∞–µ–º URL
        const newUrl = new URL(window.location);
        newUrl.searchParams.delete('startapp');
        window.history.replaceState({}, '', newUrl.pathname + newUrl.search);
      }, 500);
      
      setDeepLinkProcessed(true);
    }
  }, [location.search, navigate, deepLinkProcessed]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
  if (isProcessing) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-sm mx-4">
          <div className="flex items-center space-x-3">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span className="text-gray-700">–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram...</span>
          </div>
        </div>
      </div>
    );
  }

  return null; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
};

export default TelegramDeepLink; 