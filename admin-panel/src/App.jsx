import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { Toaster } from 'react-hot-toast'
import { useAuthStore } from '@/store/useAuthStore'
import { useIsTelegram } from '@/hooks/useIsTelegram'
import ProtectedRoute from '@/components/ProtectedRoute'
import Layout from '@/components/Layout'
import Login from '@/pages/Login'
import LoginTelegram from '@/pages/LoginTelegram'
import Dashboard from '@/pages/Dashboard'
import TelegramAdmin from '@/pages/TelegramAdmin'
import TelegramDemo from '@/components/TelegramDemo'
import DeepLinkDemo from '@/components/DeepLinkDemo'
import DeepLinkTester from '@/components/DeepLinkTester'
import EmployeeProfile from '@/pages/EmployeeProfile'
import EmployeeList from '@/pages/EmployeeList'
import Analytics from '@/pages/Analytics'
import WorkLogs from '@/pages/WorkLogs'
import Absences from '@/pages/Absences'
import SystemConfig from '@/pages/SystemConfig'
import TelegramApp from '@/components/TelegramApp'
import TelegramDeepLink from '@/components/TelegramDeepLink'
import DevModeToggle, { DevModeFloatingToggle } from '@/components/DevModeToggle'
import NotInTelegramNotice from '@/components/NotInTelegramNotice'
import { WelcomeMessage } from '@/components/TelegramAuthStatus'
import TelegramAuthStatus from '@/components/TelegramAuthStatus'
import TelegramTestingLink from '@/components/TelegramTestingLink'
import { useEffect } from 'react'
import { initTelegramApp, isInsideTelegram } from '@/lib/telegram'
import { useTelegramStartParam } from '@/hooks/useTelegramStartParam'
import TelegramWebAppTesting from '@/pages/TelegramWebAppTesting'
import OrganizationSettings from './pages/OrganizationSettings'
import SystemMonitoring from './pages/SystemMonitoring'

// –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç React Query
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      refetchOnWindowFocus: false,
    },
  },
})

function App() {
  const { checkAuth, isAuthenticated, user } = useAuthStore()
  const { startParam, isLoading: isStartParamLoading } = useTelegramStartParam()
  const { isTelegram, isReady: isTelegramReady } = useIsTelegram()

  // –í—Å–µ —Ö—É–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞!
  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    initTelegramApp()
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkAuth()
  }, [checkAuth])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  useEffect(() => {
    if (isInsideTelegram()) {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Telegram login –ø—Ä–∏ –≤—Ö–æ–¥–µ
      if (!isAuthenticated && window.location.pathname === '/login') {
        window.location.replace('/login-telegram')
      }
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ Telegram –∞–¥–º–∏–Ω–∫—É
      if (isAuthenticated && user?.role === 'admin' && window.location.pathname === '/') {
        window.location.replace('/telegram-admin')
      }
    }
  }, [isAuthenticated, user])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ deep linking –∏–∑ Telegram
  useEffect(() => {
    if (!isAuthenticated || isStartParamLoading || !startParam) return

    console.log('üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ deep link:', startParam)

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—É—Å–∫–∞
    const { path, query } = startParam
    
    if (path && window.location.pathname !== path) {
      // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const searchParams = new URLSearchParams()
      Object.entries(query || {}).forEach(([key, value]) => {
        searchParams.set(key, value)
      })
      
      const fullPath = searchParams.toString() ? `${path}?${searchParams}` : path
      
      console.log('üöÄ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:', fullPath)
      window.history.replaceState(null, '', fullPath)
      window.location.reload()
    }
  }, [isAuthenticated, isStartParamLoading, startParam])

  // –£—Å–ª–æ–≤–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç—ã –ü–û–°–õ–ï –≤—Å–µ—Ö —Ö—É–∫–æ–≤
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è Telegram
  if (!isTelegramReady) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">
            {process.env.NODE_ENV === 'development' ? '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mock...' : '–ó–∞–≥—Ä—É–∑–∫–∞...'}
          </p>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –º—ã –≤ Telegram WebApp –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  if (isTelegram && isAuthenticated && user?.role !== 'admin') {
    return (
      <QueryClientProvider client={queryClient}>
        <div className="App">
          <TelegramDeepLink />
          <TelegramApp />
          <Toaster
            position="top-center"
            toastOptions={{
              duration: 3000,
              style: {
                background: 'var(--tg-theme-bg-color, #ffffff)',
                color: 'var(--tg-theme-text-color, #000000)',
                border: '1px solid var(--tg-theme-hint-color, #999999)',
              },
            }}
          />
        </div>
      </QueryClientProvider>
    )
  }

  return (
    <QueryClientProvider client={queryClient}>
      <Router>
        <div className="App">
          {/* Telegram Deep Link –æ–±—Ä–∞–±–æ—Ç–∫–∞ */}
          <TelegramDeepLink />
          
          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <NotInTelegramNotice />
          
          {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <WelcomeMessage />
          
          <Routes>
            {/* –ü—É–±–ª–∏—á–Ω—ã–µ —Ä–æ—É—Ç—ã */}
            <Route 
              path="/login" 
              element={
                isAuthenticated ? <Navigate to="/" replace /> : <Login />
              } 
            />
            
            <Route 
              path="/login-telegram" 
              element={
                isAuthenticated ? <Navigate to="/" replace /> : <LoginTelegram />
              } 
            />
            
            {/* –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã */}
            <Route
              path="/"
              element={
                <ProtectedRoute>
                  <Layout>
                    <Dashboard />
                  </Layout>
                </ProtectedRoute>
              }
            />
            
            <Route
              path="/users"
              element={
                <ProtectedRoute>
                  <Layout>
                    <EmployeeList />
                  </Layout>
                </ProtectedRoute>
              }
            />

            {/* –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å deep linking */}
            <Route
              path="/employee/:id"
              element={
                <ProtectedRoute>
                  <Layout>
                    <EmployeeProfile />
                  </Layout>
                </ProtectedRoute>
              }
            />

            <Route
              path="/user/:id"
              element={
                <ProtectedRoute>
                  <Layout>
                    <EmployeeProfile />
                  </Layout>
                </ProtectedRoute>
              }
            />

            {/* –õ–æ–≥–∏ —Ä–∞–±–æ—Ç—ã —Å deep linking */}
            <Route
              path="/logs"
              element={
                <ProtectedRoute>
                  <Layout>
                    <WorkLogs />
                  </Layout>
                </ProtectedRoute>
              }
            />
            
            <Route
              path="/employees"
              element={
                <ProtectedRoute>
                  <Layout>
                    <EmployeeList />
                  </Layout>
                </ProtectedRoute>
              }
            />

            <Route
              path="/analytics"
              element={
                <ProtectedRoute>
                  <Layout>
                    <Analytics />
                  </Layout>
                </ProtectedRoute>
              }
            />

            <Route
              path="/absences"
              element={
                <ProtectedRoute>
                  <Layout>
                    <Absences />
                  </Layout>
                </ProtectedRoute>
              }
            />

            {/* –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) */}
                        <Route 
              path="/system-config" 
              element={
                <ProtectedRoute requiredRole="admin">
                  <Layout>
                    <SystemConfig />
                  </Layout>
                </ProtectedRoute>
              } 
            />
            
            <Route 
              path="/organization-settings" 
              element={
                <ProtectedRoute requiredRole="admin">
                  <Layout>
                    <OrganizationSettings />
                  </Layout>
                </ProtectedRoute>
              } 
            />
            
            <Route 
              path="/system-monitoring" 
              element={
                <ProtectedRoute requiredRole="admin">
                  <Layout>
                    <SystemMonitoring />
                  </Layout>
                </ProtectedRoute>
              } 
            />
            
            <Route
              path="/settings"
              element={
                <ProtectedRoute>
                  <Layout>
                    <div className="space-y-6">
                      <div>
                        <h2 className="text-2xl font-bold text-gray-900">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
                        <p className="text-gray-600 mt-2">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</p>
                      </div>
                      
                      {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                      <TelegramAuthStatus variant="profile" />
                      
                      {/* –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebApp */}
                      <TelegramTestingLink />
                      
                      {/* Dev Mode Toggle –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ */}
                      <DevModeToggle />
                      
                      <DeepLinkTester />
                      <DeepLinkDemo />
                      <TelegramDemo />
                    </div>
                  </Layout>
                </ProtectedRoute>
              }
            />

            <Route
              path="/telegram-admin"
              element={
                <ProtectedRoute>
                  <TelegramAdmin />
                </ProtectedRoute>
              }
            />

            {/* Dev —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebApp */}
            <Route
              path="/dev/test-telegram"
              element={
                <ProtectedRoute>
                  <TelegramWebAppTesting />
                </ProtectedRoute>
              }
            />

            {/* –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é */}
            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>
        </div>
      </Router>
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Toaster
        position="top-right"
        toastOptions={{
          duration: 4000,
          style: {
            background: '#363636',
            color: '#fff',
          },
          success: {
            duration: 3000,
            theme: {
              primary: 'green',
              secondary: 'black',
            },
          },
        }}
      />
      
      {/* Dev Mode Toggle –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
      <DevModeFloatingToggle />
    </QueryClientProvider>
  )
}

export default App 