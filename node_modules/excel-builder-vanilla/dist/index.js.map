{"version":3,"file":"index.js","sources":["../src/utilities/isTypeOf.ts","../src/utilities/escape.ts","../src/Excel/XMLDOM.ts","../src/Excel/Util.ts","../src/Excel/Drawing/AbsoluteAnchor.ts","../src/Excel/Drawing/Chart.ts","../src/utilities/uniqueId.ts","../src/Excel/Drawing/OneCellAnchor.ts","../src/Excel/Drawing/TwoCellAnchor.ts","../src/Excel/Drawing/Drawing.ts","../src/Excel/Drawing/Picture.ts","../src/Excel/Paths.ts","../src/Excel/RelationshipManager.ts","../src/Excel/Drawings.ts","../src/Excel/Pane.ts","../src/Excel/Positioning.ts","../src/Excel/SharedStrings.ts","../src/Excel/SheetView.ts","../src/utilities/pick.ts","../src/Excel/StyleSheet.ts","../src/Excel/Table.ts","../src/Excel/Worksheet.ts","../src/Excel/Workbook.ts","../src/factory.ts"],"sourcesContent":["export function isObject(value: unknown): value is object {\n  const type = typeof value;\n  return value != null && (type === 'object' || type === 'function');\n}\n\nexport function isPlainObject(value: unknown) {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(value) !== '[object Object]') {\n    return false;\n  }\n\n  /* v8 ignore next 4 */\n  const proto = Object.getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n\n  const Ctor = Object.prototype.hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor === 'function' && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);\n}\n\nexport function isString(value: any): value is string {\n  if (value != null && typeof value.valueOf() === 'string') {\n    return true;\n  }\n  return false;\n}\n","/** Lodash Util - Used to map characters to HTML entities. */\nconst htmlEscapes: { [char: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @since 0.1.0\n * @category String\n * @param {string} [str=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @see escapeRegExp, unescape\n * @example\n *\n * escape('fred, barney, & pebbles')\n * // => 'fred, barney, &amp; pebbles'\n */\nexport const htmlEscape = (str: string) => {\n  if (typeof str !== 'string') {\n    str = `${str}`;\n  }\n  return str.replace(/[&<>\"']/g, m => htmlEscapes[m]);\n};\n","import { htmlEscape } from '../utilities/escape.js';\n\ntype XMLNodeOption = {\n  attributes?: {\n    [key: string]: any;\n  };\n  children?: XMLNode[];\n  nodeName: string;\n  nodeValue?: string;\n  type?: string;\n};\n\nexport class XMLDOM {\n  documentElement: XMLNode;\n\n  constructor(ns: string | null, rootNodeName: string) {\n    this.documentElement = this.createElement(rootNodeName);\n    this.documentElement.setAttribute('xmlns', ns);\n  }\n\n  createElement(name: string) {\n    return new XMLNode({\n      nodeName: name,\n    });\n  }\n\n  createTextNode(text: string) {\n    return new TextNode(text);\n  }\n\n  toString() {\n    return this.documentElement.toString();\n  }\n\n  static Node = {\n    Create: (config: any) => {\n      switch (config.type) {\n        case 'XML':\n          return new XMLNode(config);\n        case 'TEXT':\n          return new TextNode(config.nodeValue);\n        default:\n          return null;\n      }\n    },\n  };\n}\n\nclass TextNode {\n  nodeValue: any;\n\n  constructor(text: string) {\n    this.nodeValue = text;\n  }\n\n  toJSON() {\n    return {\n      nodeValue: this.nodeValue,\n      type: 'TEXT',\n    };\n  }\n\n  toString() {\n    return htmlEscape(this.nodeValue);\n  }\n}\n\nexport class XMLNode {\n  nodeName = '';\n  children: XMLNode[];\n  nodeValue: string;\n  attributes: { [key: string]: any };\n  firstChild?: XMLNode;\n\n  constructor(config: XMLNodeOption) {\n    this.nodeName = config.nodeName;\n    this.children = [];\n    this.nodeValue = config.nodeValue || '';\n    this.attributes = {};\n\n    if (config.children) {\n      for (let i = 0, l = config.children.length; i < l; i++) {\n        this.appendChild(XMLDOM.Node.Create(config.children[i]));\n      }\n    }\n\n    if (config.attributes) {\n      for (const attr in config.attributes) {\n        if (config.attributes.hasOwnProperty(attr)) {\n          this.setAttribute(attr, config.attributes[attr]);\n        }\n      }\n    }\n  }\n\n  toString() {\n    let string = `<${this.nodeName}`;\n    for (const attr in this.attributes) {\n      if (this.attributes.hasOwnProperty(attr)) {\n        string = `${string} ${attr}=\\\"${htmlEscape(this.attributes[attr])}\\\"`;\n      }\n    }\n\n    let childContent = '';\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      childContent += this.children[i].toString();\n    }\n\n    if (childContent) {\n      string += `>${childContent}</${this.nodeName}>`;\n    } else {\n      string += '/>';\n    }\n\n    return string;\n  }\n\n  toJSON() {\n    const children: any[] = [];\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      children.push(this.children[i].toJSON());\n    }\n    return {\n      nodeName: this.nodeName,\n      children: children,\n      nodeValue: this.nodeValue,\n      attributes: this.attributes,\n      type: 'XML',\n    };\n  }\n\n  setAttribute(name: string, val: any) {\n    if (val === null) {\n      delete this.attributes[name];\n      delete (this as any)[name];\n      return;\n    }\n    this.attributes[name] = val;\n    (this as any)[name] = val;\n  }\n\n  appendChild(child: any) {\n    this.children.push(child);\n    this.firstChild = this.children[0];\n  }\n\n  cloneNode(_deep?: boolean) {\n    return new XMLNode(this.toJSON());\n  }\n}\n","import { isPlainObject } from '../utilities/isTypeOf.js';\nimport { XMLDOM, type XMLNode } from './XMLDOM.js';\n\n/**\n * @module Excel/Util\n */\n\nexport class Util {\n  static _idSpaces: { [space: string]: number } = {};\n\n  /**\n   * Returns a number based on a namespace. So, running with 'Picture' will return 1. Run again, you will get 2. Run with 'Foo', you'll get 1.\n   * @param {String} space\n   * @returns {Number}\n   */\n  static uniqueId(space: string) {\n    if (!Util._idSpaces[space]) {\n      Util._idSpaces[space] = 1;\n    }\n    return Util._idSpaces[space]++;\n  }\n\n  /**\n   * Attempts to create an XML document. After some investigation, using the 'fake' document\n   * is significantly faster than creating an actual XML document, so we're going to go with\n   * that. Besides, it just makes it easier to port to node.\n   *\n   * Takes a namespace to start the xml file in, as well as the root element\n   * of the xml file.\n   *\n   * @param {type} ns\n   * @param {type} base\n   * @returns {@new;XMLDOM}\n   */\n  static createXmlDoc(ns: string, base: string) {\n    return new XMLDOM(ns || null, base);\n  }\n\n  /**\n   * Creates an xml node (element). Used to simplify some calls, as IE is\n   * very particular about namespaces and such.\n   *\n   * @param {XMLDOM} doc An xml document (actual DOM or fake DOM, not a string)\n   * @param {type} name The name of the element\n   * @param {type} attributes\n   * @returns {XML Node}\n   */\n  static createElement(doc: XMLDOM, name: string, attributes?: any) {\n    const el = doc.createElement(name);\n    attributes = attributes || [];\n    let i = attributes.length;\n    while (i--) {\n      el.setAttribute(attributes[i][0], attributes[i][1]);\n    }\n    return el;\n  }\n\n  /**\n   * This is sort of slow, but it's a huge convenience method for the code. It probably shouldn't be used\n   * in high repetition areas.\n   *\n   * @param {XMLDoc} doc\n   * @param {Object} attrs\n   */\n  static setAttributesOnDoc(doc: XMLNode, attrs: { [key: string]: any }) {\n    for (let [k, v] of Object.entries(attrs)) {\n      if (isPlainObject(v)) {\n        if (v.v !== null && v.v !== undefined) {\n          switch (v.type) {\n            case Boolean:\n              v = v.v ? '1' : '0';\n              break;\n          }\n        } else {\n          v = null;\n        }\n      }\n      if (v !== null && v !== undefined) {\n        doc.setAttribute(k, v);\n      }\n    }\n  }\n\n  static LETTER_REFS: any = {};\n\n  static positionToLetterRef(x: number, y: number | string) {\n    let digit = 1;\n    let index: number;\n    let num = x;\n    let string = '';\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    if (Util.LETTER_REFS[x]) {\n      return Util.LETTER_REFS[x].concat(y);\n    }\n    while (num > 0) {\n      num -= Math.pow(26, digit - 1);\n      index = num % Math.pow(26, digit);\n      num -= index;\n      index = index / Math.pow(26, digit - 1);\n      string = alphabet.charAt(index) + string;\n      digit += 1;\n    }\n    Util.LETTER_REFS[x] = string;\n    return string.concat(String(y));\n  }\n\n  static schemas = {\n    worksheet: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',\n    sharedStrings: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',\n    stylesheet: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n    relationships: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n    relationshipPackage: 'http://schemas.openxmlformats.org/package/2006/relationships',\n    contentTypes: 'http://schemas.openxmlformats.org/package/2006/content-types',\n    spreadsheetml: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n    markupCompat: 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n    x14ac: 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\n    officeDocument: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',\n    package: 'http://schemas.openxmlformats.org/package/2006/relationships',\n    table: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/table',\n    spreadsheetDrawing: 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing',\n    drawing: 'http://schemas.openxmlformats.org/drawingml/2006/main',\n    drawingRelationship: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n    image: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n    chart: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart',\n    hyperlink: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink',\n  };\n}\n","import type { AnchorOption } from './Drawing.js';\nimport { Util } from '../Util.js';\nimport type { XMLDOM } from '../XMLDOM.js';\n\n/**\n *\n * @param {Object} config\n * @param {Number} config.x X offset in EMU's\n * @param {Number} config.y Y offset in EMU's\n * @param {Number} config.width Width in EMU's\n * @param {Number} config.height Height in EMU's\n * @constructor\n */\nexport class AbsoluteAnchor {\n  x: number | null = null;\n  y: number | null = null;\n  width: number | null = null;\n  height: number | null = null;\n\n  constructor(config: AnchorOption) {\n    if (config) {\n      this.setPos(config.x, config.y);\n      this.setDimensions(config.width, config.height);\n    }\n  }\n\n  /**\n   * Sets the X and Y offsets.\n   *\n   * @param {Number} x\n   * @param {Number} y\n   * @returns {undefined}\n   */\n  setPos(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Sets the width and height of the image.\n   *\n   * @param {Number} width\n   * @param {Number} height\n   * @returns {undefined}\n   */\n  setDimensions(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  toXML(xmlDoc: XMLDOM, content: any) {\n    const root = Util.createElement(xmlDoc, 'xdr:absoluteAnchor');\n    const pos = Util.createElement(xmlDoc, 'xdr:pos');\n    pos.setAttribute('x', this.x);\n    pos.setAttribute('y', this.y);\n    root.appendChild(pos);\n\n    const dimensions = Util.createElement(xmlDoc, 'xdr:ext');\n    dimensions.setAttribute('cx', this.width);\n    dimensions.setAttribute('cy', this.height);\n    root.appendChild(dimensions);\n\n    root.appendChild(content);\n\n    root.appendChild(Util.createElement(xmlDoc, 'xdr:clientData'));\n    return root;\n  }\n}\n","export class Chart {}\n","/** Lodash Util - Used to generate unique IDs. */\nconst idCounter: { [prefix: string]: number } = {};\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @since 0.1.0\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @see random\n * @example\n *\n * uniqueId('contact_')\n * // => 'contact_104'\n *\n * uniqueId()\n * // => '105'\n */\nexport function uniqueId(prefix = '$lodash$') {\n  if (!idCounter[prefix]) {\n    idCounter[prefix] = 0;\n  }\n\n  const id = ++idCounter[prefix];\n  if (prefix === '$lodash$') {\n    return `${id}`;\n  }\n\n  return `${prefix}${id}`;\n}\n","import type { AnchorOption } from './Drawing.js';\nimport { Util } from '../Util.js';\nimport type { XMLDOM } from '../XMLDOM.js';\n\n/**\n *\n * @param {Object} config\n * @param {Number} config.x The cell column number that the top left of the picture will start in\n * @param {Number} config.y The cell row number that the top left of the picture will start in\n * @param {Number} config.width Width in EMU's\n * @param {Number} config.height Height in EMU's\n * @constructor\n */\nexport class OneCellAnchor {\n  x: number | null = null;\n  y: number | null = null;\n  xOff: boolean | null = null;\n  yOff: boolean | null = null;\n  width: number | null = null;\n  height: number | null = null;\n\n  constructor(config: AnchorOption) {\n    if (config) {\n      this.setPos(config.x, config.y, config.xOff, config.yOff);\n      this.setDimensions(config.width, config.height);\n    }\n  }\n\n  setPos(x: number, y: number, xOff?: boolean, yOff?: boolean) {\n    this.x = x;\n    this.y = y;\n    if (xOff !== undefined) {\n      this.xOff = xOff;\n    }\n    if (yOff !== undefined) {\n      this.yOff = yOff;\n    }\n  }\n\n  setDimensions(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  toXML(xmlDoc: XMLDOM, content: any) {\n    const root = Util.createElement(xmlDoc, 'xdr:oneCellAnchor');\n    const from = Util.createElement(xmlDoc, 'xdr:from');\n    const fromCol = Util.createElement(xmlDoc, 'xdr:col');\n    fromCol.appendChild(xmlDoc.createTextNode(String(this.x)));\n    const fromColOff = Util.createElement(xmlDoc, 'xdr:colOff');\n    fromColOff.appendChild(xmlDoc.createTextNode(String(this.xOff || 0)));\n    const fromRow = Util.createElement(xmlDoc, 'xdr:row');\n    fromRow.appendChild(xmlDoc.createTextNode(String(this.y)));\n    const fromRowOff = Util.createElement(xmlDoc, 'xdr:rowOff');\n    fromRowOff.appendChild(xmlDoc.createTextNode(String(this.yOff || 0)));\n    from.appendChild(fromCol);\n    from.appendChild(fromColOff);\n    from.appendChild(fromRow);\n    from.appendChild(fromRowOff);\n\n    root.appendChild(from);\n\n    const dimensions = Util.createElement(xmlDoc, 'xdr:ext');\n    dimensions.setAttribute('cx', String(this.width));\n    dimensions.setAttribute('cy', String(this.height));\n    root.appendChild(dimensions);\n    root.appendChild(content);\n\n    root.appendChild(Util.createElement(xmlDoc, 'xdr:clientData'));\n    return root;\n  }\n}\n","import type { DualAnchorOption } from './Drawing.js';\nimport { Util } from '../Util.js';\nimport type { XMLDOM } from '../XMLDOM.js';\n\nexport class TwoCellAnchor {\n  from: any = { xOff: 0, yOff: 0 };\n  to: any = { xOff: 0, yOff: 0 };\n\n  constructor(config: DualAnchorOption) {\n    if (config) {\n      this.setFrom(config.from.x, config.from.y, config.to.xOff, config.to.yOff);\n      this.setTo(config.to.x, config.to.y, config.to.xOff, config.to.yOff);\n    }\n  }\n\n  setFrom(x: number, y: number, xOff?: boolean, yOff?: boolean) {\n    this.from.x = x;\n    this.from.y = y;\n    if (xOff !== undefined) {\n      this.from.xOff = xOff;\n    }\n    if (yOff !== undefined) {\n      this.from.yOff = xOff;\n    }\n  }\n\n  setTo(x: number, y: number, xOff?: boolean, yOff?: boolean) {\n    this.to.x = x;\n    this.to.y = y;\n    if (xOff !== undefined) {\n      this.to.xOff = xOff;\n    }\n    if (yOff !== undefined) {\n      this.to.yOff = xOff;\n    }\n  }\n\n  toXML(xmlDoc: XMLDOM, content: any) {\n    const root = Util.createElement(xmlDoc, 'xdr:twoCellAnchor');\n\n    const from = Util.createElement(xmlDoc, 'xdr:from');\n    const fromCol = Util.createElement(xmlDoc, 'xdr:col');\n    fromCol.appendChild(xmlDoc.createTextNode(this.from.x));\n    const fromColOff = Util.createElement(xmlDoc, 'xdr:colOff');\n    fromColOff.appendChild(xmlDoc.createTextNode(this.from.xOff));\n    const fromRow = Util.createElement(xmlDoc, 'xdr:row');\n    fromRow.appendChild(xmlDoc.createTextNode(this.from.y));\n    const fromRowOff = Util.createElement(xmlDoc, 'xdr:rowOff');\n    fromRowOff.appendChild(xmlDoc.createTextNode(this.from.yOff));\n\n    from.appendChild(fromCol);\n    from.appendChild(fromColOff);\n    from.appendChild(fromRow);\n    from.appendChild(fromRowOff);\n\n    const to = Util.createElement(xmlDoc, 'xdr:to');\n    const toCol = Util.createElement(xmlDoc, 'xdr:col');\n    toCol.appendChild(xmlDoc.createTextNode(this.to.x));\n    const toColOff = Util.createElement(xmlDoc, 'xdr:colOff');\n    toColOff.appendChild(xmlDoc.createTextNode(this.from.xOff));\n    const toRow = Util.createElement(xmlDoc, 'xdr:row');\n    toRow.appendChild(xmlDoc.createTextNode(this.to.y));\n    const toRowOff = Util.createElement(xmlDoc, 'xdr:rowOff');\n    toRowOff.appendChild(xmlDoc.createTextNode(this.from.yOff));\n\n    to.appendChild(toCol);\n    to.appendChild(toColOff);\n    to.appendChild(toRow);\n    to.appendChild(toRowOff);\n\n    root.appendChild(from);\n    root.appendChild(to);\n\n    root.appendChild(content);\n\n    root.appendChild(Util.createElement(xmlDoc, 'xdr:clientData'));\n    return root;\n  }\n}\n","import { uniqueId } from '../../utilities/uniqueId.js';\nimport { AbsoluteAnchor } from './AbsoluteAnchor.js';\nimport { OneCellAnchor } from './OneCellAnchor.js';\nimport { TwoCellAnchor } from './TwoCellAnchor.js';\n// import { Picture } from './Picture.js';\n\nexport interface AnchorOption {\n  /** X offset in EMU's */\n  x: number;\n  /** Y offset in EMU's */\n  y: number;\n  xOff?: boolean;\n  yOff?: boolean;\n  /** Width in EMU's */\n  height: number;\n  /** Height in EMU's */\n  width: number;\n  drawing?: Drawing;\n}\n\nexport interface DualAnchorOption {\n  to: AnchorOption;\n  from: AnchorOption;\n  drawing?: Drawing;\n}\n\n/**\n * This is mostly a global spot where all of the relationship managers can get and set\n * path information from/to.\n * @module Excel/Drawing\n */\nexport class Drawing {\n  anchor!: AbsoluteAnchor | OneCellAnchor | TwoCellAnchor;\n  id = uniqueId('Drawing');\n\n  /**\n   *\n   * @param {String} type Can be 'absoluteAnchor', 'oneCellAnchor', or 'twoCellAnchor'.\n   * @param {Object} config Shorthand - pass the created anchor coords that can normally be used to construct it.\n   * @returns {Anchor}\n   */\n  // TODO: couldn't get function override working, but hopefully in the future\n  // createAnchor(type: 'absoluteAnchor', config: AnchorOption): AbsoluteAnchor;\n  // createAnchor(type: 'oneCellAnchor', config: AnchorOption): OneCellAnchor;\n  // createAnchor(type: 'twoCellAnchor', config: DualAnchorOption): TwoCellAnchor;\n  createAnchor(type: 'absoluteAnchor' | 'oneCellAnchor' | 'twoCellAnchor', config: any): AbsoluteAnchor | OneCellAnchor | TwoCellAnchor {\n    config ??= {} as AnchorOption | DualAnchorOption;\n    config.drawing = this;\n    switch (type) {\n      case 'absoluteAnchor':\n        this.anchor = new AbsoluteAnchor(config as AnchorOption);\n        break;\n      case 'oneCellAnchor':\n        this.anchor = new OneCellAnchor(config as AnchorOption);\n        break;\n      case 'twoCellAnchor':\n        this.anchor = new TwoCellAnchor(config as DualAnchorOption);\n        break;\n    }\n    return this.anchor;\n  }\n}\n","import { Drawing } from './Drawing.js';\nimport { uniqueId } from '../../utilities/uniqueId.js';\nimport { Util } from '../Util.js';\nimport type { MediaMeta } from '../Workbook.js';\nimport type { XMLDOM } from '../XMLDOM.js';\n\nexport class Picture extends Drawing {\n  id = uniqueId('Picture');\n  pictureId = Util.uniqueId('Picture');\n  fill: any = {};\n  mediaData: MediaMeta | null = null;\n  description = '';\n\n  constructor() {\n    super();\n    // Picture.prototype = new Drawing();\n    this.id = uniqueId('Picture');\n    this.pictureId = Util.uniqueId('Picture');\n  }\n\n  setMedia(mediaRef: MediaMeta) {\n    this.mediaData = mediaRef;\n  }\n\n  setDescription(description: string) {\n    this.description = description;\n  }\n\n  setFillType(type: string) {\n    this.fill.type = type;\n  }\n\n  setFillConfig(config: any) {\n    Object.assign(this.fill, config);\n  }\n\n  getMediaType(): keyof typeof Util.schemas {\n    return 'image';\n  }\n\n  getMediaData() {\n    return this.mediaData as MediaMeta;\n  }\n\n  setRelationshipId(rId: string) {\n    this.mediaData!.rId = rId;\n  }\n\n  toXML(xmlDoc: XMLDOM) {\n    const pictureNode = Util.createElement(xmlDoc, 'xdr:pic');\n\n    const nonVisibleProperties = Util.createElement(xmlDoc, 'xdr:nvPicPr');\n\n    const nameProperties = Util.createElement(xmlDoc, 'xdr:cNvPr', [\n      ['id', this.pictureId],\n      ['name', this.mediaData!.fileName],\n      ['descr', this.description || ''],\n    ]);\n    nonVisibleProperties.appendChild(nameProperties);\n    const nvPicProperties = Util.createElement(xmlDoc, 'xdr:cNvPicPr');\n    nvPicProperties.appendChild(\n      Util.createElement(xmlDoc, 'a:picLocks', [\n        ['noChangeAspect', '1'],\n        ['noChangeArrowheads', '1'],\n      ]),\n    );\n    nonVisibleProperties.appendChild(nvPicProperties);\n    pictureNode.appendChild(nonVisibleProperties);\n    const pictureFill = Util.createElement(xmlDoc, 'xdr:blipFill');\n    pictureFill.appendChild(\n      Util.createElement(xmlDoc, 'a:blip', [\n        ['xmlns:r', Util.schemas.relationships],\n        ['r:embed', this.mediaData!.rId],\n      ]),\n    );\n    pictureFill.appendChild(Util.createElement(xmlDoc, 'a:srcRect'));\n    const stretch = Util.createElement(xmlDoc, 'a:stretch');\n    stretch.appendChild(Util.createElement(xmlDoc, 'a:fillRect'));\n    pictureFill.appendChild(stretch);\n    pictureNode.appendChild(pictureFill);\n\n    const shapeProperties = Util.createElement(xmlDoc, 'xdr:spPr', [['bwMode', 'auto']]);\n\n    const transform2d = Util.createElement(xmlDoc, 'a:xfrm');\n    shapeProperties.appendChild(transform2d);\n\n    const presetGeometry = Util.createElement(xmlDoc, 'a:prstGeom', [['prst', 'rect']]);\n    shapeProperties.appendChild(presetGeometry);\n\n    pictureNode.appendChild(shapeProperties);\n    //            <xdr:spPr bwMode=\"auto\">\n    //                <a:xfrm>\n    //                    <a:off x=\"1\" y=\"1\"/>\n    //                    <a:ext cx=\"1640253\" cy=\"1885949\"/>\n    //                </a:xfrm>\n    //                <a:prstGeom prst=\"rect\">\n    //                    <a:avLst/>\n    //                </a:prstGeom>\n    //                <a:noFill/>\n    //                <a:extLst>\n    //                    <a:ext uri=\"{909E8E84-426E-40DD-AFC4-6F175D3DCCD1}\">\n    //                        <a14:hiddenFill xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\">\n    //                            <a:solidFill>\n    //                                <a:srgbClr val=\"FFFFFF\"/>\n    //                            </a:solidFill>\n    //                        </a14:hiddenFill>\n    //                    </a:ext>\n    //                </a:extLst>\n    //            </xdr:spPr>\n    //\n\n    // TODO: add back extends Drawing and the following\n    return this.anchor.toXML(xmlDoc, pictureNode);\n  }\n}\n","/**\n * This is mostly a global spot where all of the relationship managers can get and set\n * path information from/to.\n * @module Excel/Paths\n */\nexport const Paths: {\n  [path: string]: string;\n} = {};\n","import { uniqueId } from '../utilities/uniqueId.js';\nimport { Paths } from './Paths.js';\nimport { Util } from './Util.js';\n\ntype Relation = {\n  [id: string]: {\n    id: string;\n    schema: string;\n    object: any;\n    data?: {\n      id: number;\n      schema: string;\n      object: any;\n    };\n  };\n};\n\n/**\n * @module Excel/RelationshipManager\n */\nexport class RelationshipManager {\n  relations: Relation = {};\n  lastId = 1;\n\n  constructor() {\n    uniqueId('rId'); // priming\n  }\n\n  importData(data: { relations: Relation; lastId: number }) {\n    this.relations = data.relations;\n    this.lastId = data.lastId;\n  }\n\n  exportData() {\n    return {\n      relations: this.relations,\n      lastId: this.lastId,\n    };\n  }\n\n  addRelation(object: { id: string }, type: keyof typeof Util.schemas) {\n    this.relations[object.id] = {\n      id: uniqueId('rId'),\n      schema: Util.schemas[type],\n      object,\n    };\n    return this.relations[object.id].id;\n  }\n\n  getRelationshipId(object: { id: string }) {\n    return this.relations[object.id] ? this.relations[object.id].id : null;\n  }\n\n  toXML() {\n    const doc = Util.createXmlDoc(Util.schemas.relationshipPackage, 'Relationships');\n    const relationships = doc.documentElement;\n\n    for (const [id, data] of Object.entries(this.relations)) {\n      const relationship = Util.createElement(doc, 'Relationship', [\n        ['Id', data.id],\n        ['Type', data.schema],\n        ['Target', data.object.target || Paths[id]],\n      ]);\n      if (data.object.targetMode) {\n        relationship.setAttribute('TargetMode', data.object.targetMode);\n      }\n      relationships.appendChild(relationship);\n    }\n    return doc;\n  }\n}\n","import { uniqueId } from '../utilities/uniqueId.js';\nimport type { Drawing } from './Drawing/Drawing.js';\nimport type { Picture } from './Drawing/Picture.js';\nimport { RelationshipManager } from './RelationshipManager.js';\nimport { Util } from './Util.js';\n\n/**\n * @module Excel/Drawings\n */\n\nexport class Drawings {\n  drawings: (Drawing | Picture)[] = [];\n  relations = new RelationshipManager();\n  id = uniqueId('Drawings');\n\n  /**\n   * Adds a drawing (more likely a subclass of a Drawing) to the 'Drawings' for a particular worksheet.\n   *\n   * @param {Drawing} drawing\n   * @returns {undefined}\n   */\n  addDrawing(drawing: Drawing) {\n    this.drawings.push(drawing);\n  }\n\n  getCount() {\n    return this.drawings.length;\n  }\n\n  toXML() {\n    const doc = Util.createXmlDoc(Util.schemas.spreadsheetDrawing, 'xdr:wsDr');\n    const drawings = doc.documentElement;\n    drawings.setAttribute('xmlns:a', Util.schemas.drawing);\n    drawings.setAttribute('xmlns:r', Util.schemas.relationships);\n    drawings.setAttribute('xmlns:xdr', Util.schemas.spreadsheetDrawing);\n\n    for (let i = 0, l = this.drawings.length; i < l; i++) {\n      let rId = this.relations.getRelationshipId((this.drawings[i] as Picture).getMediaData());\n      if (!rId) {\n        rId = this.relations.addRelation((this.drawings[i] as Picture).getMediaData(), (this.drawings[i] as Picture).getMediaType()); //chart\n      }\n      (this.drawings[i] as Picture).setRelationshipId(rId);\n      drawings.appendChild((this.drawings[i] as Picture).toXML(doc));\n    }\n    return doc;\n  }\n}\n","/**\n * @module Excel/Pane\n *\n * https://msdn.microsoft.com/en-us/library/documentformat.openxml.spreadsheet.pane%28v=office.14%29.aspx\n */\n\nimport type { XMLDOM } from './XMLDOM.js';\n\nexport class Pane {\n  /*\n    Possible Values:\n     null\n     split\tSplit\n     frozen\tFrozen\n     frozenSplit\tFrozen Split\n     http://www.datypic.com/sc/ooxml/t-ssml_ST_PaneState.html\n     */\n  state: null | 'split' | 'frozen' | 'frozenSplit' = null;\n  xSplit: number | null = null;\n  ySplit: number | null = null;\n  activePane = 'bottomRight';\n  topLeftCell: number | string | null = null;\n  _freezePane!: { xSplit: number; ySplit: number; cell: string };\n\n  freezePane(column: number, row: number, cell: string) {\n    this._freezePane = { xSplit: column, ySplit: row, cell };\n  }\n\n  exportXML(doc: XMLDOM) {\n    const pane = doc.createElement('pane');\n\n    if (this.state !== null) {\n      pane.setAttribute('xSplit', this._freezePane.xSplit);\n      pane.setAttribute('ySplit', this._freezePane.ySplit);\n      pane.setAttribute('topLeftCell', this._freezePane.cell);\n      pane.setAttribute('activePane', 'bottomRight');\n      pane.setAttribute('state', 'frozen');\n    }\n    return pane;\n  }\n}\n","/**\n * Converts pixel sizes to 'EMU's, which is what Open XML uses.\n *\n * @todo clean this up. Code borrowed from http://polymathprogrammer.com/2009/10/22/english-metric-units-and-open-xml/,\n * but not sure that it's going to be as accurate as it needs to be.\n *\n * @param int pixels\n * @returns int\n */\nexport class Positioning {\n  static pixelsToEMUs(pixels: number) {\n    return Math.round((pixels * 914400) / 96);\n  }\n}\n","import { uniqueId } from '../utilities/uniqueId.js';\nimport { Util } from './Util.js';\n\n/**\n * @module Excel/SharedStrings\n */\nexport class SharedStrings {\n  strings: { [key: string]: number } = {};\n  stringArray: string[] = [];\n  id = uniqueId('SharedStrings');\n\n  /**\n   * Adds a string to the shared string file, and returns the ID of the\n   * string which can be used to reference it in worksheets.\n   *\n   * @param str {String}\n   * @return int\n   */\n  addString(str: string) {\n    this.strings[str] = this.stringArray.length;\n    this.stringArray[this.stringArray.length] = str;\n    return this.strings[str];\n  }\n\n  exportData() {\n    return this.strings;\n  }\n\n  toXML() {\n    const doc = Util.createXmlDoc(Util.schemas.spreadsheetml, 'sst');\n    const sharedStringTable = doc.documentElement;\n    this.stringArray.reverse();\n    let l = this.stringArray.length;\n    sharedStringTable.setAttribute('count', l);\n    sharedStringTable.setAttribute('uniqueCount', l);\n\n    const template = doc.createElement('si');\n    const templateValue = doc.createElement('t');\n    templateValue.appendChild(doc.createTextNode('--placeholder--'));\n    template.appendChild(templateValue);\n    const strings = this.stringArray;\n\n    while (l--) {\n      const clone = template.cloneNode(true);\n      if (typeof strings[l] === 'string' && strings[l].match(/\\s+/)) {\n        clone.firstChild!.setAttribute('xml:space', 'preserve');\n      }\n      clone.firstChild!.firstChild!.nodeValue = strings[l];\n      sharedStringTable.appendChild(clone);\n    }\n\n    return doc;\n  }\n}\n","import { Pane } from './Pane.js';\nimport { Util } from './Util.js';\nimport type { XMLDOM } from './XMLDOM.js';\n\ninterface SheetViewOption {\n  pane?: Pane;\n}\n\n/**\n * @module Excel/SheetView\n * https://msdn.microsoft.com/en-us/library/documentformat.openxml.spreadsheet.sheetview%28v=office.14%29.aspx\n *\n */\nexport class SheetView {\n  pane: Pane;\n  showZeros: boolean | null = null; // Default\n  defaultGridColor: string | null = null;\n  colorId: number | null = null;\n  rightToLeft: boolean | null = null;\n  showFormulas: boolean | null = null;\n  showGridLines: boolean | null = null;\n  showOutlineSymbols: boolean | null = null;\n  showRowColHeaders: boolean | null = null;\n  showRuler: boolean | null = null;\n  showWhiteSpace: boolean | null = null;\n  tabSelected: boolean | null = null;\n  topLeftCell: boolean | null = null;\n  viewType = null; // http://www.datypic.com/sc/ooxml/t-ssml_ST_SheetViewType.html\n  windowProtection: boolean | null = null;\n  zoomScale: boolean | null = null;\n  zoomScaleNormal: any = null;\n  zoomScalePageLayoutView: any = null;\n  zoomScaleSheetLayoutView: any = null;\n\n  constructor(config?: SheetViewOption) {\n    const conf = config || {};\n    this.pane = conf.pane || new Pane();\n  }\n\n  /**\n   * Added froze pane\n   * @param column - column number: 0, 1, 2 ...\n   * @param row - row number: 0, 1, 2 ...\n   * @param cell - 'A1'\n   * @deprecated\n   */\n  freezePane(column: number, row: number, cell: string) {\n    this.pane.state = 'frozen';\n    this.pane.xSplit = column;\n    this.pane.ySplit = row;\n    this.pane.topLeftCell = cell;\n  }\n\n  exportXML(doc: XMLDOM) {\n    const sheetViews = doc.createElement('sheetViews');\n    const sheetView = doc.createElement('sheetView');\n\n    Util.setAttributesOnDoc(sheetView, {\n      //TODO apparent you can add 'book views'.. investigate what these are\n      workbookViewId: 0,\n      showZeros: { v: this.showZeros, type: Boolean },\n      defaultGridColor: { v: this.defaultGridColor, type: Boolean },\n      //TODO: I have no idea what this even is :\\\n      colorId: this.colorId,\n      rightToLeft: { v: this.rightToLeft, type: Boolean },\n      showFormulas: { v: this.showFormulas, type: Boolean },\n      showGridLines: { v: this.showGridLines, type: Boolean },\n      showOutlineSymbols: { v: this.showOutlineSymbols, type: Boolean },\n      showRowColHeaders: { v: this.showRowColHeaders, type: Boolean },\n      showRuler: { v: this.showRuler, type: Boolean },\n      showWhiteSpace: { v: this.showWhiteSpace, type: Boolean },\n      tabSelected: { v: this.tabSelected, type: Boolean },\n      viewType: this.viewType,\n      windowProtection: { v: this.windowProtection, type: Boolean },\n      zoomScale: { v: this.zoomScale, type: Boolean },\n      zoomScaleNormal: this.zoomScaleNormal,\n      zoomScalePageLayoutView: this.zoomScalePageLayoutView,\n      zoomScaleSheetLayoutView: this.zoomScaleSheetLayoutView,\n    });\n\n    sheetView.appendChild(this.pane.exportXML(doc));\n\n    sheetViews.appendChild(sheetView);\n    return sheetViews;\n  }\n}\n","export function pick(object: any, keys: string[]) {\n  return keys.reduce((obj: any, key: string) => {\n    if (object?.hasOwnProperty(key)) {\n      obj[key] = object[key];\n    }\n    return obj;\n  }, {});\n}\n","import type { ExcelFontStyle, ExcelStyleInstruction } from '../interfaces.js';\nimport { isObject, isString } from '../utilities/isTypeOf.js';\nimport { pick } from '../utilities/pick.js';\nimport { uniqueId } from '../utilities/uniqueId.js';\nimport { Util } from './Util.js';\nimport type { XMLDOM } from './XMLDOM.js';\n\n/**\n * @module Excel/StyleSheet\n */\nexport class StyleSheet {\n  id = uniqueId('StyleSheet');\n  cellStyles = [\n    {\n      name: 'Normal',\n      xfId: '0',\n      builtinId: '0',\n    },\n  ];\n  defaultTableStyle = false;\n  differentialStyles: any[] = [{}];\n  masterCellFormats: any[] = [\n    {\n      numFmtId: 0,\n      fontId: 0,\n      fillId: 0,\n      borderId: 0,\n      xfid: 0,\n    },\n  ];\n  masterCellStyles: any[] = [\n    {\n      numFmtId: 0,\n      fontId: 0,\n      fillId: 0,\n      borderId: 0,\n    },\n  ];\n  fonts: ExcelFontStyle[] = [{}];\n  numberFormatters: any[] = [];\n  fills: any[] = [\n    {},\n    {\n      type: 'pattern',\n      patternType: 'gray125',\n      fgColor: 'FF333333',\n      bgColor: 'FF333333',\n    },\n  ];\n  borders: any[] = [\n    {\n      top: {},\n      left: {},\n      right: {},\n      bottom: {},\n      diagonal: {},\n    },\n  ];\n  tableStyles: any[] = [];\n\n  createSimpleFormatter(type: string) {\n    const sid = this.masterCellFormats.length;\n    const style: { [id: string]: number } = {\n      id: sid,\n    };\n    switch (type) {\n      case 'date':\n        style.numFmtId = 14;\n        break;\n    }\n    this.masterCellFormats.push(style);\n    return style;\n  }\n\n  createFill(fillInstructions: any) {\n    const id = this.fills.length;\n    const fill = fillInstructions;\n    fill.id = id;\n    this.fills.push(fill);\n    return fill;\n  }\n\n  createNumberFormatter(formatInstructions: any) {\n    const id = this.numberFormatters.length + 100;\n    const format = {\n      id: id,\n      formatCode: formatInstructions,\n    };\n    this.numberFormatters.push(format);\n    return format;\n  }\n\n  /**\n   * alignment: {\n   *  horizontal: http://www.schemacentral.com/sc/ooxml/t-ssml_ST_HorizontalAlignment.html\n   *  vertical: http://www.schemacentral.com/sc/ooxml/t-ssml_ST_VerticalAlignment.html\n   *  @param {Object} styleInstructions\n   */\n  createFormat(styleInstructions: ExcelStyleInstruction) {\n    const sid = this.masterCellFormats.length;\n    const style: any = {\n      id: sid,\n    };\n    if (styleInstructions.protection) {\n      style.protection = styleInstructions.protection;\n    }\n    if (styleInstructions.font && isObject(styleInstructions.font)) {\n      style.fontId = this.createFontStyle(styleInstructions.font).id;\n    } else if (styleInstructions.font) {\n      if (Number.isNaN(Number.parseInt(styleInstructions.font, 10))) {\n        throw new Error('Passing a non-numeric font id is not supported');\n      }\n      style.fontId = styleInstructions.font;\n    }\n\n    if (styleInstructions.format && isString(styleInstructions.format)) {\n      style.numFmtId = this.createNumberFormatter(styleInstructions.format).id;\n    } else if (styleInstructions.format) {\n      if (Number.isNaN(Number.parseInt(styleInstructions.format, 10))) {\n        throw new Error('Invalid number formatter id');\n      }\n      style.numFmtId = styleInstructions.format;\n    }\n\n    if (styleInstructions.border && isObject(styleInstructions.border)) {\n      style.borderId = this.createBorderFormatter(styleInstructions.border).id;\n    } else if (styleInstructions.border) {\n      if (Number.isNaN(Number.parseInt(styleInstructions.border, 10))) {\n        throw new Error('Passing a non-numeric border id is not supported');\n      }\n      style.borderId = styleInstructions.border;\n    }\n\n    if (styleInstructions.fill && isObject(styleInstructions.fill)) {\n      style.fillId = this.createFill(styleInstructions.fill).id;\n    } else if (styleInstructions.fill) {\n      if (Number.isNaN(Number.parseInt(styleInstructions.fill, 10))) {\n        throw new Error('Passing a non-numeric fill id is not supported');\n      }\n      style.fillId = styleInstructions.fill;\n    }\n\n    if (styleInstructions.alignment && isObject(styleInstructions.alignment)) {\n      style.alignment = pick(styleInstructions.alignment, [\n        'horizontal',\n        'justifyLastLine',\n        'readingOrder',\n        'relativeIndent',\n        'shrinkToFit',\n        'textRotation',\n        'vertical',\n        'wrapText',\n      ]);\n    }\n\n    this.masterCellFormats.push(style);\n    return style;\n  }\n\n  createDifferentialStyle(styleInstructions: ExcelStyleInstruction) {\n    const id = this.differentialStyles.length;\n    const style: ExcelStyleInstruction = {\n      id,\n    };\n    if (styleInstructions.font && isObject(styleInstructions.font)) {\n      style.font = styleInstructions.font;\n    }\n    if (styleInstructions.border && isObject(styleInstructions.border)) {\n      style.border = Object.assign(\n        {\n          top: {},\n          left: {},\n          right: {},\n          bottom: {},\n          diagonal: {},\n        },\n        styleInstructions.border,\n      );\n    }\n    if (styleInstructions.fill && isObject(styleInstructions.fill)) {\n      style.fill = styleInstructions.fill;\n    }\n    if (styleInstructions.alignment && isObject(styleInstructions.alignment)) {\n      style.alignment = styleInstructions.alignment;\n    }\n    if (styleInstructions.format && isString(styleInstructions.format)) {\n      style.numFmt = styleInstructions.format;\n    }\n    this.differentialStyles[id] = style;\n    return style;\n  }\n\n  /**\n   * Should be an object containing keys that match with one of the keys from this list:\n   * http://www.schemacentral.com/sc/ooxml/t-ssml_ST_TableStyleType.html\n   *\n   * The value should be a reference to a differential format (dxf)\n   * @param {Object} instructions\n   */\n  createTableStyle(instructions: any) {\n    this.tableStyles.push(instructions);\n  }\n\n  /**\n   * All params optional\n   * Expects: {\n   * top: {},\n   * left: {},\n   * right: {},\n   * bottom: {},\n   * diagonal: {},\n   * outline: boolean,\n   * diagonalUp: boolean,\n   * diagonalDown: boolean\n   * }\n   * Each border should follow:\n   * {\n   * style: styleString, http://www.schemacentral.com/sc/ooxml/t-ssml_ST_BorderStyle.html\n   * color: ARBG color (requires the A, so for example FF006666)\n   * }\n   * @param {Object} border\n   */\n  createBorderFormatter(border: any) {\n    border = { top: {}, left: {}, right: {}, bottom: {}, diagonal: {}, id: this.borders.length, ...border };\n    this.borders.push(border);\n    return border;\n  }\n\n  /**\n   * Supported font styles:\n   * bold\n   * italic\n   * underline (single, double, singleAccounting, doubleAccounting)\n   * size\n   * color\n   * fontName\n   * strike (strikethrough)\n   * outline (does this actually do anything?)\n   * shadow (does this actually do anything?)\n   * superscript\n   * subscript\n   *\n   * Color is a future goal - at the moment it's looking a bit complicated\n   * @param {Object} instructions\n   */\n  createFontStyle(instructions: ExcelFontStyle) {\n    const fontId = this.fonts.length;\n    const fontStyle: any = {\n      id: fontId,\n    };\n    if (instructions.bold) {\n      fontStyle.bold = true;\n    }\n    if (instructions.italic) {\n      fontStyle.italic = true;\n    }\n    if (instructions.superscript) {\n      fontStyle.vertAlign = 'superscript';\n    }\n    if (instructions.subscript) {\n      fontStyle.vertAlign = 'subscript';\n    }\n    if (instructions.underline) {\n      if (\n        typeof instructions.underline === 'string' &&\n        ['double', 'singleAccounting', 'doubleAccounting'].includes(instructions.underline)\n      ) {\n        fontStyle.underline = instructions.underline;\n      } else {\n        fontStyle.underline = true;\n      }\n    }\n    if (instructions.strike) {\n      fontStyle.strike = true;\n    }\n    if (instructions.outline) {\n      fontStyle.outline = true;\n    }\n    if (instructions.shadow) {\n      fontStyle.shadow = true;\n    }\n    if (instructions.size) {\n      fontStyle.size = instructions.size;\n    }\n    if (instructions.color) {\n      fontStyle.color = instructions.color;\n    }\n    if (instructions.fontName) {\n      fontStyle.fontName = instructions.fontName;\n    }\n    this.fonts.push(fontStyle);\n    return fontStyle;\n  }\n\n  exportBorders(doc: XMLDOM) {\n    const borders = doc.createElement('borders');\n    borders.setAttribute('count', this.borders.length);\n\n    for (let i = 0, l = this.borders.length; i < l; i++) {\n      borders.appendChild(this.exportBorder(doc, this.borders[i]));\n    }\n    return borders;\n  }\n\n  exportBorder(doc: XMLDOM, data: any) {\n    const border = doc.createElement('border');\n    const borderGenerator = (name: string) => {\n      const b = doc.createElement(name);\n      if (data[name].style) {\n        b.setAttribute('style', data[name].style);\n      }\n      if (data[name].color) {\n        b.appendChild(this.exportColor(doc, data[name].color));\n      }\n      return b;\n    };\n    border.appendChild(borderGenerator('left'));\n    border.appendChild(borderGenerator('right'));\n    border.appendChild(borderGenerator('top'));\n    border.appendChild(borderGenerator('bottom'));\n    border.appendChild(borderGenerator('diagonal'));\n    return border;\n  }\n\n  exportColor(doc: XMLDOM, color: any) {\n    const colorEl = doc.createElement('color');\n    if (isString(color)) {\n      colorEl.setAttribute('rgb', color);\n      return colorEl;\n    }\n\n    if (color.tint !== undefined) {\n      colorEl.setAttribute('tint', color.tint);\n    }\n    if (color.auto !== undefined) {\n      colorEl.setAttribute('auto', String(!!color.auto));\n    }\n    if (color.theme !== undefined) {\n      colorEl.setAttribute('theme', color.theme);\n    }\n\n    return colorEl;\n  }\n\n  exportMasterCellFormats(doc: XMLDOM) {\n    const cellFormats = Util.createElement(doc, 'cellXfs', [['count', this.masterCellFormats.length]]);\n    for (let i = 0, l = this.masterCellFormats.length; i < l; i++) {\n      const mformat = this.masterCellFormats[i];\n      cellFormats.appendChild(this.exportCellFormatElement(doc, mformat));\n    }\n    return cellFormats;\n  }\n\n  exportMasterCellStyles(doc: XMLDOM) {\n    const records = Util.createElement(doc, 'cellStyleXfs', [['count', this.masterCellStyles.length]]);\n    for (let i = 0, l = this.masterCellStyles.length; i < l; i++) {\n      const mstyle = this.masterCellStyles[i];\n      records.appendChild(this.exportCellFormatElement(doc, mstyle));\n    }\n    return records;\n  }\n\n  exportCellFormatElement(doc: XMLDOM, styleInstructions: ExcelStyleInstruction) {\n    const xf = doc.createElement('xf');\n    const allowed = [\n      'applyAlignment',\n      'applyBorder',\n      'applyFill',\n      'applyFont',\n      'applyNumberFormat',\n      'applyProtection',\n      'borderId',\n      'fillId',\n      'fontId',\n      'numFmtId',\n      'pivotButton',\n      'quotePrefix',\n      'xfId',\n    ];\n\n    const attributes: any = Object.keys(styleInstructions).filter(key => allowed.indexOf(key) !== -1);\n    if (styleInstructions.alignment) {\n      const alignmentData = styleInstructions.alignment;\n      xf.appendChild(this.exportAlignment(doc, alignmentData));\n    }\n    if (styleInstructions.protection) {\n      xf.appendChild(this.exportProtection(doc, styleInstructions.protection));\n      xf.setAttribute('applyProtection', '1');\n    }\n    let a = attributes.length;\n    while (a--) {\n      xf.setAttribute(attributes[a], styleInstructions[attributes[a] as keyof ExcelStyleInstruction]);\n    }\n    if (styleInstructions.fillId) {\n      xf.setAttribute('applyFill', '1');\n    }\n    if (styleInstructions.fontId) {\n      xf.setAttribute('applyFont', '1');\n    }\n    if (styleInstructions.borderId) {\n      xf.setAttribute('applyBorder', '1');\n    }\n    if (styleInstructions.alignment) {\n      xf.setAttribute('applyAlignment', '1');\n    }\n    if (styleInstructions.numFmtId) {\n      xf.setAttribute('applyNumberFormat', '1');\n    }\n    if (styleInstructions.numFmtId !== undefined && styleInstructions.xfId === undefined) {\n      xf.setAttribute('xfId', '0');\n    }\n    return xf;\n  }\n\n  exportAlignment(doc: XMLDOM, alignmentData: any) {\n    const alignment = doc.createElement('alignment');\n    const someKeys = Object.keys(alignmentData);\n    for (let i = 0, l = someKeys.length; i < l; i++) {\n      alignment.setAttribute(someKeys[i], alignmentData[someKeys[i]]);\n    }\n    return alignment;\n  }\n\n  exportFonts(doc: XMLDOM) {\n    const fonts = doc.createElement('fonts');\n    fonts.setAttribute('count', String(this.fonts.length));\n    for (let i = 0, l = this.fonts.length; i < l; i++) {\n      const fd = this.fonts[i];\n      fonts.appendChild(this.exportFont(doc, fd));\n    }\n    return fonts;\n  }\n\n  exportFont(doc: XMLDOM, fd: any) {\n    const font = doc.createElement('font');\n    if (fd.size) {\n      const size = doc.createElement('sz');\n      size.setAttribute('val', fd.size);\n      font.appendChild(size);\n    }\n\n    if (fd.fontName) {\n      const fontName = doc.createElement('name');\n      fontName.setAttribute('val', fd.fontName);\n      font.appendChild(fontName);\n    }\n\n    if (fd.bold) {\n      font.appendChild(doc.createElement('b'));\n    }\n    if (fd.italic) {\n      font.appendChild(doc.createElement('i'));\n    }\n    if (fd.vertAlign) {\n      const vertAlign = doc.createElement('vertAlign');\n      vertAlign.setAttribute('val', fd.vertAlign);\n      font.appendChild(vertAlign);\n    }\n    if (fd.underline) {\n      const u = doc.createElement('u');\n      if (fd.underline !== true) {\n        u.setAttribute('val', fd.underline);\n      }\n      font.appendChild(u);\n    }\n    if (fd.strike) {\n      font.appendChild(doc.createElement('strike'));\n    }\n    if (fd.shadow) {\n      font.appendChild(doc.createElement('shadow'));\n    }\n    if (fd.outline) {\n      font.appendChild(doc.createElement('outline'));\n    }\n    if (fd.color) {\n      font.appendChild(this.exportColor(doc, fd.color));\n    }\n    return font;\n  }\n\n  exportFills(doc: XMLDOM) {\n    const fills = doc.createElement('fills');\n    fills.setAttribute('count', String(this.fills.length));\n    for (let i = 0, l = this.fills.length; i < l; i++) {\n      const fd = this.fills[i];\n      fills.appendChild(this.exportFill(doc, fd));\n    }\n    return fills;\n  }\n\n  exportFill(doc: XMLDOM, fd: any) {\n    let fillDef: any;\n    const fill = doc.createElement('fill');\n    if (fd.type === 'pattern') {\n      fillDef = this.exportPatternFill(doc, fd);\n      fill.appendChild(fillDef);\n    } else if (fd.type === 'gradient') {\n      fillDef = this.exportGradientFill(doc, fd);\n      fill.appendChild(fillDef);\n    }\n    return fill;\n  }\n\n  exportGradientFill(doc: XMLDOM, data: any) {\n    const fillDef = doc.createElement('gradientFill');\n    if (data.degree) {\n      fillDef.setAttribute('degree', data.degree);\n    } else if (data.left) {\n      fillDef.setAttribute('left', data.left);\n      fillDef.setAttribute('right', data.right);\n      fillDef.setAttribute('top', data.top);\n      fillDef.setAttribute('bottom', data.bottom);\n    }\n    const start = doc.createElement('stop');\n    start.setAttribute('position', data.start.pureAt || 0);\n    const startColor = doc.createElement('color');\n    if (typeof data.start === 'string' || data.start.color) {\n      startColor.setAttribute('rgb', data.start.color || data.start);\n    } else if (data.start.theme) {\n      startColor.setAttribute('theme', data.start.theme);\n    }\n\n    const end = doc.createElement('stop');\n    const endColor = doc.createElement('color');\n    end.setAttribute('position', data.end.pureAt || 1);\n    if (typeof data.start === 'string' || data.end.color) {\n      endColor.setAttribute('rgb', data.end.color || data.end);\n    } else if (data.end.theme) {\n      endColor.setAttribute('theme', data.end.theme);\n    }\n    start.appendChild(startColor);\n    end.appendChild(endColor);\n    fillDef.appendChild(start);\n    fillDef.appendChild(end);\n    return fillDef;\n  }\n\n  /**\n   * Pattern types: http://www.schemacentral.com/sc/ooxml/t-ssml_ST_PatternType.html\n   * @param {XMLDoc} doc\n   * @param {Object} data\n   */\n  exportPatternFill(doc: XMLDOM, data: any) {\n    const fillDef = Util.createElement(doc, 'patternFill', [['patternType', data.patternType]]);\n    if (!data.bgColor) {\n      data.bgColor = 'FFFFFFFF';\n    }\n    if (!data.fgColor) {\n      data.fgColor = 'FFFFFFFF';\n    }\n\n    const bgColor = doc.createElement('bgColor');\n    if (isString(data.bgColor)) {\n      bgColor.setAttribute('rgb', data.bgColor);\n    } else {\n      if (data.bgColor.theme) {\n        bgColor.setAttribute('theme', data.bgColor.theme);\n      } else {\n        bgColor.setAttribute('rgb', data.bgColor.rbg);\n      }\n    }\n\n    const fgColor = doc.createElement('fgColor');\n    if (isString(data.fgColor)) {\n      fgColor.setAttribute('rgb', data.fgColor);\n    } else {\n      if (data.fgColor.theme) {\n        fgColor.setAttribute('theme', data.fgColor.theme);\n      } else {\n        fgColor.setAttribute('rgb', data.fgColor.rbg);\n      }\n    }\n    fillDef.appendChild(fgColor);\n    fillDef.appendChild(bgColor);\n    return fillDef;\n  }\n\n  exportNumberFormatters(doc: XMLDOM) {\n    const formatters = doc.createElement('numFmts');\n    formatters.setAttribute('count', String(this.numberFormatters.length));\n    for (let i = 0, l = this.numberFormatters.length; i < l; i++) {\n      const fd = this.numberFormatters[i];\n      formatters.appendChild(this.exportNumberFormatter(doc, fd));\n    }\n    return formatters;\n  }\n\n  exportNumberFormatter(doc: XMLDOM, fd: any) {\n    const numFmt = doc.createElement('numFmt');\n    numFmt.setAttribute('numFmtId', fd.id);\n    numFmt.setAttribute('formatCode', fd.formatCode);\n    return numFmt;\n  }\n\n  exportCellStyles(doc: XMLDOM) {\n    const cellStyles = doc.createElement('cellStyles');\n    cellStyles.setAttribute('count', String(this.cellStyles.length));\n\n    for (let i = 0, l = this.cellStyles.length; i < l; i++) {\n      const style: any = this.cellStyles[i];\n      delete style.id; // Remove internal id\n      const record = Util.createElement(doc, 'cellStyle');\n      cellStyles.appendChild(record);\n      const attributes = Object.keys(style);\n      let a = attributes.length;\n      while (a--) {\n        record.setAttribute(attributes[a], style[attributes[a]]);\n      }\n    }\n\n    return cellStyles;\n  }\n\n  exportDifferentialStyles(doc: XMLDOM) {\n    const dxfs = doc.createElement('dxfs');\n    dxfs.setAttribute('count', String(this.differentialStyles.length));\n\n    for (let i = 0, l = this.differentialStyles.length; i < l; i++) {\n      const style = this.differentialStyles[i];\n      dxfs.appendChild(this.exportDFX(doc, style));\n    }\n\n    return dxfs;\n  }\n\n  exportDFX(doc: XMLDOM, style: any) {\n    const dxf = doc.createElement('dxf');\n    if (style.font) {\n      dxf.appendChild(this.exportFont(doc, style.font));\n    }\n    if (style.fill) {\n      dxf.appendChild(this.exportFill(doc, style.fill));\n    }\n    if (style.border) {\n      dxf.appendChild(this.exportBorder(doc, style.border));\n    }\n    if (style.numFmt) {\n      dxf.appendChild(this.exportNumberFormatter(doc, style.numFmt));\n    }\n    if (style.alignment) {\n      dxf.appendChild(this.exportAlignment(doc, style.alignment));\n    }\n    return dxf;\n  }\n\n  exportTableStyles(doc: XMLDOM) {\n    const tableStyles = doc.createElement('tableStyles');\n    tableStyles.setAttribute('count', String(this.tableStyles.length));\n    if (this.defaultTableStyle) {\n      tableStyles.setAttribute('defaultTableStyle', String(this.defaultTableStyle));\n    }\n    for (let i = 0, l = this.tableStyles.length; i < l; i++) {\n      tableStyles.appendChild(this.exportTableStyle(doc, this.tableStyles[i]));\n    }\n    return tableStyles;\n  }\n\n  exportTableStyle(doc: XMLDOM, style: { name: string; wholeTable?: number; headerRow?: number }) {\n    const tableStyle = doc.createElement('tableStyle');\n    tableStyle.setAttribute('name', style.name);\n    tableStyle.setAttribute('pivot', String(0));\n    let i = 0;\n\n    Object.entries(style).forEach(([key, value]) => {\n      if (key === 'name') {\n        return;\n      }\n      i++;\n      const styleEl = doc.createElement('tableStyleElement');\n      styleEl.setAttribute('type', key);\n      styleEl.setAttribute('dxfId', value);\n      tableStyle.appendChild(styleEl);\n    });\n    tableStyle.setAttribute('count', String(i));\n    return tableStyle;\n  }\n\n  exportProtection(doc: XMLDOM, protectionData: any) {\n    const node = doc.createElement('protection');\n    // eslint-disable-next-line no-restricted-syntax\n    for (const k in protectionData) {\n      if (k in protectionData) {\n        node.setAttribute(k, protectionData[k]);\n      }\n    }\n    return node;\n  }\n\n  toXML() {\n    const doc = Util.createXmlDoc(Util.schemas.spreadsheetml, 'styleSheet');\n    const styleSheet = doc.documentElement;\n    styleSheet.appendChild(this.exportNumberFormatters(doc));\n    styleSheet.appendChild(this.exportFonts(doc));\n    styleSheet.appendChild(this.exportFills(doc));\n    styleSheet.appendChild(this.exportBorders(doc));\n    styleSheet.appendChild(this.exportMasterCellStyles(doc));\n    styleSheet.appendChild(this.exportMasterCellFormats(doc));\n    styleSheet.appendChild(this.exportCellStyles(doc));\n    styleSheet.appendChild(this.exportDifferentialStyles(doc));\n    if (this.tableStyles.length) {\n      styleSheet.appendChild(this.exportTableStyles(doc));\n    }\n    return doc;\n  }\n}\n","import type { ExcelSortState, ExcelTableColumn } from '../interfaces.js';\nimport { isString } from '../utilities/isTypeOf.js';\nimport { uniqueId } from '../utilities/uniqueId.js';\nimport { Util } from './Util.js';\nimport type { XMLDOM } from './XMLDOM.js';\n\n/**\n * @module Excel/Table\n */\nexport class Table {\n  name = '';\n  id = '';\n  tableId = '';\n  displayName = '';\n  dataCellStyle: any = null;\n  dataDfxId: number | null = null;\n  headerRowBorderDxfId: number | null = null;\n  headerRowCellStyle: any = null;\n  headerRowCount = 1;\n  headerRowDxfId: number | null = null;\n  insertRow = false;\n  insertRowShift = false;\n  ref: any = null;\n  tableBorderDxfId: number | null = null;\n  totalsRowBorderDxfId: number | null = null;\n  totalsRowCellStyle: any = null;\n  totalsRowCount = 0;\n  totalsRowDxfId: number | null = null;\n  tableColumns: any = [];\n  autoFilter: any = null;\n  sortState: any = null;\n  styleInfo: any = {};\n\n  constructor(config?: any) {\n    this.initialize(config);\n  }\n\n  initialize(config: any) {\n    this.displayName = uniqueId('Table');\n    this.name = this.displayName;\n    this.id = this.name;\n    this.tableId = this.id.replace('Table', '');\n    Object.assign(this, config);\n  }\n\n  setReferenceRange(start: number[], end: number[]) {\n    this.ref = [start, end];\n  }\n\n  setTableColumns(columns: Array<ExcelTableColumn | string>) {\n    columns.forEach(column => {\n      this.addTableColumn(column);\n    });\n  }\n\n  /**\n   * Expects an object with the following optional properties:\n   * name (required)\n   * dataCellStyle\n   * dataDxfId\n   * headerRowCellStyle\n   * headerRowDxfId\n   * totalsRowCellStyle\n   * totalsRowDxfId\n   * totalsRowFunction\n   * totalsRowLabel\n   * columnFormula\n   * columnFormulaIsArrayType (boolean)\n   * totalFormula\n   * totalFormulaIsArrayType (boolean)\n   */\n  addTableColumn(column: ExcelTableColumn | string) {\n    if (isString(column)) {\n      column = {\n        name: column,\n      };\n    }\n    if (!column.name) {\n      throw new Error('Invalid argument for addTableColumn - minimum requirement is a name property');\n    }\n    this.tableColumns.push(column);\n  }\n\n  /**\n   * Expects an object with the following properties:\n   * caseSensitive (boolean)\n   * dataRange\n   * columnSort (assumes true)\n   * sortDirection\n   * sortRange (defaults to dataRange)\n   */\n  setSortState(state: ExcelSortState) {\n    this.sortState = state;\n  }\n\n  toXML() {\n    const doc = Util.createXmlDoc(Util.schemas.spreadsheetml, 'table');\n    const table = doc.documentElement;\n    table.setAttribute('id', this.tableId);\n    table.setAttribute('name', this.name);\n    table.setAttribute('displayName', this.displayName);\n    const s = this.ref[0];\n    const e = this.ref[1];\n    table.setAttribute('ref', `${Util.positionToLetterRef(s[0], s[1])}:${Util.positionToLetterRef(e[0], e[1])}`);\n\n    /** TOTALS **/\n    table.setAttribute('totalsRowCount', this.totalsRowCount);\n\n    /** HEADER **/\n    table.setAttribute('headerRowCount', this.headerRowCount);\n    if (this.headerRowDxfId) {\n      table.setAttribute('headerRowDxfId', this.headerRowDxfId);\n    }\n    if (this.headerRowBorderDxfId) {\n      table.setAttribute('headerRowBorderDxfId', this.headerRowBorderDxfId);\n    }\n\n    if (!this.ref) {\n      throw new Error('Needs at least a reference range');\n    }\n    if (!this.autoFilter) {\n      this.addAutoFilter(this.ref[0], this.ref[1]);\n    }\n\n    table.appendChild(this.exportAutoFilter(doc));\n\n    table.appendChild(this.exportTableColumns(doc));\n    table.appendChild(this.exportTableStyleInfo(doc));\n    return doc;\n  }\n\n  exportTableColumns(doc: XMLDOM) {\n    const tableColumns = doc.createElement('tableColumns');\n    tableColumns.setAttribute('count', this.tableColumns.length);\n    const tcs = this.tableColumns;\n    for (let i = 0, l = tcs.length; i < l; i++) {\n      const tc = tcs[i];\n      const tableColumn = doc.createElement('tableColumn');\n      tableColumn.setAttribute('id', String(i + 1));\n      tableColumn.setAttribute('name', tc.name);\n      tableColumns.appendChild(tableColumn);\n\n      if (tc.totalsRowFunction) {\n        tableColumn.setAttribute('totalsRowFunction', tc.totalsRowFunction);\n      }\n      if (tc.totalsRowLabel) {\n        tableColumn.setAttribute('totalsRowLabel', tc.totalsRowLabel);\n      }\n    }\n    return tableColumns;\n  }\n\n  exportAutoFilter(doc: XMLDOM) {\n    const autoFilter = doc.createElement('autoFilter');\n    const s = this.autoFilter[0];\n    const e = this.autoFilter[1];\n    autoFilter.setAttribute('ref', `${Util.positionToLetterRef(s[0], s[1])}:${Util.positionToLetterRef(e[0], e[1] - this.totalsRowCount)}`);\n    return autoFilter;\n  }\n\n  exportTableStyleInfo(doc: XMLDOM) {\n    const ts = this.styleInfo;\n    const tableStyle = doc.createElement('tableStyleInfo');\n    tableStyle.setAttribute('name', ts.themeStyle);\n    tableStyle.setAttribute('showFirstColumn', ts.showFirstColumn ? '1' : '0');\n    tableStyle.setAttribute('showLastColumn', ts.showLastColumn ? '1' : '0');\n    tableStyle.setAttribute('showColumnStripes', ts.showColumnStripes ? '1' : '0');\n    tableStyle.setAttribute('showRowStripes', ts.showRowStripes ? '1' : '0');\n    return tableStyle;\n  }\n\n  addAutoFilter(startRef: any, endRef: any) {\n    this.autoFilter = [startRef, endRef];\n  }\n}\n","import type { ExcelColumn, ExcelColumnFormat, ExcelColumnMetadata, ExcelMargin, ExcelStyleInstruction } from '../interfaces.js';\nimport { isObject, isString } from '../utilities/isTypeOf.js';\nimport { uniqueId } from '../utilities/uniqueId.js';\nimport type { Drawings } from './Drawings.js';\nimport { RelationshipManager } from './RelationshipManager.js';\nimport type { SharedStrings } from './SharedStrings.js';\nimport { SheetView } from './SheetView.js';\nimport type { Table } from './Table.js';\nimport { Util } from './Util.js';\nimport type { XMLDOM, XMLNode } from './XMLDOM.js';\n\ninterface CharType {\n  font?: string;\n  bold?: boolean;\n  fontSize?: number;\n  text?: string;\n  underline?: boolean;\n}\n\ninterface WorksheetOption {\n  name?: string;\n  sheetView?: SheetView;\n}\n\n/**\n * This module represents an excel worksheet in its basic form - no tables, charts, etc. Its purpose is\n * to hold data, the data's link to how it should be styled, and any links to other outside resources.\n *\n * @module Excel/Worksheet\n */\nexport class Worksheet {\n  name = '';\n  id = uniqueId('Worksheet');\n  _timezoneOffset: number;\n  relations: any = null;\n  columnFormats: ExcelColumnFormat[] = [];\n  data: (number | string | boolean | Date | null | ExcelColumnMetadata)[][] = [];\n  mergedCells: string[][] = [];\n  columns: ExcelColumn[] = [];\n  sheetProtection: any = false;\n  _headers: [left?: any, center?: any, right?: any] = [];\n  _footers: [left?: any, center?: any, right?: any] = [];\n  _tables: Table[] = [];\n  _drawings: Array<Table | Drawings> = [];\n  _orientation?: string;\n  _margin?: ExcelMargin;\n  _rowInstructions: any = {};\n  _freezePane: { xSplit?: number; ySplit?: number; cell?: string } = {};\n  sharedStrings: SharedStrings | null = null;\n\n  hyperlinks = [];\n  sheetView: SheetView;\n\n  showZeros: any = null;\n\n  constructor(config: WorksheetOption) {\n    this._timezoneOffset = new Date().getTimezoneOffset() * 60 * 1000;\n    this.sheetView = config.sheetView || new SheetView();\n\n    this.initialize(config);\n  }\n\n  initialize(config: any) {\n    config = config || {};\n    this.name = config.name;\n    this.id = uniqueId('Worksheet');\n    this._timezoneOffset = new Date().getTimezoneOffset() * 60 * 1000;\n    if (config.columns) {\n      this.setColumns(config.columns);\n    }\n\n    this.relations = new RelationshipManager();\n  }\n\n  /**\n   * Returns an object that can be consumed by a Worksheet/Export/Worker\n   * @returns {Object}\n   */\n  exportData() {\n    return {\n      relations: this.relations.exportData(),\n      columnFormats: this.columnFormats,\n      data: this.data,\n      columns: this.columns,\n      mergedCells: this.mergedCells,\n      _headers: this._headers,\n      _footers: this._footers,\n      _tables: this._tables,\n      _rowInstructions: this._rowInstructions,\n      _freezePane: this._freezePane,\n      name: this.name,\n      id: this.id,\n    };\n  }\n\n  /**\n   * Imports data - to be used while inside of a WorksheetExportWorker.\n   * @param {Object} data\n   */\n  importData(data: any) {\n    this.relations.importData(data.relations);\n    delete data.relations;\n    Object.assign(this, data);\n  }\n\n  setSharedStringCollection(stringCollection: SharedStrings) {\n    this.sharedStrings = stringCollection;\n  }\n\n  addTable(table: Table) {\n    this._tables.push(table);\n    this.relations.addRelation(table, 'table');\n  }\n\n  addDrawings(drawings: Drawings) {\n    this._drawings.push(drawings);\n    this.relations.addRelation(drawings, 'drawingRelationship');\n  }\n\n  setRowInstructions(rowIndex: number, instructions: ExcelStyleInstruction) {\n    this._rowInstructions[rowIndex] = instructions;\n  }\n\n  /**\n   * Expects an array length of three.\n   *\n   * @see Excel/Worksheet compilePageDetailPiece\n   * @see <a href='/cookbook/addingHeadersAndFooters.html'>Adding headers and footers to a worksheet</a>\n   *\n   * @param {Array} headers [left, center, right]\n   */\n  setHeader(headers: [left: any, center: any, right: any]) {\n    if (!Array.isArray(headers)) {\n      throw 'Invalid argument type - setHeader expects an array of three instructions';\n    }\n    this._headers = headers;\n  }\n\n  /**\n   * Expects an array length of three.\n   *\n   * @see Excel/Worksheet compilePageDetailPiece\n   * @see <a href='/cookbook/addingHeadersAndFooters.html'>Adding headers and footers to a worksheet</a>\n   *\n   * @param {Array} footers [left, center, right]\n   */\n  setFooter(footers: [left: any, center: any, right: any]) {\n    if (!Array.isArray(footers)) {\n      throw 'Invalid argument type - setFooter expects an array of three instructions';\n    }\n    this._footers = footers;\n  }\n\n  /**\n   * Turns page header/footer details into the proper format for Excel.\n   * @param {type} data\n   * @returns {String}\n   */\n  compilePageDetailPackage(data: any) {\n    data = data || '';\n    return [\n      '&L',\n      this.compilePageDetailPiece(data[0] || ''),\n      '&C',\n      this.compilePageDetailPiece(data[1] || ''),\n      '&R',\n      this.compilePageDetailPiece(data[2] || ''),\n    ].join('');\n  }\n\n  /**\n   * Turns instructions on page header/footer details into something\n   * usable by Excel.\n   *\n   * @param {type} data\n   * @returns {String|@exp;_@call;reduce}\n   */\n  compilePageDetailPiece(data: string | CharType | any[]): any {\n    if (isString(data)) {\n      return '&\"-,Regular\"'.concat(data);\n    }\n    if (isObject(data) && !Array.isArray(data)) {\n      let string = '';\n      if ((data as CharType).font || (data as CharType).bold) {\n        const weighting = (data as CharType).bold ? 'Bold' : 'Regular';\n        string += `&\"${(data as CharType).font || '-'}`;\n        string += `,${weighting}\"`;\n      } else {\n        string += '&\"-,Regular\"';\n      }\n      if ((data as CharType).underline) {\n        string += '&U';\n      }\n      if ((data as CharType).fontSize) {\n        string += `&${(data as CharType).fontSize}`;\n      }\n      string += (data as CharType).text;\n\n      return string;\n    }\n\n    if (Array.isArray(data)) {\n      return data.reduce((m, v) => m.concat(this.compilePageDetailPiece(v)), '');\n    }\n  }\n\n  /**\n   * Creates the header node.\n   *\n   * @todo implement the ability to do even/odd headers\n   * @param {XML Doc} doc\n   * @returns {XML Node}\n   */\n  exportHeader(doc: XMLDOM) {\n    const oddHeader = doc.createElement('oddHeader');\n    oddHeader.appendChild(doc.createTextNode(this.compilePageDetailPackage(this._headers)));\n    return oddHeader;\n  }\n\n  /**\n   * Creates the footer node.\n   *\n   * @todo implement the ability to do even/odd footers\n   * @param {XML Doc} doc\n   * @returns {XML Node}\n   */\n  exportFooter(doc: XMLDOM) {\n    const oddFooter = doc.createElement('oddFooter');\n    oddFooter.appendChild(doc.createTextNode(this.compilePageDetailPackage(this._footers)));\n    return oddFooter;\n  }\n\n  /**\n   * This creates some nodes ahead of time, which cuts down on generation time due to\n   * most cell definitions being essentially the same, but having multiple nodes that need\n   * to be created. Cloning takes less time than creation.\n   *\n   * @private\n   * @param {XML Doc} doc\n   * @returns {_L8.Anonym$0._buildCache.Anonym$2}\n   */\n  _buildCache(doc: XMLDOM) {\n    const numberNode = doc.createElement('c');\n    const value = doc.createElement('v');\n    value.appendChild(doc.createTextNode('--temp--'));\n    numberNode.appendChild(value);\n\n    const formulaNode = doc.createElement('c');\n    const formulaValue = doc.createElement('f');\n    formulaValue.appendChild(doc.createTextNode('--temp--'));\n    formulaNode.appendChild(formulaValue);\n\n    const stringNode = doc.createElement('c');\n    stringNode.setAttribute('t', 's');\n    const stringValue = doc.createElement('v');\n    stringValue.appendChild(doc.createTextNode('--temp--'));\n    stringNode.appendChild(stringValue);\n\n    return {\n      number: numberNode,\n      date: numberNode,\n      string: stringNode,\n      formula: formulaNode,\n    };\n  }\n\n  /**\n   * Runs through the XML document and grabs all of the strings that will\n   * be sent to the 'shared strings' document.\n   *\n   * @returns {Array}\n   */\n  collectSharedStrings() {\n    const data = this.data;\n    let maxX = 0;\n    const strings: any = {};\n    for (let row = 0, l = data.length; row < l; row++) {\n      const dataRow = data[row];\n      const cellCount = dataRow.length;\n      maxX = cellCount > maxX ? cellCount : maxX;\n      for (let c = 0; c < cellCount; c++) {\n        let cellValue = dataRow[c];\n        const metadata = (cellValue as ExcelColumnMetadata)?.metadata || {};\n        if (cellValue && typeof cellValue === 'object') {\n          cellValue = (cellValue as ExcelColumnMetadata).value;\n        }\n\n        if (!metadata.type) {\n          if (typeof cellValue === 'number') {\n            metadata.type = 'number';\n          }\n        }\n        if (metadata.type === 'text' || !metadata.type) {\n          if (typeof strings[cellValue as string] === 'undefined') {\n            strings[cellValue as string] = true;\n          }\n        }\n      }\n    }\n    return Object.keys(strings);\n  }\n\n  toXML() {\n    const data = this.data;\n    const columns = this.columns || [];\n    const doc = Util.createXmlDoc(Util.schemas.spreadsheetml, 'worksheet');\n    const worksheet = doc.documentElement;\n    let i: number;\n    let l: number;\n    let row: number;\n    worksheet.setAttribute('xmlns:r', Util.schemas.relationships);\n    worksheet.setAttribute('xmlns:mc', Util.schemas.markupCompat);\n\n    let maxX = 0;\n    const sheetData = Util.createElement(doc, 'sheetData');\n\n    const cellCache = this._buildCache(doc);\n\n    for (row = 0, l = data.length; row < l; row++) {\n      const dataRow = data[row];\n      const cellCount = dataRow.length;\n      maxX = cellCount > maxX ? cellCount : maxX;\n      const rowNode = doc.createElement('row');\n\n      for (let c = 0; c < cellCount; c++) {\n        columns[c] = columns[c] || {};\n        let cellValue = dataRow[c];\n        let cell: any;\n        const metadata = (cellValue as ExcelColumnMetadata)?.metadata || {};\n\n        if (cellValue && typeof cellValue === 'object') {\n          cellValue = (cellValue as ExcelColumnMetadata).value;\n        }\n\n        if (!metadata.type) {\n          if (typeof cellValue === 'number') {\n            metadata.type = 'number';\n          }\n        }\n\n        switch (metadata.type) {\n          case 'number':\n            cell = cellCache.number.cloneNode(true);\n            cell.firstChild.firstChild.nodeValue = cellValue;\n            break;\n          case 'date':\n            cell = cellCache.date.cloneNode(true);\n            if (cellValue instanceof Date) {\n              cellValue = cellValue.getTime();\n            }\n            cell.firstChild.firstChild.nodeValue = 25569.0 + ((cellValue as number) - this._timezoneOffset) / (60 * 60 * 24 * 1000);\n            break;\n          case 'formula':\n            cell = cellCache.formula.cloneNode(true);\n            cell.firstChild.firstChild.nodeValue = cellValue as string;\n            break;\n          // biome-ignore lint: original implementation\n          case 'text':\n          /*falls through*/\n          default: {\n            let id: number | undefined;\n            if (typeof this.sharedStrings?.strings[cellValue as string] !== 'undefined') {\n              id = this.sharedStrings.strings[cellValue as string];\n            } else {\n              id = this.sharedStrings?.addString(cellValue as string);\n            }\n            cell = cellCache.string.cloneNode(true);\n            cell.firstChild.firstChild.nodeValue = id;\n            break;\n          }\n        }\n        if (metadata.style) {\n          cell.setAttribute('s', metadata.style);\n        } else if (this._rowInstructions[row]?.style !== undefined) {\n          cell.setAttribute('s', this._rowInstructions[row].style);\n        }\n        cell.setAttribute('r', Util.positionToLetterRef(c + 1, String(row + 1)));\n        rowNode.appendChild(cell);\n      }\n      rowNode.setAttribute('r', row + 1);\n\n      if (this._rowInstructions[row]) {\n        const rowInst = this._rowInstructions[row];\n\n        if (rowInst.height !== undefined) {\n          rowNode.setAttribute('customHeight', '1');\n          rowNode.setAttribute('ht', rowInst.height);\n        }\n\n        if (rowInst.style !== undefined) {\n          rowNode.setAttribute('customFormat', '1');\n          rowNode.setAttribute('s', rowInst.style);\n        }\n      }\n\n      sheetData.appendChild(rowNode);\n    }\n\n    if (maxX !== 0) {\n      worksheet.appendChild(\n        Util.createElement(doc, 'dimension', [\n          ['ref', `${Util.positionToLetterRef(1, 1)}:${Util.positionToLetterRef(maxX, String(data.length))}`],\n        ]),\n      );\n    } else {\n      worksheet.appendChild(Util.createElement(doc, 'dimension', [['ref', Util.positionToLetterRef(1, 1)]]));\n    }\n\n    worksheet.appendChild(this.sheetView.exportXML(doc));\n\n    if (this.columns.length) {\n      worksheet.appendChild(this.exportColumns(doc));\n    }\n    worksheet.appendChild(sheetData);\n\n    // The spec doesn't say anything about this, but Excel 2013 requires sheetProtection immediately after sheetData\n    if (this.sheetProtection) {\n      worksheet.appendChild(this.sheetProtection.exportXML(doc));\n    }\n\n    /**\n     * Doing this a bit differently, as hyperlinks could be as populous as rows. Looping twice would be bad.\n     */\n    if (this.hyperlinks.length > 0) {\n      const hyperlinksEl = doc.createElement('hyperlinks');\n      const hyperlinks = this.hyperlinks;\n      for (i = 0, l = hyperlinks.length; i < l; i++) {\n        const hyperlinkEl = doc.createElement('hyperlink');\n        const hyperlink: any = hyperlinks[i];\n        hyperlinkEl.setAttribute('ref', String(hyperlink.cell));\n        hyperlink.id = Util.uniqueId('hyperlink');\n        this.relations.addRelation(\n          {\n            id: hyperlink.id,\n            target: hyperlink.location,\n            targetMode: hyperlink.targetMode || 'External',\n          },\n          'hyperlink',\n        );\n        hyperlinkEl.setAttribute('r:id', this.relations.getRelationshipId(hyperlink));\n        hyperlinksEl.appendChild(hyperlinkEl);\n      }\n      worksheet.appendChild(hyperlinksEl);\n    }\n\n    // 'mergeCells' should be written before 'headerFoot' and 'drawing' due to issue\n    // with Microsoft Excel (2007, 2013)\n    if (this.mergedCells.length > 0) {\n      const mergeCells = doc.createElement('mergeCells');\n      for (i = 0, l = this.mergedCells.length; i < l; i++) {\n        const mergeCell = doc.createElement('mergeCell');\n        mergeCell.setAttribute('ref', `${this.mergedCells[i][0]}:${this.mergedCells[i][1]}`);\n        mergeCells.appendChild(mergeCell);\n      }\n      worksheet.appendChild(mergeCells);\n    }\n\n    this.exportPageSettings(doc, worksheet);\n\n    if (this._headers.length > 0 || this._footers.length > 0) {\n      const headerFooter = doc.createElement('headerFooter');\n      if (this._headers.length > 0) {\n        headerFooter.appendChild(this.exportHeader(doc));\n      }\n      if (this._footers.length > 0) {\n        headerFooter.appendChild(this.exportFooter(doc));\n      }\n      worksheet.appendChild(headerFooter);\n    }\n\n    // the 'drawing' element should be written last, after 'headerFooter', 'mergeCells', etc. due\n    // to issue with Microsoft Excel (2007, 2013)\n    for (i = 0, l = this._drawings.length; i < l; i++) {\n      const drawing = doc.createElement('drawing');\n      drawing.setAttribute('r:id', this.relations.getRelationshipId(this._drawings[i]));\n      worksheet.appendChild(drawing);\n    }\n\n    if (this._tables.length > 0) {\n      const tables = doc.createElement('tableParts');\n      tables.setAttribute('count', this._tables.length);\n      for (i = 0, l = this._tables.length; i < l; i++) {\n        const table = doc.createElement('tablePart');\n        table.setAttribute('r:id', this.relations.getRelationshipId(this._tables[i]));\n        tables.appendChild(table);\n      }\n      worksheet.appendChild(tables);\n    }\n    return doc;\n  }\n\n  /**\n   *\n   * @param {XML Doc} doc\n   * @returns {XML Node}\n   */\n  exportColumns(doc: XMLDOM) {\n    const cols = Util.createElement(doc, 'cols');\n    for (let i = 0, l = this.columns.length; i < l; i++) {\n      const cd = this.columns[i];\n      const col = Util.createElement(doc, 'col', [\n        ['min', cd.min || i + 1],\n        ['max', cd.max || i + 1],\n      ]);\n      if (cd.hidden) {\n        col.setAttribute('hidden', String(1));\n      }\n      if (cd.bestFit) {\n        col.setAttribute('bestFit', String(1));\n      }\n      if (cd.customWidth || cd.width) {\n        col.setAttribute('customWidth', String(1));\n      }\n      if (cd.width) {\n        col.setAttribute('width', cd.width);\n      } else {\n        col.setAttribute('width', String(9.140625));\n      }\n\n      cols.appendChild(col);\n    }\n    return cols;\n  }\n\n  /**\n   * Sets the page settings on a worksheet node.\n   *\n   * @param {XML Doc} doc\n   * @param {XML Node} worksheet\n   * @returns {undefined}\n   */\n  exportPageSettings(doc: XMLDOM, worksheet: XMLNode) {\n    if (this._margin) {\n      let defaultVal = 0.7;\n      const left = this._margin.left ? this._margin.left : defaultVal;\n      const right = this._margin.right ? this._margin.right : defaultVal;\n      const top = this._margin.top ? this._margin.top : defaultVal;\n      const bottom = this._margin.bottom ? this._margin.bottom : defaultVal;\n      defaultVal = 0.3;\n      const header = this._margin.header ? this._margin.header : defaultVal;\n      const footer = this._margin.footer ? this._margin.footer : defaultVal;\n\n      worksheet.appendChild(\n        Util.createElement(doc, 'pageMargins', [\n          ['top', top],\n          ['bottom', bottom],\n          ['left', left],\n          ['right', right],\n          ['header', header],\n          ['footer', footer],\n        ]),\n      );\n    }\n    if (this._orientation) {\n      worksheet.appendChild(Util.createElement(doc, 'pageSetup', [['orientation', this._orientation]]));\n    }\n  }\n\n  /**\n   * http://www.schemacentral.com/sc/ooxml/t-ssml_ST_Orientation.html\n   *\n   * Can be one of 'portrait' or 'landscape'.\n   *\n   * @param {'default' | 'portrait' | 'landscape'} orientation\n   * @returns {undefined}\n   */\n  setPageOrientation(orientation: 'default' | 'portrait' | 'landscape') {\n    this._orientation = orientation;\n  }\n\n  /**\n   * Set page details in inches.\n   * use this structure:\n   * {\n   *   top: 0.7\n   *   , bottom: 0.7\n   *   , left: 0.7\n   *   , right: 0.7\n   *   , header: 0.3\n   *   , footer: 0.3\n   * }\n   *\n   * @returns {undefined}\n   */\n  setPageMargin(input: ExcelMargin) {\n    this._margin = input;\n  }\n\n  /**\n   * Expects an array of column definitions. Each column definition needs to have a width assigned to it.\n   *\n   * @param {Array} columns\n   */\n  setColumns(columns: ExcelColumn[]) {\n    this.columns = columns;\n  }\n\n  /**\n   * Expects an array of data to be translated into cells.\n   *\n   * @param {Array} data Two dimensional array - [ [A1, A2], [B1, B2] ]\n   * @see <a href='/cookbook/addingDataToAWorksheet.html'>Adding data to a worksheet</a>\n   */\n  setData(data: (number | string | boolean | Date | null | ExcelColumnMetadata)[][]) {\n    this.data = data;\n  }\n\n  /**\n   * Merge cells in given range\n   *\n   * @param cell1 - A1, A2...\n   * @param cell2 - A2, A3...\n   */\n  mergeCells(cell1: string, cell2: string) {\n    this.mergedCells.push([cell1, cell2]);\n  }\n\n  /**\n   * Added frozen pane\n   * @param column - column number: 0, 1, 2 ...\n   * @param row - row number: 0, 1, 2 ...\n   * @param cell - 'A1'\n   * @deprecated\n   */\n  freezePane(column: number, row: number, cell: string) {\n    this.sheetView.freezePane(column, row, cell);\n  }\n\n  /**\n   * Expects an array containing an object full of column format definitions.\n   * http://msdn.microsoft.com/en-us/library/documentformat.openxml.spreadsheet.column.aspx\n   * bestFit\n   * collapsed\n   * customWidth\n   * hidden\n   * max\n   * min\n   * outlineLevel\n   * phonetic\n   * style\n   * width\n   * @param {Array} columnFormats\n   */\n  setColumnFormats(columnFormats: ExcelColumnFormat[]) {\n    this.columnFormats = columnFormats;\n  }\n}\n","import { uniqueId } from '../utilities/uniqueId.js';\nimport type { Drawings } from './Drawings.js';\nimport { Paths } from './Paths.js';\nimport { RelationshipManager } from './RelationshipManager.js';\nimport { SharedStrings } from './SharedStrings.js';\nimport { StyleSheet } from './StyleSheet.js';\nimport type { Table } from './Table.js';\nimport { Util } from './Util.js';\nimport { Worksheet } from './Worksheet.js';\nimport { XMLDOM } from './XMLDOM.js';\n\nexport interface MediaMeta {\n  id: string;\n  data: string;\n  fileName: string;\n  contentType: string | null;\n  extension: string;\n  rId?: string;\n}\n\n/**\n * @module Excel/Workbook\n */\n/* globals console: true */\nexport class Workbook {\n  id = uniqueId('Workbook');\n  styleSheet = new StyleSheet();\n  sharedStrings = new SharedStrings();\n  relations = new RelationshipManager();\n  worksheets: Worksheet[] = [];\n  tables: Table[] = [];\n  drawings: Drawings[] = [];\n  media: { [filename: string]: MediaMeta } = {};\n  printTitles: any;\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize() {\n    this.id = uniqueId('Workbook');\n    this.styleSheet = new StyleSheet();\n    this.sharedStrings = new SharedStrings();\n    this.relations = new RelationshipManager();\n    this.relations.addRelation(this.styleSheet, 'stylesheet');\n    this.relations.addRelation(this.sharedStrings, 'sharedStrings');\n  }\n\n  createWorksheet(config?: any) {\n    config = Object.assign({}, { name: 'Sheet '.concat(String(this.worksheets.length + 1)) }, config);\n    return new Worksheet(config);\n  }\n\n  getStyleSheet() {\n    return this.styleSheet;\n  }\n\n  addTable(table: Table) {\n    this.tables.push(table);\n  }\n\n  addDrawings(drawings: Drawings) {\n    this.drawings.push(drawings);\n  }\n\n  /**\n   * Set number of rows to repeat for this sheet.\n   *\n   * @param {String} sheet name\n   * @param {int} number of rows to repeat from the top\n   * @returns {undefined}\n   */\n  setPrintTitleTop(inSheet: string, inRowCount: number) {\n    if (this.printTitles == null) {\n      this.printTitles = {};\n    }\n    if (this.printTitles[inSheet] == null) {\n      this.printTitles[inSheet] = {};\n    }\n    this.printTitles[inSheet].top = inRowCount;\n  }\n\n  /**\n   * Set number of rows to repeat for this sheet.\n   *\n   * @param {String} sheet name\n   * @param {int} number of columns to repeat from the left\n   * @returns {undefined}\n   */\n  setPrintTitleLeft(inSheet: string, inRowCount: number) {\n    if (this.printTitles == null) {\n      this.printTitles = {};\n    }\n    if (this.printTitles[inSheet] == null) {\n      this.printTitles[inSheet] = {};\n    }\n    //WARN: this does not handle AA, AB, etc.\n    this.printTitles[inSheet].left = String.fromCharCode(64 + inRowCount);\n  }\n\n  addMedia(_type: string, fileName: string, fileData: any, contentType?: string | null) {\n    const fileNamePieces = fileName.split('.');\n    const extension = fileNamePieces[fileNamePieces.length - 1];\n    if (!contentType) {\n      switch (extension.toLowerCase()) {\n        case 'jpeg':\n        case 'jpg':\n          contentType = 'image/jpeg';\n          break;\n        case 'png':\n          contentType = 'image/png';\n          break;\n        case 'gif':\n          contentType = 'image/gif';\n          break;\n        default:\n          contentType = null;\n          break;\n      }\n    }\n    if (!this.media[fileName]) {\n      this.media[fileName] = {\n        id: fileName,\n        data: fileData,\n        fileName: fileName,\n        contentType: contentType,\n        extension: extension,\n      };\n    }\n    return this.media[fileName];\n  }\n\n  addWorksheet(worksheet: Worksheet) {\n    this.relations.addRelation(worksheet, 'worksheet');\n    worksheet.setSharedStringCollection(this.sharedStrings);\n    this.worksheets.push(worksheet);\n  }\n\n  createContentTypes() {\n    const doc = Util.createXmlDoc(Util.schemas.contentTypes, 'Types');\n    const types = doc.documentElement;\n    let i: number;\n    let l: number;\n\n    types.appendChild(\n      Util.createElement(doc, 'Default', [\n        ['Extension', 'rels'],\n        ['ContentType', 'application/vnd.openxmlformats-package.relationships+xml'],\n      ]),\n    );\n    types.appendChild(\n      Util.createElement(doc, 'Default', [\n        ['Extension', 'xml'],\n        ['ContentType', 'application/xml'],\n      ]),\n    );\n\n    const extensions: any = {};\n    for (const filename in this.media) {\n      if (filename in this.media) {\n        extensions[this.media[filename].extension] = this.media[filename].contentType;\n      }\n    }\n    for (const extension in extensions) {\n      if (extension in extensions) {\n        types.appendChild(\n          Util.createElement(doc, 'Default', [\n            ['Extension', extension],\n            ['ContentType', extensions[extension]],\n          ]),\n        );\n      }\n    }\n\n    types.appendChild(\n      Util.createElement(doc, 'Override', [\n        ['PartName', '/xl/workbook.xml'],\n        ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'],\n      ]),\n    );\n    types.appendChild(\n      Util.createElement(doc, 'Override', [\n        ['PartName', '/xl/sharedStrings.xml'],\n        ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'],\n      ]),\n    );\n    types.appendChild(\n      Util.createElement(doc, 'Override', [\n        ['PartName', '/xl/styles.xml'],\n        ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'],\n      ]),\n    );\n\n    for (i = 0, l = this.worksheets.length; i < l; i++) {\n      types.appendChild(\n        Util.createElement(doc, 'Override', [\n          ['PartName', `/xl/worksheets/sheet${i + 1}.xml`],\n          ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'],\n        ]),\n      );\n    }\n    for (i = 0, l = this.tables.length; i < l; i++) {\n      types.appendChild(\n        Util.createElement(doc, 'Override', [\n          ['PartName', `/xl/tables/table${i + 1}.xml`],\n          ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml'],\n        ]),\n      );\n    }\n\n    for (i = 0, l = this.drawings.length; i < l; i++) {\n      types.appendChild(\n        Util.createElement(doc, 'Override', [\n          ['PartName', `/xl/drawings/drawing${i + 1}.xml`],\n          ['ContentType', 'application/vnd.openxmlformats-officedocument.drawing+xml'],\n        ]),\n      );\n    }\n\n    return doc;\n  }\n\n  toXML() {\n    const doc = Util.createXmlDoc(Util.schemas.spreadsheetml, 'workbook');\n    const wb = doc.documentElement;\n    wb.setAttribute('xmlns:r', Util.schemas.relationships);\n\n    const maxWorksheetNameLength = 31;\n    const sheets = Util.createElement(doc, 'sheets');\n    for (let i = 0, l = this.worksheets.length; i < l; i++) {\n      const sheet = doc.createElement('sheet');\n      // Microsoft Excel (2007, 2013) do not allow worksheet names longer than 31 characters\n      // if the worksheet name is longer, Excel displays an \"Excel found unreadable content...\" popup when opening the file\n      if (typeof console !== 'undefined' && this.worksheets[i].name.length > maxWorksheetNameLength) {\n        console.log(\n          `Microsoft Excel requires work sheet names to be less than ${maxWorksheetNameLength + 1} characters long, work sheet name \"${\n            this.worksheets[i].name\n          }\" is ${this.worksheets[i].name.length} characters long`,\n        );\n      }\n      sheet.setAttribute('name', this.worksheets[i].name);\n      sheet.setAttribute('sheetId', i + 1);\n      sheet.setAttribute('r:id', this.relations.getRelationshipId(this.worksheets[i]));\n      sheets.appendChild(sheet);\n    }\n    wb.appendChild(sheets);\n\n    //now to add repeating rows\n    const definedNames = Util.createElement(doc, 'definedNames');\n    let ctr = 0;\n    for (const name in this.printTitles) {\n      if (name in this.printTitles) {\n        const entry = this.printTitles[name];\n        const definedName = doc.createElement('definedName');\n        definedName.setAttribute('name', '_xlnm.Print_Titles');\n        definedName.setAttribute('localSheetId', ctr++);\n\n        let value = '';\n        if (entry.top) {\n          value += `${name}!$1:$${entry.top}`;\n          if (entry.left) {\n            value += ',';\n          }\n        }\n        if (entry.left) {\n          value += `${name}!$A:$${entry.left}`;\n        }\n\n        definedName.appendChild(doc.createTextNode(value));\n        definedNames.appendChild(definedName);\n      }\n    }\n    wb.appendChild(definedNames);\n\n    return doc;\n  }\n\n  createWorkbookRelationship() {\n    const doc = Util.createXmlDoc(Util.schemas.relationshipPackage, 'Relationships');\n    const relationships = doc.documentElement;\n    relationships.appendChild(\n      Util.createElement(doc, 'Relationship', [\n        ['Id', 'rId1'],\n        ['Type', Util.schemas.officeDocument],\n        ['Target', 'xl/workbook.xml'],\n      ]),\n    );\n    return doc;\n  }\n\n  _generateCorePaths(files: any) {\n    let i: number;\n    let l: number;\n    Paths[this.styleSheet.id] = 'styles.xml';\n    Paths[this.sharedStrings.id] = 'sharedStrings.xml';\n    Paths[this.id] = '/xl/workbook.xml';\n\n    for (i = 0, l = this.tables.length; i < l; i++) {\n      files[`/xl/tables/table${i + 1}.xml`] = this.tables[i].toXML();\n      Paths[this.tables[i].id] = `/xl/tables/table${i + 1}.xml`;\n    }\n\n    for (const fileName in this.media) {\n      if (fileName in this.media) {\n        const media = this.media[fileName];\n        files[`/xl/media/${fileName}`] = media.data;\n        Paths[fileName] = `/xl/media/${fileName}`;\n      }\n    }\n\n    for (i = 0, l = this.drawings.length; i < l; i++) {\n      files[`/xl/drawings/drawing${i + 1}.xml`] = this.drawings[i].toXML();\n      Paths[this.drawings[i].id] = `/xl/drawings/drawing${i + 1}.xml`;\n      files[`/xl/drawings/_rels/drawing${i + 1}.xml.rels`] = this.drawings[i].relations.toXML();\n    }\n  }\n\n  _prepareFilesForPackaging(files: { [path: string]: XMLDOM | string }) {\n    Object.assign(files, {\n      '/[Content_Types].xml': this.createContentTypes(),\n      '/_rels/.rels': this.createWorkbookRelationship(),\n      '/xl/styles.xml': this.styleSheet.toXML(),\n      '/xl/workbook.xml': this.toXML(),\n      '/xl/sharedStrings.xml': this.sharedStrings.toXML(),\n      '/xl/_rels/workbook.xml.rels': this.relations.toXML(),\n    });\n\n    for (const [key, value] of Object.entries(files)) {\n      if (key.indexOf('.xml') !== -1 || key.indexOf('.rels') !== -1) {\n        if (value instanceof XMLDOM) {\n          files[key] = value.toString();\n        } else {\n          files[key] = (value as any).xml || new window.XMLSerializer().serializeToString(value as any);\n        }\n        let content = (files[key] as string).replace(/xmlns=\"\"/g, '');\n        content = content.replace(/NS[\\d]+:/g, '');\n        content = content.replace(/xmlns:NS[\\d]+=\"\"/g, '');\n        files[key] = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n${content}`;\n      }\n    }\n  }\n\n  generateFiles(): Promise<{ [path: string]: string }> {\n    return new Promise(resolve => {\n      const files: any = {};\n      this._generateCorePaths(files);\n\n      for (let i = 0, l = this.worksheets.length; i < l; i++) {\n        files[`/xl/worksheets/sheet${i + 1}.xml`] = this.worksheets[i].toXML();\n        Paths[this.worksheets[i].id] = `worksheets/sheet${i + 1}.xml`;\n        files[`/xl/worksheets/_rels/sheet${i + 1}.xml.rels`] = this.worksheets[i].relations.toXML();\n      }\n\n      this._prepareFilesForPackaging(files);\n\n      return resolve(files);\n    });\n  }\n}\n","import { type ZipOptions, strToU8, zip } from 'fflate';\n\nimport { Workbook } from './Excel/Workbook.js';\n\ntype InferOutputByType<T extends 'Blob' | 'Uint8Array'> = T extends 'Blob' ? Blob : T extends 'Uint8Array' ? Uint8Array : any;\n\n/**\n * Creates a new workbook.\n */\nexport function createWorkbook() {\n  return new Workbook();\n}\n\n/**\n * Convert a `base64` string to a `Uint8Array`\n * @param {String} - base64 string\n * @returns {Uint8Array} - returns a Uint8Array output\n */\nexport function base64ToUint8Array(base64String: string) {\n  const base64url = base64String.replace(/-/g, '+').replace(/_/g, '/');\n  const missingPadding = '='.repeat((4 - (base64url.length % 4)) % 4);\n  const base64 = base64url + missingPadding;\n  const base64decoded = atob(base64);\n  return Uint8Array.from(base64decoded, char => char.charCodeAt(0));\n}\n\n/**\n * Turns a workbook into a downloadable file, you can between a 'Blob' or 'Uint8Array',\n * and if nothing is provided then 'Blob' will be the default\n * @param {Excel/Workbook} workbook - The workbook that is being converted\n * @param {'Uint8Array' | 'Blob'} [outputType='Blob'] - defaults to 'Blob'\n * @param {Object} [options]\n *   - `fileFormat` defaults to \"xlsx\"\n *   - `mimeType`: a mime type can be provided by the user or auto-detect the mime when undefined (by file extension .xls/.xlsx)\n *      (user can pass an empty string to completely cancel the mime type altogether)\n *   - `zipOptions` to specify any `fflate` options to modify how the zip is created.\n * @returns {Promise}\n */\nexport function createExcelFile<T extends 'Blob' | 'Uint8Array' = 'Blob'>(\n  workbook: Workbook,\n  outputType?: T,\n  options?: { fileFormat?: 'xls' | 'xlsx'; mimeType?: string; zipOptions?: ZipOptions },\n): Promise<InferOutputByType<T>> {\n  const zipObj: { [name: string]: Uint8Array } = {};\n\n  return new Promise((resolve, reject) => {\n    workbook.generateFiles().then(files => {\n      for (const [path, content] of Object.entries(files)) {\n        const outPath = path.substr(1);\n        if (path.indexOf('.xml') !== -1 || path.indexOf('.rel') !== -1) {\n          zipObj[outPath] = strToU8(content); // regular cells except images\n        } else {\n          zipObj[outPath] = base64ToUint8Array(content); // images\n        }\n      }\n\n      return zip(zipObj, options?.zipOptions || {}, (err, data) => {\n        /* v8 ignore next 4 */\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        if (outputType === 'Uint8Array') {\n          resolve(data as InferOutputByType<T>);\n        } else {\n          const format = options?.fileFormat ?? 'xlsx';\n          let mimeType = options?.mimeType;\n          if (mimeType === undefined) {\n            mimeType = format === 'xls' ? 'application/vnd.ms-excel' : 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n          }\n          resolve(new Blob([data], { type: mimeType }) as InferOutputByType<T>);\n        }\n      });\n    });\n  });\n}\n\n/**\n * Download Excel file, currently only supports a \"browser\" as `downloadType`\n * but it could be expended in the future to also other type of platform like NodeJS for example.\n * @param {Workbook} workbook\n * @param {String} filename - filename (must also include file extension, xls/xlsx)\n * @param {Object} [options]\n *   - `downloadType`: download type (browser/node), currently only a \"browser\" download as a Blob\n *   - `mimeType`: a mime type can be provided by the user or auto-detect the mime when undefined (by file extension .xls/.xlsx)\n *      (user can pass an empty string to completely cancel the mime type altogether)\n *   - `zipOptions` to specify any `fflate` options to modify how the zip is created.\n */\nexport function downloadExcelFile(\n  workbook: Workbook,\n  filename: string,\n  options?: { downloadType?: 'browser' | 'node'; mimeType?: string; zipOptions?: ZipOptions },\n) {\n  if (options?.downloadType === 'node') {\n    throw new Error(\n      '[Excel-Builder-Vanilla] Please note that `downloadExcelFile()` is currently only supporting the \"browser\" download type at the moment.',\n    );\n  }\n\n  // start downloading but add the Blob property only on the download start instead of the event itself\n  // Note: we call the Promise with `.then()` for perf reason since `fflate.zip` can use Web Worker but `fflate.zipAsync` cannot\n  const fileFormat = filename.match(/.*\\.xls$/) ? 'xls' : 'xlsx';\n  return createExcelFile(workbook, 'Blob', { ...options, fileFormat }).then(excelBlob => {\n    downloadFileToBrowser(filename, excelBlob);\n  });\n}\n\n/**\n * Download Excel file, currently only supports a \"browser\" as `downloadType`,\n * but it could probably be expended to support other platform in the future like NodeJS for example.\n * @param {String} filename - filename (must also include file extension, xls/xlsx)\n * @param {Blob} data - compressed data object\n */\nfunction downloadFileToBrowser(filename: string, data: Blob) {\n  // this trick will generate a temp <a /> tag\n  // the code will then trigger a hidden click for it to start downloading\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(data);\n\n  if (link && document) {\n    link.textContent = 'download';\n    link.href = url;\n    link.setAttribute('download', filename);\n\n    // set the visibility to hidden so there is no effect on your web-layout\n    link.style.visibility = 'hidden';\n\n    // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n    document.body.appendChild(link);\n    link.click();\n\n    // we're done, let's delete the temp DOM element & revoke the URL object\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n}\n"],"names":["isObject","value","type","isPlainObject","proto","Ctor","isString","htmlEscapes","htmlEscape","str","m","XMLDOM","ns","rootNodeName","__publicField","name","XMLNode","text","TextNode","config","i","l","attr","string","childContent","children","val","child","_deep","_Util","space","base","doc","attributes","el","attrs","k","v","x","y","digit","index","num","alphabet","Util","AbsoluteAnchor","width","height","xmlDoc","content","root","pos","dimensions","Chart","idCounter","uniqueId","prefix","id","OneCellAnchor","xOff","yOff","from","fromCol","fromColOff","fromRow","fromRowOff","TwoCellAnchor","to","toCol","toColOff","toRow","toRowOff","Drawing","Picture","mediaRef","description","rId","pictureNode","nonVisibleProperties","nameProperties","nvPicProperties","pictureFill","stretch","shapeProperties","transform2d","presetGeometry","Paths","RelationshipManager","data","object","relationships","relationship","Drawings","drawing","drawings","Pane","column","row","cell","pane","Positioning","pixels","SharedStrings","sharedStringTable","template","templateValue","strings","clone","SheetView","conf","sheetViews","sheetView","pick","keys","obj","key","StyleSheet","style","fillInstructions","fill","formatInstructions","format","styleInstructions","instructions","border","fontStyle","borders","borderGenerator","b","color","colorEl","cellFormats","mformat","records","mstyle","xf","allowed","alignmentData","a","alignment","someKeys","fonts","fd","font","size","fontName","vertAlign","u","fills","fillDef","start","startColor","end","endColor","bgColor","fgColor","formatters","numFmt","cellStyles","record","dxfs","dxf","tableStyles","tableStyle","styleEl","protectionData","node","styleSheet","Table","columns","state","table","s","e","tableColumns","tcs","tc","tableColumn","autoFilter","ts","startRef","endRef","Worksheet","stringCollection","rowIndex","headers","footers","weighting","oddHeader","oddFooter","numberNode","formulaNode","formulaValue","stringNode","stringValue","dataRow","cellCount","c","cellValue","metadata","worksheet","maxX","sheetData","cellCache","rowNode","_a","_b","_c","rowInst","hyperlinksEl","hyperlinks","hyperlinkEl","hyperlink","mergeCells","mergeCell","headerFooter","tables","cols","cd","col","defaultVal","left","right","top","bottom","header","footer","orientation","input","cell1","cell2","columnFormats","Workbook","inSheet","inRowCount","_type","fileName","fileData","contentType","fileNamePieces","extension","types","extensions","filename","wb","maxWorksheetNameLength","sheets","sheet","definedNames","ctr","entry","definedName","files","media","resolve","createWorkbook","base64ToUint8Array","base64String","base64url","missingPadding","base64","base64decoded","char","createExcelFile","workbook","outputType","options","zipObj","reject","path","outPath","strToU8","zip","err","mimeType","downloadExcelFile","fileFormat","excelBlob","downloadFileToBrowser","link","url"],"mappings":"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"}