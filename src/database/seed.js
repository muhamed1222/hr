const { User, WorkLog } = require('../models');
const moment = require('moment');

async function seed() {
  try {
    // // console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = [
      {
        telegramId: 123456789,
        name: '–ú—É—Ö–∞–º–µ–¥ –ö–µ–ª–µ–º–µ—Ç–æ–≤',
        username: 'muhamed_dev',
        role: 'admin',
        status: 'active'
      },
      {
        telegramId: 987654321,
        name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
        username: 'anna_designer',
        role: 'manager',
        status: 'active'
      },
      {
        telegramId: 555444333,
        name: '–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤',
        username: 'sergey_backend',
        role: 'employee',
        status: 'active'
      },
      {
        telegramId: 111222333,
        name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
        username: 'maria_frontend',
        role: 'employee',
        status: 'active'
      },
      {
        telegramId: 444555666,
        name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
        username: 'alex_qa',
        role: 'employee',
        status: 'active'
      }
    ];

    const createdUsers = [];
    for (const userData of users) {
      const [user, created] = await User.findOrCreate({
        where: { telegramId: userData.telegramId },
        defaults: userData
      });
      createdUsers.push(user);
      // // console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} ${created ? '—Å–æ–∑–¥–∞–Ω' : '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);
    }

    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const workLogs = [];
    for (let i = 6; i >= 0; i--) {
      const date = moment().subtract(i, 'days').format('YYYY-MM-DD');
      
      for (const user of createdUsers) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if (moment(date).day() === 0 || moment(date).day() === 6) {
          if (Math.random() > 0.3) continue; // 30% —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏
        const arrivedHour = 8 + Math.floor(Math.random() * 2); // 8-9 —É—Ç—Ä–∞
        const arrivedMinute = Math.floor(Math.random() * 60);
        const arrivedAt = `${arrivedHour.toString().padStart(2, '0')}:${arrivedMinute.toString().padStart(2, '0')}:00`;

        const leftHour = 17 + Math.floor(Math.random() * 3); // 17-19 –≤–µ—á–µ—Ä–∞
        const leftMinute = Math.floor(Math.random() * 60);
        const leftAt = `${leftHour.toString().padStart(2, '0')}:${leftMinute.toString().padStart(2, '0')}:00`;

        const lunchStart = '13:00:00';
        const lunchEnd = '14:00:00';

        // –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        const workModes = ['office', 'remote'];
        const workMode = workModes[Math.floor(Math.random() * workModes.length)];

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        const totalMinutes = calculateWorkMinutes(arrivedAt, leftAt, lunchStart, lunchEnd);

        const workLogData = {
          userId: user.id,
          workDate: date,
          arrivedAt,
          leftAt,
          lunchStart: Math.random() > 0.1 ? lunchStart : null, // 90% –±–µ—Ä—É—Ç –æ–±–µ–¥
          lunchEnd: Math.random() > 0.1 ? lunchEnd : null,
          workMode,
          dailyReport: generateRandomReport(),
          problems: Math.random() > 0.8 ? generateRandomProblem() : null, // 20% –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã
          totalMinutes
        };

        const [workLog, created] = await WorkLog.findOrCreate({
          where: { userId: user.id, workDate: date },
          defaults: workLogData
        });

        if (created) {
          workLogs.push(workLog);
        }
      }
    }

    // // console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${workLogs.length} –∑–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏`);
    // // console.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const userCount = await User.count();
    const logCount = await WorkLog.count();
    
    // // console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    // // console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
    // // console.log(`üìù –ó–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏: ${logCount}`);
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

function calculateWorkMinutes(arrivedAt, leftAt, lunchStart, lunchEnd) {
  const arrival = moment(arrivedAt, 'HH:mm:ss');
  const departure = moment(leftAt, 'HH:mm:ss');
  let totalMinutes = departure.diff(arrival, 'minutes');

  // –í—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –æ–±–µ–¥–∞
  if (lunchStart && lunchEnd) {
    const lunchStartTime = moment(lunchStart, 'HH:mm:ss');
    const lunchEndTime = moment(lunchEnd, 'HH:mm:ss');
    const lunchMinutes = lunchEndTime.diff(lunchStartTime, 'minutes');
    totalMinutes -= lunchMinutes;
  }

  return Math.max(0, totalMinutes);
}

function generateRandomReport() {
  const reports = [
    '–†–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
    '–ò—Å–ø—Ä–∞–≤–ª—è–ª –±–∞–≥–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
    '–ü—Ä–æ–≤–æ–¥–∏–ª –∫–æ–¥-—Ä–µ–≤—å—é PR –∫–æ–ª–ª–µ–≥',
    '–°–æ–∑–¥–∞–≤–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è API',
    '–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø—Ä–∏–Ω—Ç–∞',
    '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
    '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–µ —Ñ–∏—á–∏ –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º',
    '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–ª CI/CD pipeline',
    '–†–∞–±–æ—Ç–∞–ª —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø–æ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ',
    '–ò–∑—É—á–∞–ª –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞'
  ];
  
  return reports[Math.floor(Math.random() * reports.length)];
}

function generateRandomProblem() {
  const problems = [
    '–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è',
    '–î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ–º',
    '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ',
    '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É',
    '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã–ª–æ –∂–¥–∞—Ç—å –∫–æ–¥-—Ä–µ–≤—å—é',
    '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π',
    '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞ –ø—Ä–æ–¥–µ'
  ];
  
  return problems[Math.floor(Math.random() * problems.length)];
}

seed(); 