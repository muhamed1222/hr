"use strict";

const { _info, _error, _warn, _debug } = require("../utils/logger");

const { User, _Team, WorkLog } = require("../models");
const _bcrypt = require("bcrypt");
const _moment = require("moment");

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö)
const _calculateWorkMinutes = (_arrivedAt, _leftAt, _lunchStart, _lunchEnd) => {
  // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  return 480; // 8 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
};

const _generateRandomReport = () => {
  const reports = [
    "–†–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º",
    "–ò—Å–ø—Ä–∞–≤–ª—è–ª –±–∞–≥–∏ –≤ —Å–∏—Å—Ç–µ–º–µ",
    "–ü—Ä–æ–≤–æ–¥–∏–ª –∫–æ–¥-—Ä–µ–≤—å—é",
    "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏",
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
  ];
  return reports[Math.floor(Math.random() * reports.length)];
};

const _generateRandomProblem = () => {
  const problems = [
    "–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü",
    "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π",
    "–û—à–∏–±–∫–∏ –≤ API",
    "–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –∫–æ–¥–µ",
    "–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
  ];
  return problems[Math.floor(Math.random() * problems.length)];
};

async function _seed() {
  try {
    _info("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const _created = await User.create({
      name: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
      username: "testuser",
      role: "employee",
      status: "active",
      telegramId: 123456789,
    });

    _info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã
    const _userCount = await User.count();
    const _logCount = await WorkLog.count();

    _info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${_userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${_logCount} –ª–æ–≥–æ–≤`);

    _info("‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    process.exit(0);
  } catch (error) {
    _error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    process.exit(1);
  }
}
