const TelegramBot = require('node-telegram-bot-api');
const { User, WorkLog } = require('../models');
const moment = require('moment');
require('dotenv').config();

moment.locale('ru');

class TimeBot {
  constructor() {
    this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
    this.setupCommands();
    this.setupCallbacks();
  }

  setupCommands() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/start/, this.handleStart.bind(this));
    this.bot.onText(/\/myday/, this.handleMyDay.bind(this));
    this.bot.onText(/\/myweek/, this.handleMyWeek.bind(this));
    this.bot.onText(/\/team/, this.handleTeam.bind(this));
    this.bot.onText(/\/help/, this.handleHelp.bind(this));
  }

  setupCallbacks() {
    this.bot.on('callback_query', this.handleCallback.bind(this));
  }

  async handleStart(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    const name = `${msg.from.first_name} ${msg.from.last_name || ''}`.trim();
    const username = msg.from.username;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      let user = await User.findOne({ where: { telegramId } });
      
      if (!user) {
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await User.create({
          telegramId,
          name,
          username,
          role: 'employee',
          status: 'active'
        });
        
        await this.bot.sendMessage(chatId, 
          `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Outcast TimeBot, ${name}!\n\n` +
          `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏.`
        );
      } else {
        await this.bot.sendMessage(chatId, 
          `üéØ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${name}!\n\n` +
          `–í–∞—à —Å—Ç–∞—Ç—É—Å: ${this.getRoleText(user.role)}`
        );
      }

      await this.sendMainMenu(chatId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handleMyDay(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    try {
      const user = await this.getUser(telegramId);
      if (!user) return await this.sendNotRegistered(chatId);

      const today = moment().format('YYYY-MM-DD');
      const workLog = await WorkLog.findOne({
        where: { userId: user.id, workDate: today }
      });

      let message = `üìä –í–∞—à –¥–µ–Ω—å (${moment().format('DD.MM.YYYY')}):\n\n`;

      if (workLog) {
        message += `üü¢ –ü—Ä–∏—à—ë–ª: ${workLog.arrivedAt || '–ù–µ –æ—Ç–º–µ—á–µ–Ω–æ'}\n`;
        message += `üç± –û–±–µ–¥: ${workLog.lunchStart ? `${workLog.lunchStart} - ${workLog.lunchEnd || '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}` : '–ù–µ –±—ã–ª–æ'}\n`;
        message += `üî¥ –£—à—ë–ª: ${workLog.leftAt || '–ù–µ –æ—Ç–º–µ—á–µ–Ω–æ'}\n`;
        message += `üíº –†–µ–∂–∏–º: ${this.getWorkModeText(workLog.workMode)}\n`;
        message += `‚è± –í—Å–µ–≥–æ: ${this.formatMinutes(workLog.totalMinutes)}\n\n`;
        
        if (workLog.dailyReport) {
          message += `üìù –û—Ç—á—ë—Ç: ${workLog.dailyReport}\n`;
        }
        
        if (workLog.problems) {
          message += `‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: ${workLog.problems}`;
        }
      } else {
        message += '‚ùå –°–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –±—ã–ª–æ';
      }

      await this.bot.sendMessage(chatId, message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleMyDay:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  async handleCallback(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const telegramId = callbackQuery.from.id;
    const data = callbackQuery.data;

    try {
      const user = await this.getUser(telegramId);
      if (!user) return await this.sendNotRegistered(chatId);

      switch (data) {
        case 'arrived_office':
          await this.markArrival(chatId, user, 'office');
          break;
        case 'arrived_remote':
          await this.markArrival(chatId, user, 'remote');
          break;
        case 'lunch_start':
          await this.markLunchStart(chatId, user);
          break;
        case 'lunch_end':
          await this.markLunchEnd(chatId, user);
          break;
        case 'left_work':
          await this.markLeaving(chatId, user);
          break;
        case 'sick_day':
          await this.markSickDay(chatId, user);
          break;
      }

      await this.bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleCallback:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏' });
    }
  }

  async sendMainMenu(chatId) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—Ä–∏—à—ë–ª –≤ –æ—Ñ–∏—Å', callback_data: 'arrived_office' },
          { text: 'üè† –†–∞–±–æ—Ç–∞—é —É–¥–∞–ª—ë–Ω–Ω–æ', callback_data: 'arrived_remote' }
        ],
        [
          { text: 'üç± –ù–∞—á–∞–ª –æ–±–µ–¥', callback_data: 'lunch_start' },
          { text: 'üîô –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞', callback_data: 'lunch_end' }
        ],
        [
          { text: '‚ùå –£—à—ë–ª –¥–æ–º–æ–π', callback_data: 'left_work' },
          { text: 'ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π', callback_data: 'sick_day' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, 
      'üïê –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
      { reply_markup: keyboard }
    );
  }

  async markArrival(chatId, user, mode) {
    const today = moment().format('YYYY-MM-DD');
    const currentTime = moment().format('HH:mm:ss');

    try {
      const [workLog, created] = await WorkLog.findOrCreate({
        where: { userId: user.id, workDate: today },
        defaults: {
          userId: user.id,
          workDate: today,
          arrivedAt: currentTime,
          workMode: mode
        }
      });

      if (!created && workLog.arrivedAt) {
        return await this.bot.sendMessage(chatId, 
          `‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è –≤ ${workLog.arrivedAt}`
        );
      }

      if (!created) {
        await workLog.update({
          arrivedAt: currentTime,
          workMode: mode
        });
      }

      const modeText = mode === 'office' ? '–≤ –æ—Ñ–∏—Å–µ' : '—É–¥–∞–ª—ë–Ω–Ω–æ';
      await this.bot.sendMessage(chatId, 
        `‚úÖ –û—Ç–º–µ—á–µ–Ω–æ! –ù–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å ${modeText} –≤ ${moment().format('HH:mm')}`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ markArrival:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞');
    }
  }

  async markLunchStart(chatId, user) {
    const today = moment().format('YYYY-MM-DD');
    const currentTime = moment().format('HH:mm:ss');

    try {
      const workLog = await WorkLog.findOne({
        where: { userId: user.id, workDate: today }
      });

      if (!workLog || !workLog.arrivedAt) {
        return await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –∫–∞–∫ –ø—Ä–∏—à–µ–¥—à–∏–π –Ω–∞ —Ä–∞–±–æ—Ç—É'
        );
      }

      if (workLog.lunchStart) {
        return await this.bot.sendMessage(chatId, 
          `‚ö†Ô∏è –û–±–µ–¥ —É–∂–µ –Ω–∞—á–∞—Ç –≤ ${workLog.lunchStart}`
        );
      }

      await workLog.update({ lunchStart: currentTime });
      
      await this.bot.sendMessage(chatId, 
        `üç± –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! –û–±–µ–¥ –Ω–∞—á–∞—Ç –≤ ${moment().format('HH:mm')}`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ markLunchStart:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–±–µ–¥–∞');
    }
  }

  async markLunchEnd(chatId, user) {
    const today = moment().format('YYYY-MM-DD');
    const currentTime = moment().format('HH:mm:ss');

    try {
      const workLog = await WorkLog.findOne({
        where: { userId: user.id, workDate: today }
      });

      if (!workLog || !workLog.lunchStart) {
        return await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–∞—á–∞–ª–æ –æ–±–µ–¥–∞'
        );
      }

      if (workLog.lunchEnd) {
        return await this.bot.sendMessage(chatId, 
          `‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å –æ–±–µ–¥–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –≤ ${workLog.lunchEnd}`
        );
      }

      await workLog.update({ lunchEnd: currentTime });
      
      const lunchDuration = moment(currentTime, 'HH:mm:ss')
        .diff(moment(workLog.lunchStart, 'HH:mm:ss'), 'minutes');

      await this.bot.sendMessage(chatId, 
        `üîô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –û–±–µ–¥ –¥–ª–∏–ª—Å—è ${lunchDuration} –º–∏–Ω—É—Ç`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ markLunchEnd:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è');
    }
  }

  async getUser(telegramId) {
    return await User.findOne({ where: { telegramId } });
  }

  async sendNotRegistered(chatId) {
    await this.bot.sendMessage(chatId, 
      '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    );
  }

  getRoleText(role) {
    const roles = {
      'employee': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
      'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
      'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    };
    return roles[role] || role;
  }

  getWorkModeText(mode) {
    const modes = {
      'office': '–û—Ñ–∏—Å',
      'remote': '–£–¥–∞–ª—ë–Ω–Ω–æ',
      'sick': '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π',
      'vacation': '–û—Ç–ø—É—Å–∫'
    };
    return modes[mode] || mode;
  }

  formatMinutes(minutes) {
    if (!minutes) return '0 –º–∏–Ω—É—Ç';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}—á ${mins}–º`;
  }
}

module.exports = TimeBot; 