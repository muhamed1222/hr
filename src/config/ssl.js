"use strict";

const { info: _info, error: _error, warn: _warn, debug: _debug } = require("../utils/logger");

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SSL/HTTPS
 * –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
 * –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
 */

const fs = require("fs");
const path = require("path");
const forge = require("node-forge");

// –ü—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
const certPath = path.join(__dirname, "../../certs");
const keyFile = path.join(certPath, "key.pem");
const certFile = path.join(certPath, "cert.pem");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
const hasCertificates = fs.existsSync(keyFile) && fs.existsSync(certFile);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SSL
const sslConfig = {
  enabled: process.env.NODE_ENV === "production" || hasCertificates,
  options: hasCertificates
    ? {
        key: fs.readFileSync(keyFile),
        cert: fs.readFileSync(certFile),
      }
    : null,

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  production: {
    // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Let's Encrypt –∏–ª–∏ –¥—Ä—É–≥–∏–µ CA
    // cert: fs.readFileSync('/path/to/cert.pem'),
    // key: fs.readFileSync('/path/to/key.pem'),
    // ca: fs.readFileSync('/path/to/ca.pem')
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
const generateSelfSignedCert = () => {
  if (hasCertificates) {
    _info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
    return;
  }

  _info("üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...");

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  if (!fs.existsSync(certPath)) {
    fs.mkdirSync(certPath, { recursive: true });
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é OpenSSL
  const { execSync } = require("child_process");

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    execSync(`openssl genrsa -out "${keyFile}" 2048`, { stdio: "inherit" });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    execSync(
      `openssl req -new -x509 -key "${keyFile}" -out "${certFile}" -days 365 -subj "/C=RU/ST=Development/L=Development/O=HR System/CN=localhost"`,
      { stdio: "inherit" },
    );

    _info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã");
    sslConfig.enabled = true;
    sslConfig.options = {
      key: fs.readFileSync(keyFile),
      cert: fs.readFileSync(certFile),
    };
  } catch (error) {
    _warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:", error.message);
    _info("üí° –î–ª—è HTTPS —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenSSL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTP –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
  }
};

module.exports = {
  sslConfig,
  generateSelfSignedCert,
  hasCertificates,
};
