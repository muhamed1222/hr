"use strict";

const { _info, _error, _warn, _debug } = require("../utils/logger");

const _express = require("express");
const { User, Team, UserTeam, _WorkLog } = require("../models");
const { Op } = require("sequelize");
const {
  authenticateToken,
  requireRole,
  requireUserAccess,
  logRequestInfo,
} = require("../middleware/auth");
const _AuditLogger = require("../utils/auditLogger");
const { sendTelegramMessage } = require("../utils/sendTelegramMessage");
const _crypto = require("crypto");
const _bcrypt = require("bcrypt");

const router = express.Router();

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∫–æ –≤—Å–µ–º —Ä–æ—É—Ç–∞–º
router.use(logRequestInfo);
router.use(authenticateToken);

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º
 */
router.get("/", requireRole(["admin", "manager"]), async (req, res) => {
  try {
    const {
      search = "",
      role = "",
      status = "",
      teamId = "",
      page = 1,
      limit = LIMITS.DEFAULT_PAGE_SIZE,
      sortBy = "createdAt",
      sortOrder = "DESC",
    } = req.query;

    const whereClause = {};
    const includeClause = [
      {
        model: Team,
        as: "teams",
        through: {
          where: { status: "active" },
          attributes: ["role", "joinedAt"],
        },
        required: false,
      },
    ];

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ username
    if (search) {
      whereClause[Op.or] = [
        { name: { [Op.like]: `%${search}%` } },
        { username: { [Op.like]: `%${search}%` } },
      ];
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
    if (role) {
      whereClause.role = role;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status) {
      whereClause.status = status;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ
    if (teamId) {
      includeClause[0].required = true;
      includeClause[0].where = { id: teamId };
    }

    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã
    if (req.user.role === "manager") {
      const managedTeams = await Team.findAll({
        where: { managerId: req.user.id },
        attributes: ["id"],
      });

      const teamIds = managedTeams.map((t) => t.id);

      if (teamIds.length === 0) {
        return res.json({
          success: true,
          data: [],
          pagination: { page: 1, limit: LIMITS.DEFAULT_PAGE_SIZE, total: 0, pages: 0 },
        });
      }

      includeClause[0].required = true;
      includeClause[0].where = { id: { [Op.in]: teamIds } };
    }

    const offset = (page - 1) * limit;

    const { rows: users, count } = await User.findAndCountAll({
      where: whereClause,
      include: includeClause,
      attributes: [
        "id",
        "name",
        "username",
        "role",
        "status",
        "telegramId",
        "createdAt",
        "updatedAt",
      ],
      order: [[sortBy, sortOrder.toUpperCase()]],
      limit: parseInt(limit),
      offset: offset,
      distinct: true,
    });

    res.json({
      success: true,
      data: users,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: count,
        pages: Math.ceil(count / limit),
      },
    });
  } catch (error) {
    _error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get("/:id", requireUserAccess, async (req, res) => {
  try {
    const { id } = req.params;

    const user = await User.findByPk(id, {
      include: [
        {
          model: Team,
          as: "teams",
          through: {
            attributes: ["role", "joinedAt", "status"],
          },
        },
        {
          model: Team,
          as: "managedTeams",
          attributes: ["id", "name", "status"],
        },
      ],
      attributes: { exclude: ["password"] },
    });

    if (!user) {
      return res.status(HTTP_STATUS_CODES.NOT_FOUND).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    res.json({
      success: true,
      data: user,
    });
  } catch (error) {
    _error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
    });
  }
});

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post("/", requireRole(["admin"]), async (req, res) => {
  try {
    const {
      name,
      username,
      role = "employee",
      teams = [],
      sendInvite = true,
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !username) {
      return res.status(HTTP_STATUS_CODES.BAD_REQUEST).json({
        success: false,
        message: "–ò–º—è –∏ username –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
    const existingUser = await User.findOne({ where: { username } });
    if (existingUser) {
      return res.status(HTTP_STATUS_CODES.BAD_REQUEST).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ —Ö–µ—à
    const tempPassword = crypto.randomBytes(8).toString("hex").toUpperCase();
    const hashedPassword = await bcrypt.hash(tempPassword, 10);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Telegram ID
    const tempTelegramId = `temp_${crypto.randomBytes(8).toString("hex")}`;

    const newUser = await User.create({
      name,
      username,
      password: hashedPassword,
      role,
      status: "active",
      telegramId: tempTelegramId,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—ã
    if (teams.length > 0) {
      const teamMemberships = teams.map((teamId) => ({
        userId: newUser.id,
        teamId,
        role: "member",
        status: "active",
      }));

      await UserTeam.bulkCreate(teamMemberships);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    await AuditLogger.logUserCreated(req.user.id, newUser, req);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ —É –∞–¥–º–∏–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram)
    if (sendInvite && process.env.TELEGRAM_BOT_TOKEN) {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        const inviteMessage =
          `üë• –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${name}\n` +
          `üîë –õ–æ–≥–∏–Ω: ${username}\n` +
          `üîê –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${tempPassword}\n` +
          `üë§ –†–æ–ª—å: ${role}\n\n` +
          `–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.`;

        await sendTelegramMessage(req.user.telegramId, inviteMessage);
      } catch (telegramError) {
        // // info('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram:', telegramError);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userWithTeams = await User.findByPk(newUser.id, {
      include: [
        {
          model: Team,
          as: "teams",
          through: { attributes: ["role"] },
        },
      ],
      attributes: { exclude: ["password"] },
    });

    res.status(HTTP_STATUS_CODES.CREATED).json({
      success: true,
      data: {
        ...userWithTeams.toJSON(),
        tempPassword: sendInvite ? tempPassword : undefined,
      },
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
    });
  } catch (error) {
    _error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    });
  }
});

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.patch("/:id", requireUserAccess, async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;

    const user = await User.findByPk(id);
    if (!user) {
      return res.status(HTTP_STATUS_CODES.NOT_FOUND).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞—É–¥–∏—Ç–∞
    const oldValues = { ...user.dataValues };
    delete oldValues.password; // –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    if (req.user.role !== "admin") {
      // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –∏ —Å—Ç–∞—Ç—É—Å
      delete updates.role;
      delete updates.status;

      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±—è
      if (req.user.id !== parseInt(id)) {
        return res.status(HTTP_STATUS_CODES.FORBIDDEN).json({
          success: false,
          message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
    if (updates.username && updates.username !== user.username) {
      const existingUser = await User.findOne({
        where: {
          username: updates.username,
          id: { [Op.ne]: id },
        },
      });

      if (existingUser) {
        return res.status(HTTP_STATUS_CODES.BAD_REQUEST).json({
          success: false,
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
    if (updates.password) {
      updates.password = await bcrypt.hash(updates.password, 10);
    }

    await user.update(updates);

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const newValues = { ...updates };
    delete newValues.password; // –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏

    await AuditLogger.logUserUpdated(
      req.user.id,
      user.id,
      oldValues,
      newValues,
      req,
    );

    const updatedUser = await User.findByPk(id, {
      include: [
        {
          model: Team,
          as: "teams",
          through: { attributes: ["role"] },
        },
      ],
      attributes: { exclude: ["password"] },
    });

    res.json({
      success: true,
      data: updatedUser,
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω",
    });
  } catch (error) {
    _error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    });
  }
});

/**
 * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.delete("/:id", requireRole(["admin"]), async (req, res) => {
  try {
    const { id } = req.params;

    if (parseInt(id) === req.user.id) {
      return res.status(HTTP_STATUS_CODES.BAD_REQUEST).json({
        success: false,
        message: "–ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è",
      });
    }

    const user = await User.findByPk(id);
    if (!user) {
      return res.status(HTTP_STATUS_CODES.NOT_FOUND).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    await user.update({ status: "inactive" });

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
    await UserTeam.update(
      { status: "inactive", leftAt: new Date() },
      { where: { userId: id, status: "active" } },
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é
    await AuditLogger.logUserDeactivated(req.user.id, user.id, user, req);

    res.json({
      success: true,
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
    });
  } catch (error) {
    _error("–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    });
  }
});

/**
 * –°–±—Ä–æ—Å Telegram ID
 */
router.post("/:id/reset-telegram", requireRole(["admin"]), async (req, res) => {
  try {
    const { id } = req.params;

    const user = await User.findByPk(id);
    if (!user) {
      return res.status(HTTP_STATUS_CODES.NOT_FOUND).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    const newTempId = `temp_${crypto.randomBytes(8).toString("hex")}`;
    await user.update({ telegramId: newTempId });

    await AuditLogger.log({
      adminId: req.user.id,
      userId: user.id,
      action: "reset_telegram",
      resource: "users",
      resourceId: id,
      description: "–°–±—Ä–æ—à–µ–Ω Telegram ID",
      ipAddress: req.clientIP,
      userAgent: req.userAgent,
    });

    res.json({
      success: true,
      message:
        "Telegram ID —Å–±—Ä–æ—à–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É.",
    });
  } catch (error) {
    _error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ Telegram:", error);
    res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ Telegram ID",
    });
  }
});

/**
 * –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post("/:id/reset-password", requireRole(["admin"]), async (req, res) => {
  try {
    const { id } = req.params;

    const user = await User.findByPk(id);
    if (!user) {
      return res.status(HTTP_STATUS_CODES.NOT_FOUND).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const newPassword = crypto.randomBytes(8).toString("hex").toUpperCase();
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    await user.update({ password: hashedPassword });

    await AuditLogger.log({
      adminId: req.user.id,
      userId: user.id,
      action: "reset_password",
      resource: "users",
      resourceId: id,
      description: "–°–±—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      ipAddress: req.clientIP,
      userAgent: req.userAgent,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ Telegram –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if (user.telegramId && !user.telegramId.startsWith("temp_")) {
      try {
        const passwordMessage = `üîê –í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —Å–±—Ä–æ—à–µ–Ω\n\n–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${newPassword}\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.`;
        await sendTelegramMessage(user.telegramId, passwordMessage);
      } catch (telegramError) {
        // // info('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ Telegram:', telegramError);
      }
    }

    res.json({
      success: true,
      data: { newPassword },
      message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω",
    });
  } catch (error) {
    _error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:", error);
    res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
    });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
router.get(
  "/stats/overview",
  requireRole(["admin", "manager"]),
  async (req, res) => {
    try {
      const whereClause = {};

      // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–∏—Ö –∫–æ–º–∞–Ω–¥
      if (req.user.role === "manager") {
        const managedTeams = await Team.findAll({
          where: { managerId: req.user.id },
          include: [
            {
              model: User,
              as: "members",
              through: { where: { status: "active" } },
              attributes: ["id"],
            },
          ],
        });

        const userIds = managedTeams.flatMap((team) =>
          team.members.map((member) => member.id),
        );
        if (userIds.length === 0) {
          return res.json({
            success: true,
            data: {
              total: 0,
              active: 0,
              inactive: 0,
              withTelegram: 0,
              byRole: {},
            },
          });
        }
        whereClause.id = { [Op.in]: userIds };
      }

      const [total, active, byRole, withTelegram] = await Promise.all([
        User.count({ where: whereClause }),
        User.count({ where: { ...whereClause, status: "active" } }),
        User.findAll({
          where: whereClause,
          attributes: [
            "role",
            [User.sequelize.fn("COUNT", User.sequelize.col("role")), "count"],
          ],
          group: ["role"],
          raw: true,
        }),
        User.count({
          where: {
            ...whereClause,
            telegramId: { [Op.not]: null, [Op.notLike]: "temp_%" },
          },
        }),
      ]);

      const roleStats = byRole.reduce((acc, item) => {
        acc[item.role] = parseInt(item.count);
        return acc;
      }, {});

      res.json({
        total,
        active,
        inactive: total - active,
        withTelegram,
        byRole: roleStats,
      });
    } catch (error) {
      _error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
      res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
      });
    }
  },
);

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏–µ–º –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
 */
router.post("/:id/teams", requireRole(["admin"]), async (req, res) => {
  try {
    const { id } = req.params;
    const { teamId, role = "member" } = req.body;

    const user = await User.findByPk(id);
    if (!user) {
      return res.status(HTTP_STATUS_CODES.NOT_FOUND).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    const team = await Team.findByPk(teamId);
    if (!team) {
      return res.status(HTTP_STATUS_CODES.NOT_FOUND).json({
        success: false,
        message: "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    const existingMembership = await UserTeam.findOne({
      where: { userId: id, teamId, status: "active" },
    });

    if (existingMembership) {
      return res.status(HTTP_STATUS_CODES.BAD_REQUEST).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
      });
    }

    await UserTeam.create({
      userId: id,
      teamId,
      role,
      status: "active",
    });

    await AuditLogger.logTeamMembershipChanged(
      req.user.id,
      teamId,
      id,
      "add",
      req,
    );

    res.json({
      success: true,
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É",
    });
  } catch (error) {
    _error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É:", error);
    res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É",
    });
  }
});

/**
 * –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
 */
router.delete(
  "/:id/teams/:teamId",
  requireRole(["admin"]),
  async (req, res) => {
    try {
      const { id, teamId } = req.params;

      const membership = await UserTeam.findOne({
        where: { userId: id, teamId, status: "active" },
      });

      if (!membership) {
        return res.status(HTTP_STATUS_CODES.NOT_FOUND).json({
          success: false,
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
        });
      }

      await membership.update({ status: "inactive", leftAt: new Date() });

      await AuditLogger.logTeamMembershipChanged(
        req.user.id,
        teamId,
        id,
        "remove",
        req,
      );

      res.json({
        success: true,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã",
      });
    } catch (error) {
      _error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã:", error);
      res.status(LIMITS.DEFAULT_PAGE_SIZE0).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã",
      });
    }
  },
);

module.exports = router;
