const { User, WorkLog } = require('../models');
const { Op } = require('sequelize');
const moment = require('moment');

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥)
 */
async function getUsersForMorningReminder() {
  try {
    const today = moment().format('YYYY-MM-DD');
    
    const users = await User.findAll({
      where: {
        telegramId: { [Op.not]: null },
        status: 'active',
        role: 'employee' // –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –Ω–µ –∞–¥–º–∏–Ω—ã
      },
      include: [{
        model: WorkLog,
        as: 'workLogs',
        where: {
          workDate: today,
          arrivedAt: null
        },
        required: false // LEFT JOIN - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–∞–∂–µ –±–µ–∑ –ª–æ–≥–æ–≤
      }],
      raw: false
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ –Ω–µ—Ç –ª–æ–≥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ arrivedAt = null
    const usersToRemind = users.filter(user => {
      const todayLog = user.workLogs?.find(log => log.workDate === today);
      return !todayLog || !todayLog.arrivedAt;
    });

    // // console.log(`üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –Ω–∞–π–¥–µ–Ω–æ ${usersToRemind.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    return usersToRemind;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–±–µ–¥–µ (–ø—Ä–∏—à–ª–∏, –Ω–æ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ–±–µ–¥)
 */
async function getUsersForLunchStartReminder() {
  try {
    const today = moment().format('YYYY-MM-DD');
    
    const users = await User.findAll({
      where: {
        telegramId: { [Op.not]: null },
        status: 'active',
        role: 'employee'
      },
      include: [{
        model: WorkLog,
        as: 'workLogs',
        where: {
          workDate: today,
          arrivedAt: { [Op.not]: null },
          lunchStart: null
        },
        required: true // INNER JOIN - —Ç–æ–ª—å–∫–æ —Å –ª–æ–≥–∞–º–∏
      }]
    });

    // // console.log(`üç± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–µ–¥–µ: –Ω–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    return users;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–±–µ–¥–µ:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ–±–µ–¥–∞
 */
async function getUsersForLunchEndReminder() {
  try {
    const today = moment().format('YYYY-MM-DD');
    
    const users = await User.findAll({
      where: {
        telegramId: { [Op.not]: null },
        status: 'active',
        role: 'employee'
      },
      include: [{
        model: WorkLog,
        as: 'workLogs',
        where: {
          workDate: today,
          lunchStart: { [Op.not]: null },
          lunchEnd: null
        },
        required: true
      }]
    });

    // // console.log(`üîô –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ–±–µ–¥–∞: –Ω–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    return users;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ–±–µ–¥–∞:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–Ω–µ —Å–¥–∞–ª–∏ –æ—Ç—á—ë—Ç)
 */
async function getUsersForEveningReminder() {
  try {
    const today = moment().format('YYYY-MM-DD');
    
    const users = await User.findAll({
      where: {
        telegramId: { [Op.not]: null },
        status: 'active',
        role: 'employee'
      },
      include: [{
        model: WorkLog,
        as: 'workLogs',
        where: {
          workDate: today,
          arrivedAt: { [Op.not]: null },
          [Op.or]: [
            { dailyReport: null },
            { dailyReport: '' },
            { leftAt: null }
          ]
        },
        required: true
      }]
    });

    // // console.log(`üåÜ –í–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –Ω–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    return users;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
 */
async function getReminderStats() {
  try {
    const today = moment().format('YYYY-MM-DD');
    
    const totalEmployees = await User.count({
      where: {
        telegramId: { [Op.not]: null },
        status: 'active',
        role: 'employee'
      }
    });

    const completedToday = await User.count({
      where: {
        telegramId: { [Op.not]: null },
        status: 'active',
        role: 'employee'
      },
      include: [{
        model: WorkLog,
        as: 'workLogs',
        where: {
          workDate: today,
          arrivedAt: { [Op.not]: null },
          leftAt: { [Op.not]: null },
          dailyReport: { [Op.not]: null }
        },
        required: true
      }]
    });

    return {
      total: totalEmployees,
      completed: completedToday,
      pending: totalEmployees - completedToday,
      date: today
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    return { total: 0, completed: 0, pending: 0, date: today };
  }
}

module.exports = {
  getUsersForMorningReminder,
  getUsersForLunchStartReminder,
  getUsersForLunchEndReminder,
  getUsersForEveningReminder,
  getReminderStats
}; 