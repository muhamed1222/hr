const { User, Team, UserTeam } = require('../models');
const sendTelegramMessage = require('../utils/sendTelegramMessage');

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
 */
async function notifyAbsenceCreated({ absence, user, timestamp }) {
  // // console.log(`üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç ${user.name}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const managers = await getTeamManagers(user.id);
    
    const typeEmoji = {
      'vacation': 'üå¥',
      'sick': 'ü§í',
      'business_trip': 'üß≥',
      'day_off': 'üè†'
    }[absence.type];

    const typeText = {
      'vacation': '–æ—Ç–ø—É—Å–∫',
      'sick': '–±–æ–ª—å–Ω–∏—á–Ω—ã–π',
      'business_trip': '–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫—É',
      'day_off': '–æ—Ç–≥—É–ª'
    }[absence.type];

    const formatDate = (date) => {
      return new Date(date).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    };

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    for (const manager of managers) {
      if (manager.telegramId) {
        const webAppUrl = process.env.WEB_APP_URL || 'https://your-domain.com';
        
        const message = 
          `üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ*\n\n` +
          `üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${user.name}\n` +
          `${typeEmoji} –¢–∏–ø: ${typeText}\n` +
          `üìÖ –ü–µ—Ä–∏–æ–¥: ${formatDate(absence.startDate)} - ${formatDate(absence.endDate)}\n` +
          `üìä –î–Ω–µ–π: ${absence.daysCount}\n` +
          `üí¨ –ü—Ä–∏—á–∏–Ω–∞: ${absence.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
          `‚è∞ –ü–æ–¥–∞–Ω–∞: ${formatDate(timestamp)}\n\n` +
          `üîó [–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É](${webAppUrl}/absences?absence=${absence.id})`;

        const keyboard = {
          inline_keyboard: [
            [
              { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_absence_${absence.id}` },
              { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_absence_${absence.id}` }
            ],
            [
              { text: 'üìã –í—Å–µ –∑–∞—è–≤–∫–∏', url: `${webAppUrl}/absences` }
            ]
          ]
        };

        await sendTelegramMessage(manager.telegramId, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard,
          disable_web_page_preview: true
        });
      }
    }

    // // console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${managers.length} –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ:', error);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getTeamManagers(userId) {
  try {
    const userTeams = await UserTeam.findAll({
      where: { userId },
      include: [{
        model: Team,
        as: 'team',
        include: [{
          model: User,
          as: 'manager',
          attributes: ['id', 'name', 'telegramId'],
          where: { role: 'manager' }
        }]
      }]
    });

    const managers = [];
    userTeams.forEach(userTeam => {
      if (userTeam.team && userTeam.team.manager) {
        managers.push(userTeam.team.manager);
      }
    });

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueManagers = managers.filter((manager, index, self) => 
      self.findIndex(m => m.id === manager.id) === index
    );

    return uniqueManagers;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã:', error);
    return [];
  }
}

module.exports = notifyAbsenceCreated; 