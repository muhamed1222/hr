"use strict";

const { info: _info, error: _error, warn: _warn, debug: _debug } = require("./logger");

/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

const { metrics } = require("./metrics");
const { sendTelegramMessage: _sendTelegramMessage } = require("./sendTelegramMessage");
const { HTTP_STATUS_CODES, LIMITS } = require("../constants");

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
const ALERT_THRESHOLDS = {
  HIGH_ERROR_RATE: 10, // 10% –æ—à–∏–±–æ–∫
  SLOW_RESPONSE: HTTP_STATUS_CODES.OK0, // 2 —Å–µ–∫—É–Ω–¥—ã
  HIGH_MEMORY_USAGE: 85, // 85% –ø–∞–º—è—Ç–∏
  HIGH_CPU_USAGE: 80, // 80% CPU
  FAILED_LOGINS: 5, // 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥
  DATABASE_ERRORS: 3, // 3 –æ—à–∏–±–∫–∏ –ë–î –ø–æ–¥—Ä—è–¥
};

class AlertSystem {
  constructor() {
    this.alerts = {
      highErrorRate: {
        threshold: ALERT_THRESHOLDS.HIGH_ERROR_RATE,
        triggered: false,
      },
      slowResponse: {
        threshold: ALERT_THRESHOLDS.SLOW_RESPONSE,
        triggered: false,
      },
      highMemoryUsage: {
        threshold: ALERT_THRESHOLDS.HIGH_MEMORY_USAGE,
        triggered: false,
      },
      highCPUUsage: {
        threshold: ALERT_THRESHOLDS.HIGH_CPU_USAGE,
        triggered: false,
      },
      failedLogins: {
        threshold: ALERT_THRESHOLDS.FAILED_LOGINS,
        triggered: false,
      },
      databaseErrors: {
        threshold: ALERT_THRESHOLDS.DATABASE_ERRORS,
        triggered: false,
      },
    };

    this.alertHistory = [];
    this.startMonitoring();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤
  checkMetrics() {
    const stats = metrics.getStats();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—à–∏–±–æ–∫
    const errorRate = parseFloat(stats.requests.errorRate);
    if (
      errorRate > this.alerts.highErrorRate.threshold &&
      !this.alerts.highErrorRate.triggered
    ) {
      this.triggerAlert("highErrorRate", {
        current: errorRate + "%",
        threshold: this.alerts.highErrorRate.threshold + "%",
        totalRequests: stats.requests.total,
        errors: stats.requests.errors,
      });
    } else if (
      errorRate <= this.alerts.highErrorRate.threshold &&
      this.alerts.highErrorRate.triggered
    ) {
      this.resolveAlert("highErrorRate", { current: errorRate + "%" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const avgResponseTime = parseFloat(stats.requests.avgResponseTime);
    if (
      avgResponseTime > this.alerts.slowResponse.threshold &&
      !this.alerts.slowResponse.triggered
    ) {
      this.triggerAlert("slowResponse", {
        current: avgResponseTime + "ms",
        threshold: this.alerts.slowResponse.threshold + "ms",
      });
    } else if (
      avgResponseTime <= this.alerts.slowResponse.threshold &&
      this.alerts.slowResponse.triggered
    ) {
      this.resolveAlert("slowResponse", { current: avgResponseTime + "ms" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    if (
      stats.system.memory &&
      stats.system.memory.rss &&
      typeof stats.system.memory.rss === "string"
    ) {
      const memUsage = this.parseMemoryUsage(stats.system.memory.rss);
      const memPercent = (memUsage / this.getTotalMemory()) * LIMITS.MAX_PAGE_SIZE;

      if (
        memPercent > this.alerts.highMemoryUsage.threshold &&
        !this.alerts.highMemoryUsage.triggered
      ) {
        this.triggerAlert("highMemoryUsage", {
          current: memPercent.toFixed(1) + "%",
          threshold: this.alerts.highMemoryUsage.threshold + "%",
          used: stats.system.memory.rss,
          heapUsed: stats.system.memory.heapUsed,
        });
      } else if (
        memPercent <= this.alerts.highMemoryUsage.threshold &&
        this.alerts.highMemoryUsage.triggered
      ) {
        this.resolveAlert("highMemoryUsage", {
          current: memPercent.toFixed(1) + "%",
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
    if (
      stats.auth.failedLogins >= this.alerts.failedLogins.threshold &&
      !this.alerts.failedLogins.triggered
    ) {
      this.triggerAlert("failedLogins", {
        failedAttempts: stats.auth.failedLogins,
        threshold: this.alerts.failedLogins.threshold,
        successRate:
          stats.auth.logins + stats.auth.failedLogins > 0
            ? (
                (stats.auth.logins /
                  (stats.auth.logins + stats.auth.failedLogins)) *
                LIMITS.MAX_PAGE_SIZE
              ).toFixed(1) + "%"
            : "0%",
      });
    } else if (
      stats.auth.failedLogins < this.alerts.failedLogins.threshold &&
      this.alerts.failedLogins.triggered
    ) {
      this.resolveAlert("failedLogins", {
        failedAttempts: stats.auth.failedLogins,
      });
    }
  }

  // –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
  triggerAlert(type, data) {
    this.alerts[type].triggered = true;

    const alert = {
      type,
      severity: this.getAlertSeverity(type),
      message: this.getAlertMessage(type, data),
      data,
      timestamp: new Date().toISOString(),
      resolved: false,
    };

    this.alertHistory.push(alert);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    _warn(`üö® –ê–õ–ï–†–¢: ${alert.message}`, { alert });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.sendAlertNotification(alert);
  }

  // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
  resolveAlert(type, data) {
    this.alerts[type].triggered = false;

    const alert = {
      type,
      severity: "info",
      message: `–ê–ª–µ—Ä—Ç "${this.getAlertTitle(type)}" —Ä–∞–∑—Ä–µ—à–µ–Ω`,
      data,
      timestamp: new Date().toISOString(),
      resolved: true,
    };

    this.alertHistory.push(alert);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    _info(`‚úÖ –ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: ${alert.message}`, { alert });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    this.sendAlertNotification(alert);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–∞
  getAlertSeverity(type) {
    const severities = {
      highErrorRate: "critical",
      slowResponse: "warning",
      highMemoryUsage: "critical",
      highCPUUsage: "warning",
      failedLogins: "critical",
      databaseErrors: "critical",
    };
    return severities[type] || "info";
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
  getAlertTitle(type) {
    const titles = {
      highErrorRate: "–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫",
      slowResponse: "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
      highMemoryUsage: "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
      highCPUUsage: "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU",
      failedLogins: "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞",
      databaseErrors: "–û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    };
    return titles[type] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç";
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
  getAlertMessage(type, data) {
    const title = this.getAlertTitle(type);

    switch (type) {
      case "highErrorRate":
        return `${title}: ${data.current} (–ø–æ—Ä–æ–≥: ${data.threshold})`;
      case "slowResponse":
        return `${title}: ${data.current} (–ø–æ—Ä–æ–≥: ${data.threshold})`;
      case "highMemoryUsage":
        return `${title}: ${data.current} (–ø–æ—Ä–æ–≥: ${data.threshold})`;
      case "failedLogins":
        return `${title}: ${data.failedAttempts} –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ—Ä–æ–≥: ${data.threshold})`;
      default:
        return `${title}: ${JSON.stringify(data)}`;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–µ
  async sendAlertNotification(alert) {
    try {
      const emoji = alert.severity === "critical" ? "üö®" : "‚ö†Ô∏è";
      const message = `${emoji} ${alert.message}\n\n–í—Ä–µ–º—è: ${new Date(alert.timestamp).toLocaleString("ru-RU")}\n–¢–∏–ø: ${this.getAlertTitle(alert.type)}`;

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
      if (process.env.TELEGRAM_ADMIN_CHAT_ID) {
        await _sendTelegramMessage(process.env.TELEGRAM_ADMIN_CHAT_ID, message);
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      // - Email
      // - Slack
      // - Discord
      // - SMS
    } catch (error) {
      _error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–µ:", error);
    }
  }

  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  startMonitoring() {
    setInterval(() => {
      this.checkMetrics();
    }, 60000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
  getAlertHistory(limit = LIMITS.DEFAULT_PAGE_SIZE) {
    return this.alertHistory.slice(-limit);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
  getActiveAlerts() {
    return Object.entries(this.alerts)
      .filter(([_, alert]) => alert.triggered)
      .map(([type, alert]) => ({
        type,
        threshold: alert.threshold,
        triggered: alert.triggered,
      }));
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
  parseMemoryUsage(memoryString) {
    if (typeof memoryString === "string" && memoryString.includes("MB")) {
      const match = memoryString.match(/(\d+(?:\.\d+)?)/);
      return match ? parseFloat(match[1]) * 1024 * 1024 : 0;
    }
    return 0;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ –ø–∞–º—è—Ç–∏
  getTotalMemory() {
    return 1024 * 1024 * 1024; // 1GB –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –∞–ª–µ—Ä—Ç–∞
  setAlertThreshold(type, threshold) {
    if (this.alerts[type]) {
      this.alerts[type].threshold = threshold;
      return true;
    }
    return false;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
  init() {
    _info("–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞");
    this.startMonitoring();
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const alertSystem = new AlertSystem();

module.exports = { alertSystem };
