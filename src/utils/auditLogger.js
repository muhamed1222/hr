const { AuditLog } = require('../models');

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
class AuditLogger {
  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {number} params.adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
   * @param {number} params.userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
   * @param {string} params.action - —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (create, update, delete, login, export, etc.)
   * @param {string} params.resource - —Ä–µ—Å—É—Ä—Å (users, teams, work_logs, reports)
   * @param {string} params.resourceId - ID —Ä–µ—Å—É—Ä—Å–∞
   * @param {string} params.description - –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
   * @param {Object} params.oldValues - —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è update)
   * @param {Object} params.newValues - –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
   * @param {string} params.ipAddress - IP –∞–¥—Ä–µ—Å
   * @param {string} params.userAgent - User Agent
   * @param {Object} params.metadata - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  static async log({
    adminId,
    userId = null,
    action,
    resource,
    resourceId = null,
    description,
    oldValues = null,
    newValues = null,
    ipAddress = null,
    userAgent = null,
    metadata = {}
  }) {
    try {
      await AuditLog.create({
        adminId,
        userId,
        action,
        resource,
        resourceId: resourceId?.toString(),
        description,
        oldValues,
        newValues,
        ipAddress,
        userAgent,
        metadata
      });
      
      // // console.log(`üìù –ê—É–¥–∏—Ç –ª–æ–≥: ${action} ${resource} by admin ${adminId}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç –ª–æ–≥–∞:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async logUserCreated(adminId, newUser, req) {
    return this.log({
      adminId,
      action: 'create',
      resource: 'users',
      resourceId: newUser.id,
      description: `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newUser.name} (${newUser.username})`,
      newValues: {
        id: newUser.id,
        name: newUser.name,
        username: newUser.username,
        role: newUser.role,
        status: newUser.status
      },
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async logUserUpdated(adminId, userId, oldValues, newValues, req) {
    const changes = this.getChangedFields(oldValues, newValues);
    
    return this.log({
      adminId,
      userId,
      action: 'update',
      resource: 'users',
      resourceId: userId,
      description: `–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–∑–º–µ–Ω–µ–Ω–∏—è: ${changes.join(', ')}`,
      oldValues,
      newValues,
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent,
      metadata: { changedFields: changes }
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async logUserDeactivated(adminId, userId, userInfo, req) {
    return this.log({
      adminId,
      userId,
      action: 'deactivate',
      resource: 'users',
      resourceId: userId,
      description: `–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo.name} (${userInfo.username})`,
      oldValues: { status: 'active' },
      newValues: { status: 'inactive' },
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
   */
  static async logTeamCreated(adminId, newTeam, req) {
    return this.log({
      adminId,
      action: 'create',
      resource: 'teams',
      resourceId: newTeam.id,
      description: `–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: ${newTeam.name}`,
      newValues: {
        id: newTeam.id,
        name: newTeam.name,
        managerId: newTeam.managerId,
        status: newTeam.status
      },
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã
   */
  static async logTeamMembershipChanged(adminId, teamId, userId, action, req) {
    const actions = {
      add: '–î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É',
      remove: '–£–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã',
      role_change: '–ò–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ'
    };

    return this.log({
      adminId,
      userId,
      action: `team_${action}`,
      resource: 'teams',
      resourceId: teamId,
      description: `${actions[action]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}`,
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent,
      metadata: { teamId, memberAction: action }
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ª–æ–≥–∞
   */
  static async logWorkLogEdited(adminId, userId, workLogId, oldValues, newValues, req) {
    const changes = this.getChangedFields(oldValues, newValues);
    
    return this.log({
      adminId,
      userId,
      action: 'update',
      resource: 'work_logs',
      resourceId: workLogId,
      description: `–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω —Ä–∞–±–æ—á–∏–π –ª–æ–≥. –ò–∑–º–µ–Ω–µ–Ω–∏—è: ${changes.join(', ')}`,
      oldValues,
      newValues,
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent,
      metadata: { changedFields: changes }
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞
   */
  static async logReportExported(adminId, reportType, params, req) {
    return this.log({
      adminId,
      action: 'export',
      resource: 'reports',
      description: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ—Ç—á—ë—Ç: ${reportType}`,
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent,
      metadata: {
        reportType,
        exportParams: params
      }
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
   */
  static async logLogin(userId, req) {
    return this.log({
      adminId: userId,
      action: 'login',
      resource: 'auth',
      description: '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent
    });
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—è
   */
  static getChangedFields(oldValues, newValues) {
    const changes = [];
    
    for (const key in newValues) {
      if (oldValues[key] !== newValues[key]) {
        changes.push(key);
      }
    }
    
    return changes;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   */
  static async getLogs({
    adminId = null,
    userId = null,
    resource = null,
    action = null,
    startDate = null,
    endDate = null,
    limit = 50,
    offset = 0
  }) {
    const where = {};
    
    if (adminId) where.adminId = adminId;
    if (userId) where.userId = userId;
    if (resource) where.resource = resource;
    if (action) where.action = action;
    
    if (startDate && endDate) {
      where.createdAt = {
        [require('sequelize').Op.between]: [startDate, endDate]
      };
    }

    const { rows: logs, count } = await AuditLog.findAndCountAll({
      where,
      include: [
        {
          model: require('../models').User,
          as: 'admin',
          attributes: ['id', 'name', 'username']
        },
        {
          model: require('../models').User,
          as: 'user',
          attributes: ['id', 'name', 'username'],
          required: false
        }
      ],
      order: [['createdAt', 'DESC']],
      limit,
      offset
    });

    return { logs, total: count };
  }

  // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è–º–∏
  static async logAbsenceCreated(userId, absenceId, req) {
    return this.log({
      adminId: userId,
      userId,
      action: 'create',
      resource: 'absences',
      resourceId: absenceId,
      description: `–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ #${absenceId}`,
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent,
      metadata: { absenceId }
    });
  }

  static async logAbsenceApproved(adminId, absenceId, req) {
    return this.log({
      adminId,
      action: 'approve',
      resource: 'absences',
      resourceId: absenceId,
      description: `–û–¥–æ–±—Ä–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ #${absenceId}`,
      oldValues: { status: 'pending' },
      newValues: { status: 'approved' },
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent,
      metadata: { absenceId, action: 'approve' }
    });
  }

  static async logAbsenceRejected(adminId, absenceId, reason, req) {
    return this.log({
      adminId,
      action: 'reject',
      resource: 'absences',
      resourceId: absenceId,
      description: `–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ #${absenceId}. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      oldValues: { status: 'pending' },
      newValues: { status: 'rejected', rejectionReason: reason },
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent,
      metadata: { absenceId, action: 'reject', reason }
    });
  }

  static async logAbsenceDeleted(adminId, absenceId, req) {
    return this.log({
      adminId,
      action: 'delete',
      resource: 'absences',
      resourceId: absenceId,
      description: `–£–¥–∞–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ #${absenceId}`,
      ipAddress: req?.clientIP,
      userAgent: req?.userAgent,
      metadata: { absenceId }
    });
  }
}

module.exports = AuditLogger; 