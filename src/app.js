"use strict";

const { _info, _error, _warn, _debug } = require("./utils/logger");
const express = require("express");
const cors = require("cors");
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const path = require("path");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
_info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require("dotenv").config();
_info("üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
const sequelize = require("./config/database");
_info("üì¶ –ë–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

// –ó–∞–≥—Ä—É–∑–∫–∞ Sequelize
_info("üìä Sequelize –∑–∞–≥—Ä—É–∂–µ–Ω");

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
const { sslConfig, generateSelfSignedCert } = require("./config/ssl");
const { errorHandler, notFoundHandler } = require("./services/errors");
_info("üì¶ –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ—É—Ç–æ–≤
const authRoutes = require("./routes/auth");
const telegramAdminRoutes = require("./routes/telegram-admin");
const userRoutes = require("./routes/users");
const usersManagementRoutes = require("./routes/users-management");
const teamRoutes = require("./routes/teams");
const auditLogRoutes = require("./routes/audit-logs");
const workLogRoutes = require("./routes/workLogs");
const reportsRoutes = require("./routes/reports");
const metricsRoutes = require("./routes/metrics");
const telegramRoutes = require("./routes/telegram");
const analyticsRoutes = require("./routes/analytics");
const systemConfigRoutes = require("./routes/system-config");
const scheduleRoutes = require("./routes/schedule");
const remindersRoutes = require("./routes/reminders");
const testEventsRoutes = require("./routes/test-events");
const testTeamsApiRoutes = require("./routes/test-teams-api");

const app = express();
const DEFAULT_PORT = 3000;
const DEFAULT_HTTPS_PORT = 3443;
const PORT = process.env.PORT || DEFAULT_PORT;
const HTTPS_PORT = process.env.HTTPS_PORT || DEFAULT_HTTPS_PORT;

// Middlewares
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: ["'self'", "'unsafe-inline'", "https://telegram.org"],
        connectSrc: [
          "'self'",
          "http://localhost:3000",
          "http://localhost:5173",
          "ws://localhost:5173",
        ],
        styleSrc: ["'self'", "'unsafe-inline'"],
        imgSrc: ["'self'", "data:", "https:"],
        fontSrc: ["'self'"],
        objectSrc: ["'none'"],
        mediaSrc: ["'self'"],
        frameSrc: ["'none'"],
      },
    },
  }),
);
app.use(
  cors({
    origin:
      process.env.NODE_ENV === "production"
        ? ["https://yourdomain.com", "https://www.yourdomain.com"]
        : [
            "http://localhost:5173",
            "http://localhost:3000",
            "https://localhost:3443",
            "http://127.0.0.1:5173",
            "http://127.0.0.1:3000",
            "null", // –¥–ª—è —Ñ–∞–π–ª–æ–≤, –æ—Ç–∫—Ä—ã—Ç—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ
          ],
    credentials: true,
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With"],
  }),
);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
if (metricsRoutes && metricsRoutes.middleware) {
  app.use(metricsRoutes.middleware());
}

// Rate limiting (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const RATE_LIMIT_WINDOW_MS = 15 * TIME_CONSTANTS.MINUTE; // 15 –º–∏–Ω—É—Ç
const RATE_LIMIT_MAX_REQUESTS = LIMITS.MAX_PAGE_SIZE0; // —É–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const _limiter = rateLimit({
  windowMs: RATE_LIMIT_WINDOW_MS,
  max: RATE_LIMIT_MAX_REQUESTS,
});
// app.use('/api/', _limiter); // –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

// API Routes
app.use("/api/auth", authRoutes);
app.use("/api/telegram-admin", telegramAdminRoutes);
app.use("/api/users", userRoutes);
app.use("/api/users-management", usersManagementRoutes);
app.use("/api/teams", teamRoutes);
app.use("/api/audit-logs", auditLogRoutes);
app.use("/api/work-logs", workLogRoutes);
app.use("/api/reports", reportsRoutes);
app.use("/api/analytics", analyticsRoutes);
app.use("/api/telegram", telegramRoutes);
app.use("/api/reminders", remindersRoutes);
app.use("/api/schedule", scheduleRoutes);
app.use("/api/metrics", metricsRoutes);
app.use("/api/test-events", testEventsRoutes);
app.use("/api/test-teams", testTeamsApiRoutes);

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–æ—É—Ç—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è HTTP_STATUS_CODES.NOT_FOUND –æ—à–∏–±–æ–∫
app.use("/api/stats", analyticsRoutes);
app.use("/api/employees", userRoutes);
app.use("/api/logs", workLogRoutes);
app.use("/api/settings", systemConfigRoutes);
app.use("/api/system-config", systemConfigRoutes);

// Health check
app.get("/health", (req, res) => {
  const memUsage = process.memoryUsage();

  const response = {
    status: "OK",
    timestamp: new Date().toISOString(),
    version: "1.0.0",
    environment: process.env.NODE_ENV || "development",
    uptime: Math.floor(process.uptime()) + "s",
    system: {
      memory: {
        rss: Math.round(memUsage.rss / 1024 / 1024) + "MB",
        heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024) + "MB",
        heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024) + "MB",
      },
    },
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
  if (metricsRoutes && metricsRoutes.getStats) {
    const stats = metricsRoutes.getStats();
    response.metrics = {
      requests: {
        total: stats.requests.total,
        errors: stats.requests.errors,
        errorRate: stats.requests.errorRate,
        avgResponseTime: stats.requests.avgResponseTime,
      },
      auth: {
        logins: stats.auth.logins,
        failedLogins: stats.auth.failedLogins,
      },
      system: {
        cpu: stats.system.cpu,
      },
    };
  }

  res.json(response);
});

// API Documentation endpoint
app.get("/api", (req, res) => {
  res.json({
    name: "HR Management API",
    version: "1.0.0",
    endpoints: {
      auth: "/api/auth",
      users: "/api/users",
      teams: "/api/teams",
      workLogs: "/api/work-logs",
      reports: "/api/reports",
      health: "/health",
    },
    documentation: "https://docs.example.com",
  });
});

// Serve static files from the React app build directory
app.use(express.static(path.join(__dirname, "../admin-panel/dist")));

// Handle React routing, return all requests to React app
app.get("*", (req, res, next) => {
  // Skip API routes
  if (req.path.startsWith("/api/") || req.path === "/health") {
    return next();
  }

  // Serve React app for all other routes
  res.sendFile(path.join(__dirname, "../admin-panel/dist/index.html"));
});

// HTTP_STATUS_CODES.NOT_FOUND handler (only for API routes)
if (notFoundHandler) {
  app.use("/api/*", notFoundHandler);
}

// Global error handler
if (errorHandler) {
  app.use(errorHandler);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function initialize() {
  try {
    _info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...");

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    _info("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...");
    if (sequelize) {
      await sequelize.authenticate();
      _info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
      _info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏...");
      await sequelize.sync({ force: false });
      _info("‚úÖ –ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    } else {
      _warn("‚ö†Ô∏è Sequelize –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if (process.env.NODE_ENV !== "production" && generateSelfSignedCert) {
      generateSelfSignedCert();
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    _info("‚û°Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º app.listen");

    // HTTP —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      _info("HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω");
      _info(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });

    // HTTPS —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (sslConfig && sslConfig.enabled) {
      const https = require("https");
      const httpsServer = https.createServer(sslConfig.options, app);
      httpsServer.listen(HTTPS_PORT, () => {
        _info("HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω");
        _info(`üîê HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HTTPS_PORT}`);
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
    _info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞...");
    if (process.env.TELEGRAM_BOT_TOKEN) {
      // ___TimeBot.init(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      _info("Telegram –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
    _info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π...");
    try {
      const { _eventEmitter } = require("./events/eventEmitter");
      _info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    } catch (err) {
      _warn("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:", err.message);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    _info("‚è∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...");
    try {
      const { _scheduler } = require("./cron/scheduler");
      _info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    } catch (err) {
      _warn("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", err.message);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
    _info("üö® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤...");
    try {
      const { alertSystem } = require("./utils/alerts");
      if (alertSystem && alertSystem.init) {
        alertSystem.init();
        _info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
      } else {
        _warn("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
      }
    } catch (err) {
      _warn("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:", err.message);
    }

    _info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
  } catch (err) {
    _error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", err);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try {
  initialize();
} catch (err) {
  _error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", err);
  _error("Stack trace:", err.stack);
  process.exit(1);
}
