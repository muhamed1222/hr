name: üöÄ Deploy TimeBot to Production

on:
  push:
    branches: [ main, production ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
  test:
    name: üß™ Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì¶ Install Dependencies
      run: npm ci
      
    - name: üîç Run ESLint
      run: npm run lint || true
      
    - name: üß™ Run Tests
      run: npm test || true
      
    - name: üìä Generate Test Coverage
      run: npm run test:coverage || true
      
    - name: üì§ Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # üèóÔ∏è –°–±–æ—Ä–∫–∞ Admin Panel
  build-frontend:
    name: üèóÔ∏è Build Admin Panel
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: admin-panel/package-lock.json
        
    - name: üì¶ Install Frontend Dependencies
      working-directory: ./admin-panel
      run: npm ci
      
    - name: üèóÔ∏è Build Admin Panel
      working-directory: ./admin-panel
      run: npm run build
      env:
        VITE_API_URL: https://your-domain.com/api
        
    - name: üì§ Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: admin-panel-dist
        path: admin-panel/dist/
        retention-days: 30

  # üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
  build-docker:
    name: üê≥ Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üê≥ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîê Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üè∑Ô∏è Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: üî® Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: üìù Output Image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # üöÄ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-frontend, build-docker]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: 
      name: staging
      url: https://staging.your-domain.com
      
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üì• Download Frontend Build
      uses: actions/download-artifact@v3
      with:
        name: admin-panel-dist
        path: admin-panel/dist/
        
    - name: üöÄ Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd /var/www/timebot-staging
          git pull origin main
          docker-compose down
          docker-compose pull
          docker-compose up -d
          docker system prune -f
          
    - name: ü©∫ Health Check
      run: |
        sleep 30
        curl -f https://staging.your-domain.com/health || exit 1
        
    - name: üì¢ Notify Slack (Success)
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üéâ TimeBot —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç –Ω–∞ staging!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # üè≠ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ production
  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-frontend, build-docker, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.environment == 'production'
    environment: 
      name: production
      url: https://your-domain.com
      
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üì• Download Frontend Build
      uses: actions/download-artifact@v3
      with:
        name: admin-panel-dist
        path: admin-panel/dist/
        
    - name: üöÄ Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /var/www/timebot-production
          git pull origin main
          docker-compose down
          docker-compose pull
          docker-compose up -d
          docker system prune -f
          
    - name: ü©∫ Health Check
      run: |
        sleep 30
        curl -f https://your-domain.com/health || exit 1
        
    - name: üì¢ Notify Slack (Success)
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üöÄ TimeBot —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç –Ω–∞ production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: üì¢ Notify Slack (Failure)
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è TimeBot –Ω–∞ production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è
  post-deploy-monitoring:
    name: üîç Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
    - name: ü©∫ Extended Health Checks
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
        
        # Health check
        curl -f https://your-domain.com/health
        
        # API endpoints
        curl -f https://your-domain.com/api/auth/verify || true
        
        echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
        
    - name: üìä Performance Test
      run: |
        echo "üìä –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ wrk)
        # wrk -t2 -c10 -d30s https://your-domain.com/health || true
        
        echo "üìä –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω"
        
    - name: ü§ñ Test Telegram Bot
      run: |
        echo "ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        curl -f "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getWebhookInfo" || true
        
        echo "ü§ñ Telegram –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω"
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  # üîÑ Rollback workflow
  rollback:
    name: üîÑ Rollback
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: üîÑ Rollback Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /var/www/timebot-production
          git checkout HEAD~1
          docker-compose down
          docker-compose up -d
          
    - name: üì¢ Notify Rollback
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        text: 'üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω rollback TimeBot –Ω–∞ production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
  generate-report:
    name: üìã Generate Deployment Report
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-monitoring]
    if: always()
    
    steps:
    - name: üìã Create Deployment Report
      run: |
        cat << EOF > deployment-report.md
        # üöÄ TimeBot Deployment Report
        
        **Date:** $(date)
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref }}
        **Triggered by:** ${{ github.actor }}
        
        ## üìä Results
        
        - **Tests:** ${{ needs.test.result }}
        - **Frontend Build:** ${{ needs.build-frontend.result }}
        - **Docker Build:** ${{ needs.build-docker.result }}
        - **Staging Deploy:** ${{ needs.deploy-staging.result }}
        - **Production Deploy:** ${{ needs.deploy-production.result }}
        - **Monitoring:** ${{ needs.post-deploy-monitoring.result }}
        
        ## üîó Links
        
        - **Production:** https://your-domain.com
        - **Staging:** https://staging.your-domain.com
        - **Admin Panel:** https://your-domain.com/admin
        
        ## üè∑Ô∏è Docker Image
        
        \`\`\`
        ${{ needs.build-docker.outputs.image }}
        \`\`\`
        
        EOF
        
    - name: üì§ Upload Report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md 